"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1170],{6262:(e,a)=>{a.A=(e,a)=>{const i=e.__vccOpts||e;for(const[e,s]of a)i[e]=s;return i}},5299:(e,a,i)=>{i.r(a),i.d(a,{comp:()=>r,data:()=>l});var s=i(641);const n={},r=(0,i(6262).A)(n,[["render",function(e,a){return(0,s.uX)(),(0,s.CE)("div",null,a[0]||(a[0]=[(0,s.Fv)('<h3 id="问题罗列" tabindex="-1"><a class="header-anchor" href="#问题罗列"><span>问题罗列</span></a></h3><ol><li>Producer发消息至Broker的时候，就有可能会丢消息 | producer -&gt; broker</li><li>把消息发送到Broker以后，也有可能丢消息 | broker-&gt;磁盘 | broker-&gt;broker之间同步</li><li>client消费数据时候丢失数据或者重复消费 | 常见场景</li></ol><h3 id="_1和2的问题如何解决" tabindex="-1"><a class="header-anchor" href="#_1和2的问题如何解决"><span>1和2的问题如何解决</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>callback的api</span></span>\n<span class="line"><span>acks</span></span>\n<span class="line"><span>retries</span></span>\n<span class="line"><span>factor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3的问题如何解决" tabindex="-1"><a class="header-anchor" href="#_3的问题如何解决"><span>3的问题如何解决</span></a></h3><ol><li>不想消费者丢失数据那就手动提交，等消费逻辑正常跑完手动提交offset (auto commit = false)</li><li>不想重复消费呢（导致重复消费的无非是client已经消费了数据，但是offset没来得及提交）</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>场景：</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>a. pull 500条数据消费(offset=10~510)，在5min没消费完kafka认为consumer已经炸了，触发rebalance把offset=10~510的数据给其他消费者，重复消费</span></span>\n<span class="line"><span>b. 消费了数据以后，提交offset之前，kill了线程（宕机、重启）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>解决方案：消费逻辑的幂等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h3><p><a href="https://www.zhihu.com/question/483747691/answer/2392949203" target="_blank" rel="noopener noreferrer">kafka 如何保证不重复消费又不丢失数据</a><a href="https://zhuanlan.zhihu.com/p/442468709" target="_blank" rel="noopener noreferrer">图解Kafka的架构和消费原理</a></p>',10)]))}]]),l=JSON.parse('{"path":"/posts/kafka/%E5%A6%82%E4%BD%95%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E5%8F%88%E4%B8%8D%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE.html","title":"如何保证不重复消费又不丢失数据","lang":"zh-CN","frontmatter":{"title":"如何保证不重复消费又不丢失数据","tags":["kafka"],"categories":["kafka"],"description":"问题罗列 Producer发消息至Broker的时候，就有可能会丢消息 | producer -> broker 把消息发送到Broker以后，也有可能丢消息 | broker->磁盘 | broker->broker之间同步 client消费数据时候丢失数据或者重复消费 | 常见场景 1和2的问题如何解决 3的问题如何解决 不想消费者丢失数据那就手动...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/kafka/%E5%A6%82%E4%BD%95%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E5%8F%88%E4%B8%8D%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"如何保证不重复消费又不丢失数据"}],["meta",{"property":"og:description","content":"问题罗列 Producer发消息至Broker的时候，就有可能会丢消息 | producer -> broker 把消息发送到Broker以后，也有可能丢消息 | broker->磁盘 | broker->broker之间同步 client消费数据时候丢失数据或者重复消费 | 常见场景 1和2的问题如何解决 3的问题如何解决 不想消费者丢失数据那就手动..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"kafka"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何保证不重复消费又不丢失数据\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"问题罗列","slug":"问题罗列","link":"#问题罗列","children":[]},{"level":3,"title":"1和2的问题如何解决","slug":"_1和2的问题如何解决","link":"#_1和2的问题如何解决","children":[]},{"level":3,"title":"3的问题如何解决","slug":"_3的问题如何解决","link":"#_3的问题如何解决","children":[]},{"level":3,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"posts/kafka/如何不重复消费又不丢失数据.md","excerpt":"<h3>问题罗列</h3>\\n<ol>\\n<li>Producer发消息至Broker的时候，就有可能会丢消息 | producer -&gt; broker</li>\\n<li>把消息发送到Broker以后，也有可能丢消息 | broker-&gt;磁盘 | broker-&gt;broker之间同步</li>\\n<li>client消费数据时候丢失数据或者重复消费 | 常见场景</li>\\n</ol>\\n<h3>1和2的问题如何解决</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>callback的api</span></span>\\n<span class=\\"line\\"><span>acks</span></span>\\n<span class=\\"line\\"><span>retries</span></span>\\n<span class=\\"line\\"><span>factor</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);