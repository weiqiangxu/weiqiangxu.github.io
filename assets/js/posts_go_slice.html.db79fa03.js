"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7539],{6262:(s,n)=>{n.A=(s,n)=>{const i=s.__vccOpts||s;for(const[s,a]of n)i[s]=a;return i}},6060:(s,n,i)=>{i.r(n),i.d(n,{comp:()=>l,data:()=>t});var a=i(641);const e={},l=(0,i(6262).A)(e,[["render",function(s,n){return(0,a.uX)(),(0,a.CE)("div",null,n[0]||(n[0]=[(0,a.Fv)('<h1 id="slice" tabindex="-1"><a class="header-anchor" href="#slice"><span>slice</span></a></h1><h3 id="一、底层数据结构" tabindex="-1"><a class="header-anchor" href="#一、底层数据结构"><span>一、底层数据结构</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// runtime/slice.go</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> slice</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 底层是数组</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tarray</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Pointer</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// 长度</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   int</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 容量</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 扩容是2倍速扩容当大于1024的时候1.25倍速扩容</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tcap</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用range循环的陷阱" tabindex="-1"><a class="header-anchor" href="#使用range循环的陷阱"><span>使用Range循环的陷阱</span></a></h3><ol><li>code</li></ol><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>type User struct {</span></span>\n<span class="line"><span>\tName string `json:&quot;name&quot;`</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func GetUser() ([]*User, []User) {</span></span>\n<span class="line"><span>\tvar list []User</span></span>\n<span class="line"><span>\tlist = append(list, User{</span></span>\n<span class="line"><span>\t\tName: &quot;1&quot;,</span></span>\n<span class="line"><span>\t})</span></span>\n<span class="line"><span>\tlist = append(list, User{</span></span>\n<span class="line"><span>\t\tName: &quot;2&quot;,</span></span>\n<span class="line"><span>\t})</span></span>\n<span class="line"><span>\tlist = append(list, User{</span></span>\n<span class="line"><span>\t\tName: &quot;3&quot;,</span></span>\n<span class="line"><span>\t})</span></span>\n<span class="line"><span>\tvar z []*User</span></span>\n<span class="line"><span>\tvar y []User</span></span>\n<span class="line"><span>\tfor _, v := range list {</span></span>\n<span class="line"><span>\t\tif v.Name == &quot;1&quot; {</span></span>\n<span class="line"><span>\t\t\tz = append(z, &amp;v) // $v 的地址在一次 range 之中唯一不变的</span></span>\n<span class="line"><span>\t\t\ty = append(y, v)</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\treturn z, y</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>unit test</li></ol><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>func TestGetUser(t *testing.T) {</span></span>\n<span class="line"><span>\ttests := []struct {</span></span>\n<span class="line"><span>\t\tname  string</span></span>\n<span class="line"><span>\t\twant  []*User</span></span>\n<span class="line"><span>\t\twant1 []User</span></span>\n<span class="line"><span>\t}{</span></span>\n<span class="line"><span>\t\t{</span></span>\n<span class="line"><span>\t\t\tname:  &quot;&quot;,</span></span>\n<span class="line"><span>\t\t\twant:  nil,</span></span>\n<span class="line"><span>\t\t\twant1: nil,</span></span>\n<span class="line"><span>\t\t},</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\tfor _, tt := range tests {</span></span>\n<span class="line"><span>\t\tt.Run(tt.name, func(t *testing.T) {</span></span>\n<span class="line"><span>\t\t\tgot, got1 := GetUser()</span></span>\n<span class="line"><span>\t\t\tfor _, v := range got {</span></span>\n<span class="line"><span>\t\t\t\tt.Logf(&quot;got=%+v&quot;, v)</span></span>\n<span class="line"><span>\t\t\t}</span></span>\n<span class="line"><span>\t\t\tfor _, v := range got1 {</span></span>\n<span class="line"><span>\t\t\t\tt.Logf(&quot;got1=%+v&quot;, v)</span></span>\n<span class="line"><span>\t\t\t}</span></span>\n<span class="line"><span>\t\t})</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8)]))}]]),t=JSON.parse('{"path":"/posts/go/slice.html","title":"slice","lang":"zh-CN","frontmatter":{"description":"slice 一、底层数据结构 使用Range循环的陷阱 code unit test","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/slice.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"slice"}],["meta",{"property":"og:description","content":"slice 一、底层数据结构 使用Range循环的陷阱 code unit test"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"slice\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、底层数据结构","slug":"一、底层数据结构","link":"#一、底层数据结构","children":[]},{"level":3,"title":"使用Range循环的陷阱","slug":"使用range循环的陷阱","link":"#使用range循环的陷阱","children":[]}],"readingTime":{"minutes":0.63,"words":189},"filePathRelative":"posts/go/slice.md","excerpt":"\\n<h3>一、底层数据结构</h3>\\n<div class=\\"language-go line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"go\\" data-title=\\"go\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// runtime/slice.go</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">type</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> slice</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> struct</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // 底层是数组</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">\\tarray</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> unsafe</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Pointer</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">\\t// 长度</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">    len</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">   int</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // 容量</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // 扩容是2倍速扩容当大于1024的时候1.25倍速扩容</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">\\tcap</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">   int</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);