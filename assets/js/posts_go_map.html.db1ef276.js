"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3287],{6262:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,l]of t)i[e]=l;return i}},1022:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>o,data:()=>n});var l=i(641);const a={},o=(0,i(6262).A)(a,[["render",function(e,t){return(0,l.uX)(),(0,l.CE)("div",null,t[0]||(t[0]=[(0,l.Fv)('<h3 id="术语" tabindex="-1"><a class="header-anchor" href="#术语"><span>术语</span></a></h3><ol><li>哈希表</li><li>哈希桶</li><li>取模法 \\ 与运算法</li><li>哈希冲突（开放地址法、拉链法）</li><li>哈希冲突影响效率（散列均匀的哈希函数减少哈希冲突的发生、哈希表扩容也可以有效保障哈希读写效率）</li><li>存储键值对数目与哈希桶数目比值-负载因子</li><li>扩容时候分配新桶，需要迁移旧桶到新桶 - 渐进式扩容</li></ol><h3 id="go" tabindex="-1"><a class="header-anchor" href="#go"><span>go</span></a></h3><ol><li>与运算</li><li>负载因子6.5默认</li><li>翻倍扩容\\等量扩容 （等量扩容用于很多键值对被删除时候让内存排列更加紧凑）</li></ol><h1 id="go实现" tabindex="-1"><a class="header-anchor" href="#go实现"><span>GO实现</span></a></h1><ol><li>map类型变量本质上是 hmap (键值对数目、桶、旧桶)</li><li>map使用的桶结构是 bmap （k、v、可以继续用于存储的溢出桶 ）</li></ol><p><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a></p>',7)]))}]]),n=JSON.parse('{"path":"/posts/go/map.html","title":"map原理解析","lang":"zh-CN","frontmatter":{"title":"map原理解析","tags":["GO原理"],"categories":["go"],"date":"2023-04-08T06:40:12.000Z","index_img":"/images/bg/computer.jpeg","hide":true,"description":"术语 哈希表 哈希桶 取模法 \\\\ 与运算法 哈希冲突（开放地址法、拉链法） 哈希冲突影响效率（散列均匀的哈希函数减少哈希冲突的发生、哈希表扩容也可以有效保障哈希读写效率） 存储键值对数目与哈希桶数目比值-负载因子 扩容时候分配新桶，需要迁移旧桶到新桶 - 渐进式扩容 go 与运算 负载因子6.5默认 翻倍扩容\\\\等量扩容 （等量扩容用于很多键值对被删除时...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/map.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"map原理解析"}],["meta",{"property":"og:description","content":"术语 哈希表 哈希桶 取模法 \\\\ 与运算法 哈希冲突（开放地址法、拉链法） 哈希冲突影响效率（散列均匀的哈希函数减少哈希冲突的发生、哈希表扩容也可以有效保障哈希读写效率） 存储键值对数目与哈希桶数目比值-负载因子 扩容时候分配新桶，需要迁移旧桶到新桶 - 渐进式扩容 go 与运算 负载因子6.5默认 翻倍扩容\\\\等量扩容 （等量扩容用于很多键值对被删除时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"GO原理"}],["meta",{"property":"article:published_time","content":"2023-04-08T06:40:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"map原理解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-08T06:40:12.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"术语","slug":"术语","link":"#术语","children":[]},{"level":3,"title":"go","slug":"go","link":"#go","children":[]}],"readingTime":{"minutes":0.82,"words":245},"filePathRelative":"posts/go/map.md","localizedDate":"2023年4月8日","excerpt":"<h3>术语</h3>\\n<ol>\\n<li>哈希表</li>\\n<li>哈希桶</li>\\n<li>取模法 \\\\ 与运算法</li>\\n<li>哈希冲突（开放地址法、拉链法）</li>\\n<li>哈希冲突影响效率（散列均匀的哈希函数减少哈希冲突的发生、哈希表扩容也可以有效保障哈希读写效率）</li>\\n<li>存储键值对数目与哈希桶数目比值-负载因子</li>\\n<li>扩容时候分配新桶，需要迁移旧桶到新桶 - 渐进式扩容</li>\\n</ol>\\n<h3>go</h3>\\n<ol>\\n<li>与运算</li>\\n<li>负载因子6.5默认</li>\\n<li>翻倍扩容\\\\等量扩容 （等量扩容用于很多键值对被删除时候让内存排列更加紧凑）</li>\\n</ol>","autoDesc":true}')}}]);