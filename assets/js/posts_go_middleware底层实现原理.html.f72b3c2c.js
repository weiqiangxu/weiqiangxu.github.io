"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7849],{6262:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,a]of s)e[i]=a;return e}},1784:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>t,data:()=>l});var a=e(641);const n={},t=(0,e(6262).A)(n,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="middlare如何实现next然后回来时候统计执行时长的" tabindex="-1"><a class="header-anchor" href="#middlare如何实现next然后回来时候统计执行时长的"><span>middlare如何实现next然后回来时候统计执行时长的</span></a></h1><blockquote><p>责任链模式将handler func注入router对象之中某一个route对象的handler func chain之中</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tfor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">handlers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t\tc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">handlers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t\tc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关文档" tabindex="-1"><a class="header-anchor" href="#相关文档"><span>相关文档</span></a></h3><ul><li><a href="https://www.jishuchi.com/books/gin-practice" target="_blank" rel="noopener noreferrer">Gin实践</a></li><li><a href="https://wu-sheng.gitbooks.io/opentracing-io/content/pages/quick-start.html" target="_blank" rel="noopener noreferrer">open-tracing中文版</a></li><li><a href="https://mp.weixin.qq.com/s/28UBEsLOAHDv530ePilKQA" target="_blank" rel="noopener noreferrer">Jaeger 链路追踪</a></li><li><a href="https://mp.weixin.qq.com/s/Ea28475_UTNaM9RNfgPqJA" target="_blank" rel="noopener noreferrer">路由中间件 - Jaeger 链路追踪</a></li><li><a href="https://www.jishuchi.com/read/gin-practice/3886" target="_blank" rel="noopener noreferrer">grpc实践</a></li><li><a href="https://www.jishuchi.com/read/gin-practice/3831" target="_blank" rel="noopener noreferrer">GC角度看内存损耗</a></li></ul>',5)]))}]]),l=JSON.parse('{"path":"/posts/go/middleware%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"moddleware底层实现原理","lang":"zh-CN","frontmatter":{"title":"moddleware底层实现原理","index_img":"/images/bg/文章通用.png","tags":["gin"],"categories":["golang"],"date":"2023-04-11T09:40:12.000Z","excerpt":"gin的中间件实现原理","hide":true,"description":"middlare如何实现next然后回来时候统计执行时长的 责任链模式将handler func注入router对象之中某一个route对象的handler func chain之中 相关文档 Gin实践 open-tracing中文版 Jaeger 链路追踪 路由中间件 - Jaeger 链路追踪 grpc实践 GC角度看内存损耗","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/middleware%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"moddleware底层实现原理"}],["meta",{"property":"og:description","content":"middlare如何实现next然后回来时候统计执行时长的 责任链模式将handler func注入router对象之中某一个route对象的handler func chain之中 相关文档 Gin实践 open-tracing中文版 Jaeger 链路追踪 路由中间件 - Jaeger 链路追踪 grpc实践 GC角度看内存损耗"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"gin"}],["meta",{"property":"article:published_time","content":"2023-04-11T09:40:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"moddleware底层实现原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-11T09:40:12.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"相关文档","slug":"相关文档","link":"#相关文档","children":[]}],"readingTime":{"minutes":0.52,"words":155},"filePathRelative":"posts/go/middleware底层实现原理.md","localizedDate":"2023年4月11日","autoDesc":true}')}}]);