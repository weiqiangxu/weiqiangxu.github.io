"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4662],{6262:(s,e)=>{e.A=(s,e)=>{const a=s.__vccOpts||s;for(const[s,i]of e)a[s]=i;return a}},4984:(s,e,a)=>{a.r(e),a.d(e,{comp:()=>l,data:()=>t});var i=a(641);const n={},l=(0,a(6262).A)(n,[["render",function(s,e){return(0,i.uX)(),(0,i.CE)("div",null,e[0]||(e[0]=[(0,i.Fv)('<h1 id="redis-分片技术" tabindex="-1"><a class="header-anchor" href="#redis-分片技术"><span>redis 分片技术</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>最多1000节点</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>集群节点间使用异步复制</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keys-hash-tags-用来将多个-相关的-key分配到相同的hash-slot中-redis-cluster中实现multi-key操作的基础" tabindex="-1"><a class="header-anchor" href="#keys-hash-tags-用来将多个-相关的-key分配到相同的hash-slot中-redis-cluster中实现multi-key操作的基础"><span>Keys hash tags， 用来将多个(相关的)key分配到相同的hash slot中，Redis Cluster中实现multi-key操作的基础</span></a></h3><h3 id="每个节点维护着集群内其他节点的以下信息" tabindex="-1"><a class="header-anchor" href="#每个节点维护着集群内其他节点的以下信息"><span>每个节点维护着集群内其他节点的以下信息</span></a></h3><blockquote><p>redis-cli cluster nodes</p></blockquote><blockquote><p>node id, address:port, flags, last ping sent, last pong received, configuration epoch, link state, slots</p></blockquote><h3 id="cluster总线" tabindex="-1"><a class="header-anchor" href="#cluster总线"><span>Cluster总线</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>每个Redis Cluster节点有一个额外的TCP端口用来接受其他节点的连接</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>该端口往往是client连接的tcp端口+10000（端口6379监听客户端连接，那么它的集群总线端口16379也会被打开）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>N个节点的集群中，每个节点由N-1个TCP传出连接，和N-1个TCP传入连接</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>节点使用gossip协议和配置更新机制来避免在正常情况下节点之间交换过多的消息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="moved-重定向" tabindex="-1"><a class="header-anchor" href="#moved-重定向"><span>Moved 重定向</span></a></h3><ol><li>槽命中：直接返回结果</li><li>槽不命中：键不在节点中，向客户端发送一个Moved重定向，客户端再一次发送命令官方给目标节点</li></ol><blockquote><p>cluster keyslot keyName # 得到keyName的槽</p></blockquote><h3 id="ask-重定向" tabindex="-1"><a class="header-anchor" href="#ask-重定向"><span>ASK 重定向</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>集群伸缩会导致槽迁移</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>去源节点访问时，此时数据已经可能已经迁移到了目标节点</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>回复Ask重定向</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>客户端重新发送请求到目标节点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩容-缩容" tabindex="-1"><a class="header-anchor" href="#扩容-缩容"><span>扩容 &amp;&amp; 缩容</span></a></h3><ol><li>确定哪些槽需要被迁移到目标节点</li><li>然后获取槽中key</li><li>将槽中的key全部迁移到目标节点</li><li>向集群所有主节点广播槽（数据）全部迁移到了目标节点</li></ol><h3 id="为什么redis-cluster中不建议使用发布订阅呢" tabindex="-1"><a class="header-anchor" href="#为什么redis-cluster中不建议使用发布订阅呢"><span>为什么Redis Cluster中不建议使用发布订阅呢</span></a></h3><blockquote><p>publish命令都会向所有节点（包括从节点）进行广播，加重了带宽负担</p></blockquote><h3 id="为什么redis-cluster的hash-slot-是16384-16k" tabindex="-1"><a class="header-anchor" href="#为什么redis-cluster的hash-slot-是16384-16k"><span>为什么Redis Cluster的Hash Slot 是16384=16k</span></a></h3><blockquote><p>bitmap压缩后是2k（2 * 8 (8 bit) * 1024(1k) = 16K），也就是说使用2k的空间创建了16k的槽数</p></blockquote><h1 id="full-stack-knowledge-system" tabindex="-1"><a class="header-anchor" href="#full-stack-knowledge-system"><span>Full_stack_knowledge_system</span></a></h1><p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',21)]))}]]),t=JSON.parse('{"path":"/posts/redis/%E5%88%86%E7%89%87%E6%8A%80%E6%9C%AF.html","title":"redis 分片技术","lang":"zh-CN","frontmatter":{"hide":true,"description":"redis 分片技术 Keys hash tags， 用来将多个(相关的)key分配到相同的hash slot中，Redis Cluster中实现multi-key操作的基础 每个节点维护着集群内其他节点的以下信息 redis-cli cluster nodes node id, address:port, flags, last ping sent,...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/redis/%E5%88%86%E7%89%87%E6%8A%80%E6%9C%AF.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"redis 分片技术"}],["meta",{"property":"og:description","content":"redis 分片技术 Keys hash tags， 用来将多个(相关的)key分配到相同的hash slot中，Redis Cluster中实现multi-key操作的基础 每个节点维护着集群内其他节点的以下信息 redis-cli cluster nodes node id, address:port, flags, last ping sent,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"redis 分片技术\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"Keys hash tags， 用来将多个(相关的)key分配到相同的hash slot中，Redis Cluster中实现multi-key操作的基础","slug":"keys-hash-tags-用来将多个-相关的-key分配到相同的hash-slot中-redis-cluster中实现multi-key操作的基础","link":"#keys-hash-tags-用来将多个-相关的-key分配到相同的hash-slot中-redis-cluster中实现multi-key操作的基础","children":[]},{"level":3,"title":"每个节点维护着集群内其他节点的以下信息","slug":"每个节点维护着集群内其他节点的以下信息","link":"#每个节点维护着集群内其他节点的以下信息","children":[]},{"level":3,"title":"Cluster总线","slug":"cluster总线","link":"#cluster总线","children":[]},{"level":3,"title":"Moved 重定向","slug":"moved-重定向","link":"#moved-重定向","children":[]},{"level":3,"title":"ASK 重定向","slug":"ask-重定向","link":"#ask-重定向","children":[]},{"level":3,"title":"扩容 && 缩容","slug":"扩容-缩容","link":"#扩容-缩容","children":[]},{"level":3,"title":"为什么Redis Cluster中不建议使用发布订阅呢","slug":"为什么redis-cluster中不建议使用发布订阅呢","link":"#为什么redis-cluster中不建议使用发布订阅呢","children":[]},{"level":3,"title":"为什么Redis Cluster的Hash Slot 是16384=16k","slug":"为什么redis-cluster的hash-slot-是16384-16k","link":"#为什么redis-cluster的hash-slot-是16384-16k","children":[]}],"readingTime":{"minutes":1.68,"words":504},"filePathRelative":"posts/redis/分片技术.md","excerpt":"\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>最多1000节点</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>集群节点间使用异步复制</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);