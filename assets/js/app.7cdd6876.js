"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3524],{1709:(s,i,n)=>{n.d(i,{l:()=>a});const a={category:{"/":{path:"/category/",map:{分布式:{path:"/category/%E5%88%86%E5%B8%83%E5%BC%8F/",indexes:[0,1,2,3]},领域驱动设计:{path:"/category/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/",indexes:[4]},docker:{path:"/category/docker/",indexes:[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]},kubernetes:{path:"/category/kubernetes/",indexes:[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]},etcd:{path:"/category/etcd/",indexes:[46,47,48]},git:{path:"/category/git/",indexes:[49]},java:{path:"/category/java/",indexes:[50,51,52]},kafka:{path:"/category/kafka/",indexes:[53]},go:{path:"/category/go/",indexes:[54,55,56,57,58,59,60,61,62,63,64,65,66]},golang:{path:"/category/golang/",indexes:[67,68,69,70,71,72,73,74,75,76,77,78,79,80]},linux:{path:"/category/linux/",indexes:[81,82,83,84,85,86,87]},network:{path:"/category/network/",indexes:[88,89,90,91,92,93,94,95,96,97,98,99]},Nginx:{path:"/category/nginx/",indexes:[100,101,102]},prometheus:{path:"/category/prometheus/",indexes:[103,104,105,106,107,108,109]}}}},tag:{"/":{path:"/tag/",map:{CAP:{path:"/tag/cap/",indexes:[0]},CDN:{path:"/tag/cdn/",indexes:[1]},分布式事务:{path:"/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",indexes:[2]},架构设计:{path:"/tag/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/",indexes:[3]},领域驱动模型设计:{path:"/tag/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/",indexes:[4]},docker:{path:"/tag/docker/",indexes:[5,6,7,9,10,11,12,13,14,16,17,18,19,20]},chartmuseum:{path:"/tag/chartmuseum/",indexes:[22]},loki:{path:"/tag/loki/",indexes:[8,28,33]},registry:{path:"/tag/registry/",indexes:[23]},etcd:{path:"/tag/etcd/",indexes:[46,47,48]},git:{path:"/tag/git/",indexes:[49]},java:{path:"/tag/java/",indexes:[50,51,52]},kafka:{path:"/tag/kafka/",indexes:[53]},go:{path:"/tag/go/",indexes:[56,57,58,59,61,62,63,64,65,66]},GO原理:{path:"/tag/go%E5%8E%9F%E7%90%86/",indexes:[54,60]},golang:{path:"/tag/golang/",indexes:[68,69,70,71,72,73,74,75,76,77,78,79,80,110]},"golangci-lint":{path:"/tag/golangci-lint/",indexes:[72]},fmt:{path:"/tag/fmt/",indexes:[72]},gin:{path:"/tag/gin/",indexes:[67]},mongodb:{path:"/tag/mongodb/",indexes:[73,105,106]},cicd:{path:"/tag/cicd/",indexes:[15,110]},dockerfile:{path:"/tag/dockerfile/",indexes:[15]},kubernetes:{path:"/tag/kubernetes/",indexes:[21,24,25,26,27,29,30,32,34,35,36,37,38,39,41,42,43,44]},kubectl:{path:"/tag/kubectl/",indexes:[31]},helm:{path:"/tag/helm/",indexes:[40]},telepresence:{path:"/tag/telepresence/",indexes:[45]},Linux:{path:"/tag/linux/",indexes:[82,83,84,85,86,87]},linux:{path:"/tag/linux/",indexes:[81,108]},network:{path:"/tag/network/",indexes:[88,89,90,91,92,93,94,95,96,97,98,99]},Nginx:{path:"/tag/nginx/",indexes:[100,101,102]},prometheus:{path:"/tag/prometheus/",indexes:[103,104,105,106,107,108,109]},alertmanager:{path:"/tag/alertmanager/",indexes:[104]},api:{path:"/tag/api/",indexes:[107]}}}}}},4776:(s,i,n)=>{n.d(i,{M:()=>a});const a=["/posts/architecture/CAP.html","/posts/architecture/CDN%E6%8A%80%E6%9C%AF.html","/posts/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A6%82%E5%BF%B5.html","/posts/architecture/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%8F%90%E9%AB%98%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%83%BD%E5%8A%9B.html","/posts/architecture/%E8%A7%A3%E6%9E%84%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1.html","/posts/docker/buildx.html","/posts/docker/dind.html","/posts/docker/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.html","/posts/docker/loki%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97.html","/posts/docker/%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C%E7%BB%99%E5%AE%B9%E5%99%A8.html","/posts/docker/%E5%88%B6%E4%BD%9C%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F.html","/posts/docker/%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E9%9A%94%E7%A6%BB.html","/posts/docker/%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8.html","/posts/docker/%E9%9B%86%E6%88%90gvisor.html","/posts/docker/%E9%9B%86%E6%88%90kata.html","/posts/kubernetes/CI%E5%88%B6%E4%BD%9C%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F.html","/posts/kubernetes/Kubernetes%E7%BB%84%E4%BB%B6.html","/posts/kubernetes/%E4%BB%80%E4%B9%88%E6%98%AFCNI.html","/posts/kubernetes/%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4.html","/posts/network/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BD%91%E6%A1%A5.html","/posts/network/%E7%BD%91%E7%BB%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html","/posts/kubernetes/kubernetes%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html","/posts/docker/chartmuseum.html","/posts/docker/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA.html","/posts/kubernetes/containerd%E5%AE%89%E8%A3%85.html","/posts/kubernetes/CRD%E6%8E%A7%E5%88%B6%E5%99%A8.html","/posts/kubernetes/flanne%E6%8E%A5%E5%85%A5k8s.html","/posts/kubernetes/iperf%E7%94%A8%E6%B3%95.html","/posts/kubernetes/k8s%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html","/posts/kubernetes/kata_firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","/posts/kubernetes/kube-proxy%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html","/posts/kubernetes/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","/posts/kubernetes/linux%E4%B8%8A%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.html","/posts/kubernetes/Loki%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85.html","/posts/kubernetes/MySQL%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html","/posts/kubernetes/Nginx-Ingress%E5%AE%89%E8%A3%85.html","/posts/kubernetes/S3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.html","/posts/kubernetes/traefik%E9%85%8D%E7%BD%AEingress%E6%9C%8D%E5%8A%A1.html","/posts/kubernetes/%E5%88%9B%E5%BB%BAservice%E6%8C%87%E5%90%91%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1.html","/posts/kubernetes/%E5%88%9D%E8%AF%86CRD.html","/posts/kubernetes/%E5%88%B6%E4%BD%9Chelm%E5%8C%85%E5%92%8C%E8%87%AA%E5%BB%BAChart%E4%BB%93%E5%BA%93.html","/posts/kubernetes/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85kubernetes.html","/posts/kubernetes/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0node%E8%8A%82%E7%82%B9.html","/posts/kubernetes/%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8.html","/posts/kubernetes/%E7%94%A8CNI%E7%BB%99docker%E5%AE%B9%E5%99%A8%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C.html","/posts/kubernetes/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7telepresence.html","/posts/etcd/Docker%E5%AE%89%E8%A3%85Etcd.html","/posts/etcd/Etcd%E5%BC%80%E5%90%AFSSL%E8%AE%A4%E8%AF%81.html","/posts/etcd/Raft%E7%AE%97%E6%B3%95.html","/posts/git/%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE.html","/posts/java/docker%E5%AE%89%E8%A3%85maven%E4%BB%93%E5%BA%93.html","/posts/java/Java%E7%89%88%E6%9C%AC.html","/posts/java/%E5%88%B6%E4%BD%9Cmaven%E5%8C%85.html","/posts/kafka/kafka%E5%9F%BA%E7%A1%80.html","/posts/go/GC.html","/posts/go/Channel%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html","/posts/go/defer.html","/posts/go/GoModules.html","/posts/go/GPM.html","/posts/go/jaegertracing.html","/posts/go/Mutex.html","/posts/go/UnitTest%E8%A7%84%E8%8C%83.html","/posts/go/%E4%B8%AA%E4%BA%BA%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.html","/posts/go/%E4%BB%A3%E7%A0%81%E5%88%86%E5%B1%82%E5%AE%9E%E8%B7%B5.html","/posts/go/%E4%BF%A1%E5%8F%B7%E7%9B%91%E5%90%AC.html","/posts/go/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91.html","/posts/go/%E8%AF%BB%E5%86%99%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/middleware%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/%E8%85%BE%E8%AE%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html","/posts/go/goland%E5%BF%AB%E6%8D%B7%E9%94%AE.html","/posts/go/golang%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%92%8C%E5%80%BC%E4%BC%A0%E9%80%92.html","/posts/go/golang%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.html","/posts/go/golang%E9%9D%99%E6%80%81%E6%89%AB%E6%8F%8F%E5%92%8C%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5.html","/posts/go/mongodb%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F.html","/posts/go/golang%E5%AF%BC%E5%87%BAdocker%E9%95%9C%E5%83%8F.html","/posts/go/module%E5%86%B2%E7%AA%81.html","/posts/go/%E4%BC%98%E9%9B%85%E6%8B%BC%E6%8E%A5URL.html","/posts/go/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","/posts/go/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","/posts/go/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0pkg.html","/posts/go/%E9%85%8D%E7%BD%AEgo%E7%A7%81%E6%9C%89%E5%BA%93.html","/posts/linux/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9.html","/posts/linux/cpu%E6%9E%B6%E6%9E%84.html","/posts/linux/float%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6.html","/posts/linux/%E4%BA%8C%E8%BF%9B%E5%88%B6.html","/posts/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","/posts/linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html","/posts/linux/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA.html","/posts/network/DNS%E9%85%8D%E7%BD%AE.html","/posts/network/ipip%E9%9A%A7%E9%81%93%E9%80%9A%E8%AE%AF.html","/posts/network/NAT%E9%85%8D%E7%BD%AE%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE.html","/posts/network/tcp%E7%B2%98%E5%8C%85.html","/posts/network/tcp%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%8A%93%E5%8C%85.html","/posts/network/veth-pair%E5%92%8Chost%E7%BD%91%E6%A1%A5%E9%80%9A%E4%BF%A1.html","/posts/network/veth-pair%E5%92%8Covs-bridge%E9%80%9A%E8%AE%AF.html","/posts/network/VPN%E9%80%9A%E8%AE%AF.html","/posts/network/write_broken_pipe.html","/posts/network/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GRE%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1.html","/posts/network/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BAvxlan%E7%BD%91%E7%BB%9C.html","/posts/network/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80.html","/posts/nginx/%E4%BC%9A%E8%AF%9D%E7%B2%98%E6%80%A7.html","/posts/nginx/%E5%9F%9F%E5%90%8D%E6%8C%87%E5%90%91%E9%85%8D%E7%BD%AE.html","/posts/nginx/%E5%BC%80%E5%90%AFSSL%E9%AA%8C%E8%AF%81.html","/posts/prometheus/%E8%81%94%E9%82%A6%E6%9C%BA%E5%88%B6.html","/posts/prometheus/alertmanager.html","/posts/prometheus/mongodb%E6%8C%87%E6%A0%87.html","/posts/prometheus/mybatis%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87.html","/posts/prometheus/node_exporter%E6%8C%87%E6%A0%87.html","/posts/prometheus/prometheus.html","/posts/prometheus/prometheus%E9%AB%98%E5%8F%AF%E7%94%A8.html","/posts/kubernetes/%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91kata.html","/intro.html","/posts/","/posts/cicd/","/posts/consul/","/posts/elastic/10%E9%81%93%E4%B8%8D%E5%BE%97%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98.html","/posts/elastic/Elastic%E9%9B%86%E7%BE%A4.html","/posts/elastic/","/posts/etcd/etcd%E5%9F%BA%E7%A1%80.html","/posts/git/Gitlab%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html","/posts/git/Runner%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E5%88%B0CI.html","/posts/git/runner%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C.html","/posts/go/context.html","/posts/go/defer%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/for%E5%92%8Crange%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83.html","/posts/go/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html","/posts/go/GRPC.html","/posts/go/map.html","/posts/go/reflect%E7%9A%84%E6%80%A7%E8%83%BD.html","/posts/go/runtime%E5%8C%85.html","/posts/go/Security%E8%A7%84%E8%8C%83.html","/posts/go/slice.html","/posts/go/Socket%E6%98%AF%E4%BB%80%E4%B9%88.html","/posts/go/string.html","/posts/go/struct%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/posts/go/sync.Map%E8%AE%BE%E8%AE%A1.html","/posts/go/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html","/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFopenTracing.html","/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFstream.html","/posts/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html","/posts/go/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C.html","/posts/go/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8errors.html","/posts/go/%E5%A6%82%E4%BD%95%E5%88%A4%E5%AE%9A%E9%9B%B6%E5%80%BC.html","/posts/go/%E5%A6%82%E4%BD%95%E6%B1%A0%E5%8C%96%E8%BF%9E%E6%8E%A5.html","/posts/go/%E5%A6%82%E4%BD%95%E9%80%80%E5%87%BA%E5%8D%8F%E7%A8%8B.html","/posts/go/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD.html","/posts/go/%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6.html","/posts/mongodb/Mongo%E9%9B%86%E7%BE%A4.html","/posts/linux/linux%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E5%AF%86%E9%92%A5.html","/posts/linux/Linux%E7%BB%93%E6%9E%84%E7%BB%84%E6%88%90.html","/posts/linux/lsof%E5%91%BD%E4%BB%A4.html","/posts/linux/rpm.html","/posts/linux/uname.html","/posts/linux/%E5%8F%91%E8%A1%8C%E7%89%88%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html","/posts/linux/%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB.html","/posts/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html","/posts/linux/%E9%9B%B6%E6%8B%B7%E8%B4%9D.html","/posts/mysql/MVCC%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html","/posts/mysql/MySQL%E5%88%86%E5%B1%82.html","/posts/mysql/MySQL%E8%A7%84%E8%8C%83.html","/posts/mysql/MySQL%E9%9B%86%E7%BE%A4.html","/posts/mysql/SQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3.html","/posts/mysql/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","/posts/struct/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/posts/struct/%E6%A0%91.html","/posts/redis/bitmap%E4%BD%8D%E5%9B%BE.html","/posts/redis/Blogs.html","/posts/redis/cluster.html","/posts/redis/Hash.html","/posts/redis/Key.html","/posts/redis/List.html","/posts/redis/plan.html","/posts/redis/","/posts/redis/Redis%E4%B8%BB%E4%BB%8E%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","/posts/redis/Redis%E4%BA%8B%E5%8A%A1.html","/posts/redis/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.html","/posts/redis/Redis%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8.html","/posts/redis/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D.html","/posts/redis/Redis%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.html","/posts/redis/Redis%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E5%92%8C%E7%A9%BF%E9%80%8F.html","/posts/redis/Redis%E9%99%90%E9%A2%91.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8FDocker%E6%90%AD%E5%BB%BA.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E7%89%87Cluster%E6%A8%A1%E5%BC%8F.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html","/posts/redis/Set.html","/posts/redis/String.html","/posts/redis/%E5%88%86%E7%89%87RedisCluster%E5%8E%9F%E7%90%86.html","/posts/redis/%E5%88%86%E7%89%87RedisCluster%E6%90%AD%E5%BB%BA.html","/posts/redis/%E5%88%86%E7%89%87%E6%8A%80%E6%9C%AF.html","/posts/redis/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html","/posts/redis/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html","/posts/redis/%E6%8C%81%E4%B9%85%E5%8C%96AOF%E6%97%A5%E5%BF%97.html","/posts/redis/%E6%8C%81%E4%B9%85%E5%8C%96RDB%E5%BF%AB%E7%85%A7.html","/posts/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","/posts/redis/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0.html","/posts/redis/%E9%AB%98%E5%8F%AF%E7%94%A8-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E8%A7%A3.html"]},3781:(s,i,n)=>{n.d(i,{U:()=>a});const a={article:{"/":{path:"/article/",indexes:[21,103,81,67,68,0,1,2,3,4,54,69,70,71,72,73,111,112,113,114,115,116,117,5,22,6,7,8,9,10,11,12,23,13,14,46,118,47,48,119,120,121,49,50,51,52,53,55,122,56,123,124,125,74,57,58,126,59,127,75,60,128,129,130,131,132,133,134,135,61,62,136,137,138,63,76,64,139,77,140,78,141,142,79,143,144,145,146,65,66,80,15,24,25,26,27,28,29,30,31,16,32,33,34,35,36,37,17,38,39,40,110,41,42,43,44,18,45,147,82,83,148,149,150,151,152,84,153,154,85,155,86,87,156,157,158,159,160,161,162,88,89,90,91,92,93,94,95,96,19,97,98,20,99,100,101,102,163,164,104,105,106,107,108,109,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198]}},star:{"/":{path:"/star/",indexes:[]}},timeline:{"/":{path:"/timeline/",indexes:[21,81,67,68,0,1,2,3,4,54,103,69,70,71,72,73]}}}},7877:(s,i,n)=>{n.d(i,{B:()=>L});var a={};n.r(a);var e={};n.r(e);var l={};n.r(l),n.d(l,{default:()=>A});var t={};n.r(t);var h={};n.r(h),n.d(h,{default:()=>f});var p={};n.r(p),n.d(p,{default:()=>w});var k={};n.r(k),n.d(k,{default:()=>T});var r=n(2402),d=n(3073),c=n(9403),o=n(596),g=n(8831);const A={enhance:({app:s})=>{(0,r.L4)("FontIcon")||s.component("FontIcon",c.A),(0,r.L4)("Badge")||s.component("Badge",o.A),(0,r.L4)("VPCard")||s.component("VPCard",g.A)},setup:()=>{(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]};var y=n(6358),m=n(3827),b=n(355),u=n(1599),E=n(8913),v=n(457),F=n(3349),B=n(1781),C=n(9212);const f={enhance:({app:s})=>{s.component("CodeTabs",B.S),s.component("Tabs",C.t)}};var D=n(8031),x=n(3027);const w={enhance:({app:s})=>{s.component("CodeDemo",D.A),s.component("MdDemo",x.A)}};var S=n(5753),R=n(5054),I=n(783),P=n(8465),q=n(641),_=n(7107),N=n(9920);(0,P.M_)((s=>{const i=s.t,n=!1!==s.I,a=s.i;return n?{title:i,content:a?()=>[(0,q.h)(I.GB,{icon:a}),i]:null,order:s.O,index:s.I}:null}));const T={enhance:({app:s,router:i})=>{const{scrollBehavior:n}=i.options;i.options.scrollBehavior=async(...s)=>(await I.lE.wait(),n(...s)),(0,I.fk)(s),s.component("HopeIcon",I.GB),s.component("BloggerInfo",_.tI),s.component("SocialMedias",_.rS),s.component("GlobalEncrypt",N.J),s.component("LocalEncrypt",N.n)},setup:()=>{(0,I.PV)(),(0,I.i$)(),(0,_.su)()},layouts:{Layout:I.PE,NotFound:I.Mk,BlogCategory:_.Pn,BlogHome:_.qX,BlogType:_.z7,Timeline:_.Kf}},L=[a,e,l,y,m,b,u,E,v,F,t,h,p,S,R,k].map((s=>s.default)).filter(Boolean)},8164:(s,i,n)=>{n.d(i,{J:()=>e,c:()=>a});const a=JSON.parse('{"/posts/kubernetes/kata&firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html":"/posts/kubernetes/kata_firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"}'),e=Object.fromEntries([["/intro.html",{loader:()=>n.e(3912).then(n.bind(n,558)),meta:{v:"/assets/images/cover3.jpg",e:"\n<h3>Welcome to my little world 👋</h3>\n<ul>\n<li>🔭 I’m currently working Guangzhou</li>\n<li>🌱 My favorite Golang\\Java\\PHP\\k8s\\Vue</li>\n<li>👯 Keep getting handsome</li>\n<li>💬 I love programming</li>\n<li>📫 My Email: 435861851@qq.com</li>\n</ul>\n",r:{minutes:.11,words:34},t:"介绍页",i:"circle-info",y:"a"}}],["/",{loader:()=>n.e(4470).then(n.bind(n,9908)),meta:{t:"主页",i:"home"}}],["/posts/",{loader:()=>n.e(8666).then(n.bind(n,6236)),meta:{e:"\x3c!-- <Catalog /> --\x3e\n",r:{minutes:.04,words:13},t:"程序人生",i:"laptop-code",y:"a"}}],["/posts/architecture/CAP.html",{loader:()=>n.e(2288).then(n.bind(n,8698)),meta:{d:1680936012e3,l:"2023年4月8日",c:["分布式"],g:["CAP"],e:'<h3>分布式和微服务什么意思</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>单机系统就是程序部署到一台机器，所有的服务由这一台机器提供</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>分布式系统相对而言，是一组为了完成共同任务而协调工作的计算机节点组成,它们通过网络进行通讯的系统；</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>分布式系统是多个机器共同提供服务</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.12,words:1235},t:"CAP理论",y:"a"}}],["/posts/architecture/CDN%E6%8A%80%E6%9C%AF.html",{loader:()=>n.e(6850).then(n.bind(n,2221)),meta:{d:1680936012e3,l:"2023年4月8日",c:["分布式"],g:["CDN"],e:'<h3>CDN</h3>\n<ol>\n<li>CDN是什么</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>内容分发网络（Content Delivery Network，简称CDN）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>克服单机系统输出带宽及并发能力不足的缺点</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>全局负载均衡技术将用户的访问指向离用户最近的服务器</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.38,words:413},t:"CDN",y:"a"}}],["/posts/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A6%82%E5%BF%B5.html",{loader:()=>n.e(701).then(n.bind(n,4856)),meta:{d:1680936012e3,l:"2023年4月8日",c:["分布式"],g:["分布式事务"],e:'<p><a href="http://icyfenix.cn/architect-perspective/general-architecture/transaction/distributed.html" target="_blank" rel="noopener noreferrer">分布式事务</a></p>\n<h3>CAP</h3>\n<blockquote>\n<p>三个特性最多只能同时满足其中两个</p>\n</blockquote>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>一致性（Consistency）</span></span>\n<span class="line"><span>可用性（Availability）</span></span>\n<span class="line"><span>分区容忍性（Partition Tolerance）</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.6,words:480},t:"分布式事务 Distributed Transaction",y:"a"}}],["/posts/architecture/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%8F%90%E9%AB%98%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%83%BD%E5%8A%9B.html",{loader:()=>n.e(1958).then(n.bind(n,2933)),meta:{d:1680936012e3,l:"2023年4月8日",c:["分布式"],g:["架构设计"],e:'<h3>架构设计</h3>\n<p><a href="https://www.zhihu.com/question/395652253/answer/2458366961" target="_blank" rel="noopener noreferrer">怎么提高自己的系统设计和架构理论水平？</a></p>\n<ol>\n<li>无锁化</li>\n<li>缓存</li>\n<li>分片</li>\n</ol>\n',r:{minutes:.2,words:59},t:"架构设计",y:"a"}}],["/posts/architecture/%E8%A7%A3%E6%9E%84%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1.html",{loader:()=>n.e(6930).then(n.bind(n,4900)),meta:{d:1680936012e3,l:"2023年4月8日",c:["领域驱动设计"],g:["领域驱动模型设计"],e:'<h3>专业术语</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Domain-Driven Design 领域驱动设计</span></span>\n<span class="line"><span>DataAccessobjects DAO 数据存取对象</span></span>\n<span class="line"><span>PersistenceObject PO 持久化层对象</span></span>\n<span class="line"><span>DataTransferObject DTO 数据传输对象</span></span>\n<span class="line"><span>ViewObject VO 视图对象</span></span>\n<span class="line"><span>DomainObject DO 领域对象</span></span>\n<span class="line"><span>view 展现层     </span></span>\n<span class="line"><span>service 服务层  </span></span>\n<span class="line"><span>po 数据持久化层</span></span>\n<span class="line"><span>防腐 领域之间互相访问获取到的其他域的模型需要转换映射到自己域的模型（域之间可能会有相互的依赖，需要注意域之间的防腐，并且依赖注入的方式注入而不是直接New其他域的对象出来使用）</span></span>\n<span class="line"><span>界限 域拆分依据业务水平拆分，平行而非上下</span></span>\n<span class="line"><span>领域驱动三层架构 API层\\Domain层\\Repository层</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.17,words:951},t:"领域驱动模型设计简单应用",y:"a"}}],["/posts/cicd/",{loader:()=>n.e(2132).then(n.bind(n,7273)),meta:{e:"\n<ol>\n<li>配置git环境支持GO私服moudle同步</li>\n<li>配置helm环境</li>\n<li>支持buildx多架构编译和共享主机网络</li>\n<li>支持docker私服registry验证和免SSL验证</li>\n</ol>\n",r:{minutes:.18,words:53},t:"CICD示例",y:"a"}}],["/posts/consul/",{loader:()=>n.e(9875).then(n.bind(n,2358)),meta:{e:'\n<h3>模块</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>服务发现</span></span>\n<span class="line"><span>检查健康</span></span>\n<span class="line"><span>键值对存储</span></span>\n<span class="line"><span>多数据中心</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.16,words:49},t:"consul",y:"a"}}],["/posts/elastic/10%E9%81%93%E4%B8%8D%E5%BE%97%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98.html",{loader:()=>n.e(1036).then(n.bind(n,1954)),meta:{e:'<p><a href="https://cloud.tencent.com/developer/article/1964271" target="_blank" rel="noopener noreferrer">10道不得不会的ElasticSearch面试题</a></p>\n<ol>\n<li>说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>设计调优</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>写入调优</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>查询调优</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.83,words:248},t:"",y:"a"}}],["/posts/elastic/Elastic%E9%9B%86%E7%BE%A4.html",{loader:()=>n.e(831).then(n.bind(n,1586)),meta:{e:'\n<ol>\n<li>\n<p>多节点 多分片 <a href="https://blog.csdn.net/qq_41167306/article/details/122967059" target="_blank" rel="noopener noreferrer">集群模式</a></p>\n</li>\n<li>\n<p>官方推荐的使用docker-compose搭建Elastic集群<a href="https://registry.hub.docker.com/r/bitnami/elasticsearch" target="_blank" rel="noopener noreferrer">bitnami/elasticsearch</a></p>\n</li>\n</ol>',r:{minutes:.13,words:39},t:"Elastic高可用方案",y:"a"}}],["/posts/elastic/",{loader:()=>n.e(1018).then(n.bind(n,2557)),meta:{e:"\n<ol>\n<li>基本使用相关</li>\n<li>高性能高可用</li>\n<li>底层原理</li>\n<li>调优</li>\n</ol>\n",r:{minutes:.08,words:25},t:"elastic",y:"a"}}],["/posts/docker/buildx.html",{loader:()=>n.e(5303).then(n.bind(n,2288)),meta:{c:["docker"],g:["docker"],e:'<h3>1.官网</h3>\n<ul>\n<li><a href="https://github.com/docker/buildx" target="_blank" rel="noopener noreferrer">https://github.com/docker/buildx</a></li>\n<li><a href="https://github.com/moby/buildkit" target="_blank" rel="noopener noreferrer">https://github.com/moby/buildkit</a></li>\n</ul>\n<blockquote>\n<p>buildx 命令属于实验特性，因此首先需要开启该特性，比如 <code>~/.docker/config.json</code> 的 experimental 设置为 true</p>\n</blockquote>',r:{minutes:1.49,words:447},t:"buildx",y:"a"}}],["/posts/docker/chartmuseum.html",{loader:()=>n.e(2767).then(n.bind(n,1888)),meta:{c:["kubernetes"],g:["chartmuseum"],e:'<h3>1.docker启动单机的chart仓库服务</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --name=chartmuseum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --restart=always</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 8080:8080</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/charts:/charts</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> STORAGE=local</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> STORAGE_LOCAL_ROOTDIR=/charts</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  chartmuseum/chartmuseum:v0.12.0</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.99,words:297},t:"chartmuseum",y:"a"}}],["/posts/docker/dind.html",{loader:()=>n.e(1910).then(n.bind(n,4017)),meta:{c:["docker"],g:["docker"],e:'<h3>什么是dind</h3>\n<blockquote>\n<p>kubernetes的编译需要用到dind，就是docker内部启动一个容器用于编译镜像，在gitlab的CI的时候可以使用</p>\n</blockquote>\n<ol>\n<li>官网</li>\n</ol>\n<ul>\n<li><a href="https://github.com/jpetazzo/dind" target="_blank" rel="noopener noreferrer">https://github.com/jpetazzo/dind</a></li>\n<li><a href="https://hub.docker.com/_/docker/tags?page=1&amp;name=dind" target="_blank" rel="noopener noreferrer">DockerHub上面dind的文档</a></li>\n<li><a href="https://docker-practice.github.io/zh-cn/image/dockerfile/entrypoint.html" target="_blank" rel="noopener noreferrer">ENTRYPOINT入口点</a></li>\n</ul>',r:{minutes:1.22,words:365},t:"dind",y:"a"}}],["/posts/docker/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(8355).then(n.bind(n,8470)),meta:{c:["docker"],g:["docker"],e:'<h3>方式一：导出rpm包或者deb包进行离线安装 - 推荐</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># rpm包导出</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> reinstall</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --downloadonly</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --downloaddir=./</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 安装rpm包</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -ivh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ./</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">*</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">.rpm</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -ivh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> package_name.rpm</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># deb包导出</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dpkg-repack</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dpkg-repack</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF"> ${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">package-name</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.95,words:284},t:"docker离线安装",y:"a"}}],["/posts/docker/loki%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(9151).then(n.bind(n,2178)),meta:{c:["docker"],g:["loki"],e:'<blockquote>\n<p>使用docker compose搭建loki和promtail服务，支持自定义采集目标，并且通过 loki http API查看日志数据</p>\n</blockquote>\n<h3>一、使用compose搭建loki服务</h3>\n<ol>\n<li>创建文件夹</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> loki-compose</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> loki-compose</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> local-config.yaml</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> promtail-config.yaml</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker-compose.yml</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.31,words:393},t:"loki采集日志",y:"a"}}],["/posts/docker/%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C%E7%BB%99%E5%AE%B9%E5%99%A8.html",{loader:()=>n.e(8297).then(n.bind(n,5861)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>创建无网络的docker容器然后手动分配网络</p>\n</blockquote>\n<h3>一、环境准备</h3>\n<ul>\n<li><a href="https://weiqiangxu.github.io/posts/docker/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.html" target="_blank" rel="noopener noreferrer">docker离线安装</a></li>\n</ul>\n<h3>二、运行</h3>\n<ol>\n<li>容器创建</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --net=none</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> busybox-test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> busybox</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> busybox-test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> a</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.8,words:841},t:"分配网络给容器",y:"a"}}],["/posts/docker/%E5%88%B6%E4%BD%9C%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F.html",{loader:()=>n.e(3132).then(n.bind(n,5750)),meta:{c:["docker"],g:["docker"],e:'<h3>方式一、使用buildx</h3>\n<ol>\n<li>多架构Go程序目录</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 文件目录</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># bin目录是go程序编译结果 go build GOOS=linx GOARCH=amd64 \\ GOARCH=arm64</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Dockerfile</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> README.md</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bin</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> amd64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> │&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tool</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> arm64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">     └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tool</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> golang</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go.mod</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> main.go</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sh</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> start.sh</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.52,words:457},t:"制作多架构镜像",y:"a"}}],["/posts/docker/%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E9%9A%94%E7%A6%BB.html",{loader:()=>n.e(203).then(n.bind(n,6964)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>创建docker容器然后分配两张不同网段的网卡，验证网络隔离环境</p>\n</blockquote>\n<h3>一、环境准备</h3>\n<ul>\n<li><a href="https://weiqiangxu.github.io/posts/docker/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.html" target="_blank" rel="noopener noreferrer">docker离线安装</a></li>\n</ul>\n<h3>二、创建1个容器分配2张网卡</h3>\n<ol>\n<li>容器创建</li>\n</ol>',r:{minutes:2.16,words:647},t:"双网卡实现网络隔离",y:"a"}}],["/posts/docker/%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8.html",{loader:()=>n.e(8314).then(n.bind(n,3357)),meta:{c:["docker"],g:["docker"],e:'<h3>如何存储多架构镜像到私有库</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 多架构镜像</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># quay.io/coreos/etcd:v3.5.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --platform=linux/amd64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> quay.io/coreos/etcd:v3.5.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> quay.io/coreos/etcd:v3.5.0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   registry.my.net/bingokube/etcd:v3.5.0-amd64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --platform=linux/arm64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> quay.io/coreos/etcd:v3.5.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> quay.io/coreos/etcd:v3.5.0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   registry.my.net/bingokube/etcd:v3.5.0-arm64</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0-amd64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0-arm64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 此时无法拉取镜像下面的无法执行</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 制作清单</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> manifest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --insecure</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   registry.my.net/bingokube/etcd:v3.5.0-amd64</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   registry.my.net/bingokube/etcd:v3.5.0-arm64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 推送清单</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> manifest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --insecure</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看清单</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> manifest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   "schemaVersion"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 2,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   "mediaType"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "application/vnd.xxx.list.v2+json",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   "manifests"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "mediaType"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "application/vnd.xxx.v2+json",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "size"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 1783,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "digest"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "sha256:abc",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "platform"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            "architecture"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "amd64",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            "os"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "linux"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">         }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "mediaType"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "application/vnd.xxx.v2+json",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "size"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 1576,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "digest"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "sha256:abc",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "platform"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            "architecture"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "arm64",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            "os"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "linux"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">         }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">   ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.52,words:155},t:"多架构镜像存储",y:"a"}}],["/posts/docker/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(631).then(n.bind(n,2838)),meta:{c:["kubernetes"],g:["registry"],e:'<h3>一、Dokcer-Compose搭建镜像仓库</h3>\n<h5>1.本地创建私服镜像目录</h5>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/test</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> auth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker-compose</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/test/docker-compose/docker-compose.yml</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建一个用户，执行完成后会生成文件 /home/auth/registry.password</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/test/auth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">htpasswd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -Bc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.password</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> root</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.4,words:721},t:"镜像仓库搭建",y:"a"}}],["/posts/docker/%E9%9B%86%E6%88%90gvisor.html",{loader:()=>n.e(9601).then(n.bind(n,7994)),meta:{c:["docker"],g:["docker"],e:'<h3>一、安装gvisor</h3>\n<p><a href="https://gvisor.dev/docs/user_guide/install/" target="_blank" rel="noopener noreferrer">gvisor.dev</a></p>\n<h3>二、运行容器验证</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看当前docker支持的运行时</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Runtime</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 基于runtime=runsc创建容器</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --runtime=runsc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --memory=1g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos-test3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos:centos7</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 进入容器查看</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos-test3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 比较和宿主机的内存</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> free</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -m</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 基于runc创建容器试试(验证后发现内存隔离并未生效)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --runtime=runc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --memory=1g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos-test5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos:centos7</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.44,words:132},t:"集成gvisor",y:"a"}}],["/posts/docker/%E9%9B%86%E6%88%90kata.html",{loader:()=>n.e(4638).then(n.bind(n,2316)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>理解CRI标准</p>\n</blockquote>\n<h3>一、离线安装Docker</h3>\n<blockquote>\n<p>https://download.docker.com/linux/static/stable/aarch64/docker-23.0.4.tgz</p>\n</blockquote>\n<h3>二、kata-containers安装</h3>\n<ol>\n<li>检测是否支持kata-containers</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 先查看当前架构</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -a</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Intel的处理器支持Intel VT-x技术，而AMD的处理器支持AMD SVM技术</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># aarch64\\arm64 支持 ARM Hyp</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 支持kvm</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kata-runtime</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kata-check</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 输出表示支持</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># System is capable of running Kata Containers</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># System can currently create Kata Containers</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:7.82,words:2346},t:"集成kata",y:"a"}}],["/posts/etcd/Docker%E5%AE%89%E8%A3%85Etcd.html",{loader:()=>n.e(6277).then(n.bind(n,2278)),meta:{c:["etcd"],g:["etcd"],e:'<h3>1.Docker安装Etcd单机</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> etcd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 2379:2379</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 2380:2380</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ALLOW_NONE_AUTHENTICATION=yes</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  bitnami/etcd:3.3.11</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> etcd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> etcd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> etcdctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --prefix</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.78,words:233},t:"Docker安装Etcd",y:"a"}}],["/posts/etcd/etcd%E5%9F%BA%E7%A1%80.html",{loader:()=>n.e(3209).then(n.bind(n,2978)),meta:{e:'\n<h3>一、常用API</h3>\n<ol>\n<li>键值存储相关</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> etcdctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> version</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">etcdctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> version:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3.4.34</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> version:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3.4</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">etcdctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> put</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mykey</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> initialvalue</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设置并返回上一个版本的值</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">etcdctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> put</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mykey</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> newvalue</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --prev-kv</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">etcdctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --rev=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">revision_number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.99,words:1198},t:"etcd基础",y:"a"}}],["/posts/etcd/Etcd%E5%BC%80%E5%90%AFSSL%E8%AE%A4%E8%AF%81.html",{loader:()=>n.e(9).then(n.bind(n,6218)),meta:{c:["etcd"],g:["etcd"],e:'<h3>1. docker生成证书</h3>\n<h3>2. 使用生成的证书和密钥启动客户端</h3>\n<h3>3. 使用证书和密钥连接服务端</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> $(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">pwd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">/etcd:/root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos:centos7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sh</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> wget</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssljson_1.6.4_linux_arm64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssl_1.6.4_linux_arm64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cfssl_1.6.4_linux_arm64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin/cfssl</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cfssljson_1.6.4_linux_arm64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin/cfssljson</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin/cfssl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin/cfssljson</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.04,words:612},t:"Etcd开启SSL认证",y:"a"}}],["/posts/etcd/Raft%E7%AE%97%E6%B3%95.html",{loader:()=>n.e(7618).then(n.bind(n,6439)),meta:{c:["etcd"],g:["etcd"],e:"<h3>基本概念和相关术语</h3>\n<p>管理复制日志的一致性算法。本质上是管理日志的，日志决定了Leader和Follower角色以及数据副本。</p>\n<ul>\n<li>任期（Term）： Raft算法将时间划分为多个任期。</li>\n<li>日志（Log）： 客户端的请求以日志的形式进行记录。顺序性、每个节点存储、所有节点最终有相同的请求日志集合。</li>\n<li>状态机（State Machine）：抽象计算模型，可以认为是一些状态的计算规则。Raft通过日志等输入状态机，来确定状态管理节点状态等。</li>\n<li>节点状态：Follower（跟随者）、Candidate（候选者 - 无Leader时候Foller会转化为这个）、Leader（领导者）</li>\n<li>选举触发：Follower 在一个称为选举超时时间（election timeout）内没有收到来自 Leader 的心跳时触发。</li>\n<li>选举Leader的条件：Candidate 从大多数节点（超过集群节点总数的一半）获得了投票，它就会成为 Leader</li>\n<li>投票过程：候选者将自己任期号（Term）+1然后向其他所有节点发送请求投票（候选者当前任期号、日志条目、自己的节点ID ）。</li>\n<li>其他节点：任期号大于自己的任期号自己转变为跟随者、看候选者任期是否自己已经投给其他节点如果投了就拒绝投票、日志新旧程度新的会收到投票。</li>\n<li>候选者：收到所有其他节点的票，如果票数大于集群数量一半比如5节点收到3票，会把自己升级为Leader并且立刻发送心跳消息（AppendEntries）宣告。</li>\n</ul>",r:{minutes:4.21,words:1263},t:"Raft算法",y:"a"}}],["/posts/git/Gitlab%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html",{loader:()=>n.e(8483).then(n.bind(n,1425)),meta:{e:'\n<h3>一、Linux上安装gitlab</h3>\n<p><a href="https://gitlab.cn/install/" target="_blank" rel="noopener noreferrer">gitlab.cn/install中文安装手册</a></p>\n<ol>\n<li>install in CentOS [其他安装看相关文章的“官方install手册”]</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">gitlab/gitlab-ee：完整的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GitLab</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 软件包，包含所有社区版功能以及</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 企业版功能</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">gitlab/gitlab-ce：一个精简的包，仅包含社区版功能</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">gitlab/unstable:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 发布候选版本和其他不稳定版本</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.44,words:433},t:"如何安装gitlab",y:"a"}}],["/posts/git/Runner%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E5%88%B0CI.html",{loader:()=>n.e(9077).then(n.bind(n,6221)),meta:{e:'<h3>1.安装docker</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -fsSL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://get.docker.com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bash</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --mirror</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Aliyun</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.02,words:905},t:"Runner安装应用到CI",y:"a"}}],["/posts/git/runner%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C.html",{loader:()=>n.e(9532).then(n.bind(n,4521)),meta:{e:'\n<p><a href="https://www.runoob.com/docker/docker-dockerfile.html" target="_blank" rel="noopener noreferrer">docker镜像制作</a></p>\n<h3>制作 fmt &amp;&amp; lint 的go镜像</h3>\n<ol>\n<li>创建文件</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>touch Dockerfile</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.4,words:121},t:"runner镜像制作",y:"a"}}],["/posts/git/%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE.html",{loader:()=>n.e(4347).then(n.bind(n,7822)),meta:{c:["git"],g:["git"],e:'<h3>1.本地生成密钥</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 默认密钥文件路径</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &amp;&amp; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用账号生成SSH密钥</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rsa</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "your@email.com"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 输入生成的文件前缀</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Enter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> which</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> save</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> key:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> github</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 生成文件列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">github(私钥</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) github.pub(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">公钥</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.55,words:164},t:"密钥配置",y:"a"}}],["/posts/java/docker%E5%AE%89%E8%A3%85maven%E4%BB%93%E5%BA%93.html",{loader:()=>n.e(7836).then(n.bind(n,5834)),meta:{c:["java"],g:["java"],e:'<h3>1. maven仓库安装</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 8081:8081</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sonatype/nexus3</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:1.39,words:418},t:"docker安装maven仓库",y:"a"}}],["/posts/java/Java%E7%89%88%E6%9C%AC.html",{loader:()=>n.e(3279).then(n.bind(n,7034)),meta:{c:["java"],g:["java"],e:'<p>在 Mac 上更改 Java 版本通常涉及更新 <code>JAVA_HOME</code> 和 <code>PATH</code> 环境变量。以下是在 Mac 上更改 Java 版本的一般步骤：</p>\n<ol>\n<li>首先，检查系统中已安装的 Java 版本。在终端中运行以下命令：</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/usr/libexec/java_home -V</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.83,words:250},t:"Java版本",y:"a"}}],["/posts/java/%E5%88%B6%E4%BD%9Cmaven%E5%8C%85.html",{loader:()=>n.e(1127).then(n.bind(n,1244)),meta:{c:["java"],g:["java"],e:'<h3>1.IDEA创建一个Maven工具包</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">IDEA</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> New</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Project</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Archetype</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> maven-archetype-quickstart</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.93,words:1179},t:"Maven包制作与使用",y:"a"}}],["/posts/kafka/kafka%E5%9F%BA%E7%A1%80.html",{loader:()=>n.e(7759).then(n.bind(n,1198)),meta:{c:["kafka"],g:["kafka"],e:'<h3>一、kafka安装</h3>\n<blockquote>\n<p>Kafka本质上是高性能低延迟的分布式文件系统、分布式流处理平台主要用于处理和存储大量的实时数据流。数据以topics主题类别存储，每条记录有键、值、时间戳。</p>\n</blockquote>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 从 Kafka 2.8.0 版本开始，可以在不依赖 Zookeeper 的情况下运行 Kafka。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 通过引入 Kafka Raft（KRaft）模式实现的</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># bitnami/kafka:3.4 可以选择使用zookeeper</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bitnami/kafka:3.9.0</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:12.76,words:3829},t:"kafka基础",y:"a"}}],["/posts/go/Channel%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(9664).then(n.bind(n,5784)),meta:{c:["go"],e:'<h3>一、常用API</h3>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 发送</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">chan</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> &lt;-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> xxx</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 接收</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> chan</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 关闭</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">chan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 缓冲区</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">chan</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.32,words:697},t:"Channel底层原理",y:"a"}}],["/posts/go/context.html",{loader:()=>n.e(974).then(n.bind(n,6389)),meta:{e:'\n<h3>一、常用API</h3>\n<p>WithValue\n查找顺序\n多层级 context 值覆盖</p>\n<blockquote>\n<p>主要弄清楚 WithValue\\WithTimeout\\WithDeadline\\WithCancel 如何实现\n子上下文和父上下文如何相互通讯的</p>\n</blockquote>\n<ol>\n<li>跟上下文被子协程A添加了timeout会影响到同样适用跟上下文的协程B吗</li>\n</ol>\n<blockquote>\n<p>不会</p>\n</blockquote>\n<ol start="2">\n<li>background和todo有什么区别</li>\n</ol>',r:{minutes:1.99,words:597},t:"context",y:"a"}}],["/posts/go/defer.html",{loader:()=>n.e(737).then(n.bind(n,9026)),meta:{c:["go"],g:["go"],e:'\n<ol>\n<li>执行顺序</li>\n<li>和return执行顺序</li>\n<li>函数返回值初始化（默认零值）</li>\n<li>有名函数返回值可被defer修改</li>\n<li>defer遇见panic (有recover则正常补获没有则defer链)</li>\n<li>defer中包含panic (defer之中的panic会覆盖原有的panic)</li>\n</ol>\n<p><a href="https://www.yuque.com/aceld/golang/ithv8f" target="_blank" rel="noopener noreferrer">GO修养之路</a></p>',r:{minutes:.29,words:87},t:"defer",y:"a"}}],["/posts/go/defer%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(9662).then(n.bind(n,1409)),meta:{e:"\n<ol>\n<li>特性(延迟调用、异常处理、运行时间点、后进先出、return执行顺序)</li>\n<li>源码(数据结构、deferproc、newdefer、deferreturn)</li>\n</ol>\n<h3>1.延迟函数fmt.Println在执行的时候参数就被确定</h3>\n<h3>2.return非原子，分为<code>set返回值</code>和<code>callback 返回值</code>,中间执行<code>defer</code></h3>\n<h3>3.具名返回值在<code>set返回值后</code>可以被修改</h3>\n<h3>4.defer要改变返回值，改变的是在<code>set值之后的具名返回值</code></h3>",r:{minutes:.81,words:242},t:"defer",y:"a"}}],["/posts/go/for%E5%92%8Crange%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83.html",{loader:()=>n.e(9078).then(n.bind(n,2444)),meta:{e:'\n<h3>range 对每一个迭代值都创建 1 个拷贝 而 For 不会</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>迭代值大小很小的话，性能上没有差异</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>如果迭代值占用内存很大，range 就会显得性能差一些</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.35,words:105},t:"FOR 和 Range 的性能比较",y:"a"}}],["/posts/go/GC.html",{loader:()=>n.e(6563).then(n.bind(n,1707)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["GO原理"],e:'<h3>进程虚拟地址空间</h3>\n<ol>\n<li>Code Segment 代码段（程序要执行的指令）</li>\n<li>Data Segment 数据段(全局变量、静态数据)</li>\n<li>Heap 堆（需要程序手动释放）（c\\c++ 手动垃圾回收容易出现 悬挂指针-释放早了、内存泄漏-忘了释放）</li>\n<li>Stack 栈（函数局部变量、参数和返回值）函数调用完成后销毁（随着函数调用栈的销毁而释放内存）</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>栈、Data Segment 数据段上的对象作为root</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>基于它们 2个追踪</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>能追踪到的数据就代表是存活有引用的数据</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.49,words:1047},t:"GC",y:"a"}}],["/posts/go/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html",{loader:()=>n.e(2257).then(n.bind(n,6453)),meta:{e:"\n<h3>一、概念</h3>\n<h5>1.G（Goroutine）轻量级用户线程</h5>\n<pre><code>用户态的线程，轻量级，上下文切换全部由语言层面实现，初始栈大小通常只有2KB左右。\n</code></pre>\n<h5>2.M（Machine）操作系统线程</h5>\n<pre><code>M从调度队列中获取到一个Goroutine后，就会开始执行它，如果 Goroutine 发生了阻塞（如进行 I/O 操作、等待锁等），M会尝试从本地调度器的队列中获取其他可执行的 Goroutine 来继续执行。runtime/debug.SetMaxThreads设置M的最大数量。\n</code></pre>",r:{minutes:5.52,words:1657},t:"GMP原理与调度",y:"a"}}],["/posts/go/goland%E5%BF%AB%E6%8D%B7%E9%94%AE.html",{loader:()=>n.e(9332).then(n.bind(n,6601)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang"],e:"如何发布开源包",r:{minutes:.8,words:240},t:"goland快捷键",y:"a"}}],["/posts/go/golang%E5%AF%BC%E5%87%BAdocker%E9%95%9C%E5%83%8F.html",{loader:()=>n.e(7356).then(n.bind(n,7735)),meta:{c:["golang"],g:["golang"],e:"通过golang执行shell命令导出镜像到tar文件",r:{minutes:.53,words:160},t:"golang导出docker镜像",y:"a"}}],["/posts/go/golang%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%92%8C%E5%80%BC%E4%BC%A0%E9%80%92.html",{loader:()=>n.e(3586).then(n.bind(n,5144)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang"],e:"理解什么是值传递什么是引用传递吗，golang的结构体是值传递吗，切片是引用传递吗",r:{minutes:1.9,words:571},t:"golang引用传递和值传递",y:"a"}}],["/posts/go/golang%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(7446).then(n.bind(n,8699)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang"],e:"使用协程实现生产者消费者模式",r:{minutes:1.1,words:330},t:"golang生产者消费者模式",y:"a"}}],["/posts/go/golang%E9%9D%99%E6%80%81%E6%89%AB%E6%8F%8F%E5%92%8C%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5.html",{loader:()=>n.e(621).then(n.bind(n,4864)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang","golangci-lint","fmt"],e:"mackefile静态扫描和格式检查",r:{minutes:.45,words:134},t:"golang静态扫描和格式检查",y:"a"}}],["/posts/go/GoModules.html",{loader:()=>n.e(5254).then(n.bind(n,5439)),meta:{c:["go"],g:["go"],e:'\n<p><a href="https://www.jishuchi.com/read/gin-practice/3794#8c7ywi" target="_blank" rel="noopener noreferrer">go-modules 干货满满的 Go Modules 和 goproxy.cn</a>\n<a href="https://golangbyexample.com/go-mod-sum-module/" target="_blank" rel="noopener noreferrer">理解Go中的go.sum和go.mod文件</a>\n<a href="https://www.jishuchi.com/read/gin-practice/3795" target="_blank" rel="noopener noreferrer">终极入门</a></p>',r:{minutes:1.84,words:552},t:"GoModules",y:"a"}}],["/posts/go/GPM.html",{loader:()=>n.e(8023).then(n.bind(n,6005)),meta:{c:["go"],g:["go"],e:"\n<blockquote>\n<p>这篇文章写的太细致了，amazing</p>\n</blockquote>\n<ol>\n<li>G goroutine</li>\n<li>P processor</li>\n<li>M thread</li>\n</ol>\n<h3>术语</h3>\n<ol>\n<li>全局队列 Global Queue</li>\n<li>P的本地队列 (max 256) (out of size move half to GP)</li>\n<li>P(runtime.GOMAXPROCS数量),程序启动时创建</li>\n<li>M 从P之中获取G运行,P本地队列空了从 [Global Queue] 放到P的本地队列或者从 [其他P的本地队列] 偷一半到自己P的本地队列</li>\n<li>M在不够用时可以新建M</li>\n</ol>",r:{minutes:.75,words:226},t:"GMP",y:"a"}}],["/posts/go/GRPC.html",{loader:()=>n.e(2105).then(n.bind(n,2389)),meta:{e:'\n<blockquote>\n<p>使用<code>go-grpc</code>作为扩展库</p>\n</blockquote>\n<h3>一、grpc常用API</h3>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 创建一个TCP监听</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">lis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> net</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"tcp"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Sprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">":</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Fatalf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"failed to listen: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">s</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> grpc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">NewServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    grpc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">KeepaliveEnforcementPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">keepalive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">EnforcementPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 最小连接空闲时间，在此时间后若没有活动则发送 keepalive ping</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        MinTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:             </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Second</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 即使没有活动的流也允许发送 keepalive ping</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        PermitWithoutStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    grpc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">KeepaliveParams</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">keepalive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ServerParameters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 服务端发送 keepalive ping 的时间间隔</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:    </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Hour</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 服务端等待 keepalive ping 响应的超时时间</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        Timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Second</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:5.67,words:1701},t:"GRPC",y:"a"}}],["/posts/go/jaegertracing.html",{loader:()=>n.e(2153).then(n.bind(n,7840)),meta:{c:["go"],g:["go"],e:'<h3>一、如何使用</h3>\n<h5>1.创建Jaeger的Tracer追踪器</h5>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// InitJaeger 初始化一个opentracing.Tracer链路追踪实例</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 100%的请求都会记录跨度</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 初始化jaeger的指标</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> InitJaeger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">service</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">opentracing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Tracer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Closer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tcfg</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">jaegerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\tServiceName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 指定了要被追踪的服务的名称</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\tSampler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">jaegerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">SamplerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 采用恒定采样策略</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 意味着对于每一个请求或操作，都会按照固定的方式决定是否进行追踪</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\t\tType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"const"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 与 Type 字段配合，决定具体的采样行为</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\t\tParam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t},</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\tReporter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">jaegerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ReporterConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 设置为 true，表示要记录追踪的跨度（Span）信息到日志中</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\t\tLogSpans</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 指定了 Jaeger 收集器（Collector）的端点地址</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 追踪数据最终需要发送到 Jaeger 的收集器进行处理和存储</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 通过设置这个字段，告诉程序将追踪数据发送到哪里</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 指定客户端（应用程序）将追踪数据发送到的目标地址，即 Jaeger 收集器（Collector）的端点</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// TODO 客户端主动push</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t//  Jaeger 的这种配置下，是客户端主动将数据推送给收集器，</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// \t这种方式使得客户端对数据的发送有更多的控制权，能够根据自身的情况（如数据量、网络状况等）来决定何时发送数据</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t//\t 而不是等待服务端来请求</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// TODO 需要做优化更改为kafka - 异步PUSH</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\t\tCollectorEndpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Conf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">JaegerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 可选项</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 如果不配置CollectorEndpoint的话就需要配置这个Agent代理人端口</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // jaeger-agent会接收这些数据，进行缓冲和批量处理后，再发送给jaeger-collector</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 将数据发送到jaeger - agent的6831/udp端口</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      LocalAgentHostPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"127.0.0.1:6831"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t},</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t// 基于前面初始化好的配置结构体 cfg</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t// 使用 NewTracer 方法来创建一个 Jaeger 追踪器（Tracer）以及一个用于关闭追踪器相关资源的函数 closer</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t// jaegerConfig.Logger(jaeger.StdLogger) 是在为追踪器设置日志记录器</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\ttracer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">closer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> cfg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">NewTracer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">jaegerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">jaeger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">StdLogger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tif</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\tlogger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Fatal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\treturn</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> tracer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">closer</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 创建一个 Jaeger 追踪器（Tracer）</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tracer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">_</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> InitJaeger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Sprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\tconfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Conf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\tconfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Conf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:5.53,words:1659},t:"jaegertracing",y:"a"}}],["/posts/go/map.html",{loader:()=>n.e(3287).then(n.bind(n,7640)),meta:{e:'\n<h3>一、主要API</h3>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">m</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.78,words:1135},t:"map",y:"a"}}],["/posts/go/middleware%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(7849).then(n.bind(n,1784)),meta:{d:1681206012e3,l:"2023年4月11日",c:["golang"],g:["gin"],e:"gin的中间件实现原理",r:{minutes:.52,words:155},t:"moddleware底层实现原理",y:"a"}}],["/posts/go/module%E5%86%B2%E7%AA%81.html",{loader:()=>n.e(6356).then(n.bind(n,6944)),meta:{c:["golang"],g:["golang"],e:'<h3>一、由于依赖包k8s.io/apimachinery@latest不兼容company/client-go/cache导致的冲突</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 包company/client-go/cache与k8s.io/apimachinery@latest不兼容</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 需要指定k8s.io/apimachinery的版本为旧版 (默认会指向最新版)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 并且k8s.io/api@latest也依赖了k8s.io/apimachinery@latest</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 所以k8s.io也需要指定旧版</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">company-nvs/internal/vnetstore</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> imports</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">company/client-go/cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> imports</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">\tk8s.io/apimachinery/pkg/util/clock:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">\tmodule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> k8s.io/apimachinery@latest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> found</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (v0.27.3),</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">\tbut</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> does</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> not</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> contain</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> k8s.io/apimachinery/pkg/util/clock</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.24,words:672},t:"module冲突",y:"a"}}],["/posts/go/mongodb%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F.html",{loader:()=>n.e(4895).then(n.bind(n,2915)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang","mongodb"],e:"指定排序",r:{minutes:.15,words:46},t:"mongodb自定义排序",y:"a"}}],["/posts/go/Mutex.html",{loader:()=>n.e(6174).then(n.bind(n,769)),meta:{c:["go"],g:["GO原理"],e:'<h3>一、常用API</h3>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> mutex</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Mutex</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mutex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 访问共享资源的临界区代码</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mutex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:10.64,words:3193},t:"mutex包",y:"a"}}],["/posts/go/reflect%E7%9A%84%E6%80%A7%E8%83%BD.html",{loader:()=>n.e(7182).then(n.bind(n,1429)),meta:{e:'\n<h3>反射的用途</h3>\n<ol>\n<li>对象创建</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reflect.New(reflect.TypeOf(Config{})).Interface().(*Config)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.29,words:88},t:"Reflect的性能",y:"a"}}],["/posts/go/runtime%E5%8C%85.html",{loader:()=>n.e(6334).then(n.bind(n,1117)),meta:{e:'\n<p><a href="https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/runtime%E5%8C%85.html" target="_blank" rel="noopener noreferrer">runtime</a></p>\n<h3>除了获取堆栈信息还可以干嘛</h3>\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>',r:{minutes:.15,words:46},t:"runtime",y:"a"}}],["/posts/go/Security%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(9722).then(n.bind(n,3774)),meta:{e:'\n<ol>\n<li>用户个人功能权限控制校验</li>\n<li>用户敏感数据</li>\n<li>SQL注入</li>\n<li>请求参数验证</li>\n<li>CSRF安全验证</li>\n<li>外部重定向白名单</li>\n<li>平台资源防重放机制</li>\n<li>文件上传</li>\n<li>配置文件密码</li>\n</ol>\n<h1>Alibaba p3c</h1>\n<p><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer">github p3c</a></p>\n<h3>我喜欢的适用于其他语言的</h3>',r:{minutes:.32,words:97},t:"安全",y:"a"}}],["/posts/go/slice.html",{loader:()=>n.e(7539).then(n.bind(n,6060)),meta:{e:'\n<h3>一、底层数据结构</h3>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// runtime/slice.go</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> slice</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 底层是数组</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tarray</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Pointer</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t// 长度</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">   int</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 容量</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 扩容是2倍速扩容当大于1024的时候1.25倍速扩容</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tcap</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">   int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.63,words:189},t:"slice",y:"a"}}],["/posts/go/Socket%E6%98%AF%E4%BB%80%E4%B9%88.html",{loader:()=>n.e(7435).then(n.bind(n,8025)),meta:{e:'\n<h3>复习一下TCP/IP</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pid是一个机器内标识2个进程的东西</span></span>\n<span class="line"><span>网络层IP协议的ip地址标识主机</span></span>\n<span class="line"><span>TCP是ip地址+协议+端口号标识网络中的一个进程</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.62,words:487},t:"socket",y:"a"}}],["/posts/go/string.html",{loader:()=>n.e(8160).then(n.bind(n,3734)),meta:{e:'<h3>术语</h3>\n<ol>\n<li>unicode</li>\n<li>ASCII</li>\n<li>1字节8bit</li>\n<li>UTF-8 二进制符号位</li>\n<li>字符集</li>\n</ol>\n<p><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a></p>\n',r:{minutes:.11,words:33},t:"string",y:"a"}}],["/posts/go/struct%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>n.e(7466).then(n.bind(n,6375)),meta:{e:'\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.07,words:21},t:"struct 底层数据结构",y:"a"}}],["/posts/go/sync.Map%E8%AE%BE%E8%AE%A1.html",{loader:()=>n.e(4631).then(n.bind(n,8678)),meta:{e:'\n<h3>一、常用API</h3>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Go\\src\\sync\\map.go</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">m</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"value1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ok</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> ok</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ok</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">LoadOrStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"value2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">value</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{}) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.35,words:704},t:"sync.Map设计",y:"a"}}],["/posts/go/UnitTest%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(1370).then(n.bind(n,488)),meta:{c:["go"],g:["go"],e:'\n<ol>\n<li>AIR原则</li>\n<li>全自动非交互式的</li>\n<li>独立性</li>\n<li>可重复</li>\n<li>测试粒度足够小</li>\n<li>核心业务应用模块单测试要求</li>\n</ol>\n<h1>Alibaba p3c</h1>\n<p><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer">github p3c</a></p>\n<h3>我喜欢的适用于其他语言的</h3>\n<ol>\n<li>单元测试</li>\n<li>MySQL规范</li>\n</ol>',r:{minutes:.27,words:82},t:"UnitTest规范",y:"a"}}],["/posts/go/%E4%B8%AA%E4%BA%BA%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(3117).then(n.bind(n,1735)),meta:{c:["go"],g:["go"],e:"<ol>\n<li>\n<p>枚举值注释必须完善</p>\n</li>\n<li>\n<p>禁止出现硬编码</p>\n</li>\n<li>\n<p>有基本的单元测试验证（尽量使用断言而不是手动log人工判定单测是否通过）</p>\n</li>\n<li>\n<p>接口粒度应该细小、接口依赖应该明确、接口入参出参应该明确，对象化，最好可以做到依赖抽象而不是直接依赖具体的实现</p>\n</li>\n<li>\n<p>禁止在接口之中有隐藏的依赖条件（入参之中没有的参数比如环境变量，入参应该是决定输出的唯一条件）</p>\n</li>\n<li>\n<p>接口颗粒度要小一些（入参、出参尽可能简化易读），如果逻辑过于复杂应该对象化拆分，确保大接口拆出的小接口都走单元测试</p>\n</li>\n<li>\n<p>禁止IDE右侧出现notice黄色告警（单词拼写错误、命名不规范、公有方法没注释等）</p>\n</li>\n<li>\n<p>所有的指针访问都需要判定是否为nil</p>\n</li>\n<li>\n<p>所有的数组访问都需要判定length防止数组越界</p>\n</li>\n<li>\n<p>所有的除数都要判定被除数不是0</p>\n</li>\n<li>\n<p>关于同步转异步，取决于业务场景。如果是接口响应不强依赖执行结果的，比如用户关注频道后发送欢迎语，关注成功后异步发送欢迎语即可，不能阻塞主要流程，因为用户端不强依赖欢迎语，但是需要快速进入主页面。</p>\n</li>\n<li>\n<p>包命名规范</p>\n</li>\n<li>\n<p>禁止滥用init，个人建议整个项目不应该有init，main函数也是唯一的执行入口</p>\n</li>\n<li>\n<p>禁止滥用全局变量，应该保证依赖的关系足够清晰明了</p>\n</li>\n<li>\n<p>模块依赖管理，包与包之间的依赖关系清晰(按功能分块按业务水平分层，按数据流垂直分层，每一层之间尽可能解耦)，比如三层架构、领域驱动模型等都是追求分层，数据对象模型每一层之间都是解耦的，比如vo(view object视图)和持久化层对象po(数据库映射对象)肯定是转换过的，而不是直接将po往http对外接口抛。</p>\n</li>\n<li>\n<p>模块依赖管理，包的依赖应当尽可能放在私有属性(并且以选项模式注入依赖)。优点在于依赖会更加清晰容易管理，以及对于单元测试会友好很多。比如：</p>\n</li>\n</ol>",r:{minutes:5.28,words:1583},t:"个人编码规范",y:"a"}}],["/posts/go/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html",{loader:()=>n.e(287).then(n.bind(n,5865)),meta:{e:'<h3>三个概念内核、架构和位</h3>\n<h5>内核</h5>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>内核是操作系统的核心，windows不必多说，Linux家族主流内核freebsd、netbsd、solaris等。Mac内核darwin，Darwin 是一种Unix-like（类Unix）操作系统。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.89,words:268},t:"交叉编译",y:"a"}}],["/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFopenTracing.html",{loader:()=>n.e(7332).then(n.bind(n,6634)),meta:{e:'\n<ol>\n<li>什么是opentracing</li>\n<li>什么是jaeger</li>\n<li>如何实现服务可观测</li>\n</ol>\n<h3>启动jaeger</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -d -p 5775:5775/udp -p 16686:16686 jaegertracing/all-in-one:latest</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.55,words:165},t:"opentracing",y:"a"}}],["/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFstream.html",{loader:()=>n.e(3852).then(n.bind(n,3038)),meta:{e:'\n<h3>类型</h3>\n<blockquote>\n<p>服务端流式RPC、客户端流式RPC、双向流RPC</p>\n</blockquote>\n<p><a href="https://www.jishuchi.com/read/gin-practice/3798" target="_blank" rel="noopener noreferrer">gRPC Streaming, Client and Server</a></p>\n',r:{minutes:.09,words:27},t:"stream",y:"a"}}],["/posts/go/%E4%BB%A3%E7%A0%81%E5%88%86%E5%B1%82%E5%AE%9E%E8%B7%B5.html",{loader:()=>n.e(7436).then(n.bind(n,8783)),meta:{c:["go"],g:["go"],e:'\n<h3>一、具体的go项目模块分层</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>├── application | 应用入口｜可以理解为三层架构之中的 UI 表示层</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── admin_service｜实现后台管理系统CRUD当前微服务数据需要用到的 RPC 接口</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── dto | 数据传输对象实体</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └── grpc | RPC接口实现</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── event | 内置事件 ｜ 比如定时器 ｜ 统一实现一个抽象 interface{ start stop } | 这里注意下就是这个包是不允许有init函数的，禁止自身调用自身，它的调用必须显式地写在 applicition.Init或者编译入口main函数之中</span></span>\n<span class="line"><span>│&nbsp;&nbsp; └── front_service</span></span>\n<span class="line"><span>│&nbsp;&nbsp;     ├── dtos | 数据传输对象对外的restful接口用到的对象</span></span>\n<span class="line"><span>│&nbsp;&nbsp;     └── http | controller层 ｜ 如果涉及2个领域比如用户中心领域和商户领域 ｜ 在这里将2个领域组装数据 | 这里获取到的各个domain object是一个复杂的对象转</span></span>\n<span class="line"><span>│&nbsp;&nbsp; └────── init.go | 有一个包变量App结构体 ｜ 首先初始化db\\kafka\\redis\\mongodb\\es、再初始化domain service对象，然后以选项模式注入DB对象到领域对象，这里的init也不是用go的init而是Init暴露的方法 ，我这里几乎是禁止用隐藏的init函数</span></span>\n<span class="line"><span>换为api 用的dto</span></span>\n<span class="line"><span>├── config</span></span>\n<span class="line"><span>│&nbsp;&nbsp; └── files ｜ 里面只有1个.toml文件 ｜ 目前已经弃用 ｜ 配置已经改用从nacos读取</span></span>\n<span class="line"><span>├── domain</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── common | 通用域 ｜ 通用域是被其他域依赖 | 依赖注入也是选项模式注入到其他领域的私有属性 ｜ 域之间是互相独立的互不访问的而通用域则可以注入进其他领域 ｜ 还有支撑域等我这里分的没有那么细致</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── entity | 域实体 domain.object 领域对象 | 当前的领域对外暴露的实体</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └── repository | 仓储层</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └──----------- po.go ｜ persistent object 持久化层对象</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └──----------- repository.go | 仓储层对外提供的接口的抽象</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └──----------- repository_realization1.go | 仓储层CRUD的实现一 ｜ 基于MySQL</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └──----------- repository_realization2.go | 仓储层CRUD的实现二 ｜ 基于Oracle ｜ 正常只有1个实现</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; service.go | 领域对外暴露的服务 - 同样需要抽象和实现 ｜ 这里有很多的 po 转 do 的操作</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── user</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── entity</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └── repository</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; service.go</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── good</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── entity</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── enum</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └── repository</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; service.go</span></span>\n<span class="line"><span>├── global ｜ 全局的工具类 - 偏业务 ｜ 可以被domain\\event依赖的</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── cache | 缓存key管理</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── enum ｜ 一些通用的枚举值</span></span>\n<span class="line"><span>│&nbsp;&nbsp; └── router ｜ 路由 ｜ restful </span></span>\n<span class="line"><span>├── cmd | 运行入口 main.go | 运行逻辑大致是 配置加载 &gt; application.Init &gt; rpc.server.register &gt; prometheus/event &gt; run</span></span>\n<span class="line"><span>├── interfaces</span></span>\n<span class="line"><span>└── tools ｜ 工具类 - 剥离业务 - 一小部分特有的 ｜ 大部分的util工具被封装到团队独立的git仓库 ｜ go.mod引用爱用哪个版本用哪个</span></span>\n<span class="line"><span>    └── utils</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:6.44,words:1932},t:"代码分层实践",y:"a"}}],["/posts/go/%E4%BC%98%E9%9B%85%E6%8B%BC%E6%8E%A5URL.html",{loader:()=>n.e(6972).then(n.bind(n,104)),meta:{c:["golang"],g:["golang"],e:'<h3>一、代码</h3>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> tool</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\t"errors"</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\t"fmt"</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\t"net/url"</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\t"reflect"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// QueryRange 范围查找结构体</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> QueryRange</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tQuery</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> string</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `json:"query"`</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tStart</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  `json:"start"`</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tEnd</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">   int64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  `json:"end"`</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tStep</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    `json:"step"`</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// GetStructTag 获取结构体标签</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> GetStructTag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">s</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{}) (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tgetValue</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ValueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tif</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\treturn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">errors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">New</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"not struct"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tgetType</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">TypeOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tt</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tfor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">NumField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\tt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"json"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\treturn</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">nil</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// BuildURLByStruct build url</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> BuildURLByStruct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">path</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">queryRange</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">QueryRange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tif</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> queryRange</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\treturn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ""</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">errors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">New</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"query range is nil"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\ttagMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> GetStructTag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">queryRange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tif</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\treturn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ""</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">err</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tgetValue</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ValueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">queryRange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\turlParamMap</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tfor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">v</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> range</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> tagMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\turlParamMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Sprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">FieldByName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tbase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tif</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\treturn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ""</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">err</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tbase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">RawQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> urlParamMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\treturn</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">nil</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.74,words:522},t:"优雅拼接URL",y:"a"}}],["/posts/go/%E4%BF%A1%E5%8F%B7%E7%9B%91%E5%90%AC.html",{loader:()=>n.e(6680).then(n.bind(n,6725)),meta:{c:["go"],g:["go"],e:'<h3>使用OS包监听系统信号</h3>\n<div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package main</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import (</span></span>\n<span class="line"><span>\t"context"</span></span>\n<span class="line"><span>\t"log"</span></span>\n<span class="line"><span>\t"os"</span></span>\n<span class="line"><span>\t"os/signal"</span></span>\n<span class="line"><span>\t"syscall"</span></span>\n<span class="line"><span>\t"time"</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func main() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tctx, cancel := context.WithCancel(context.Background())</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tch := make(chan os.Signal, 1)</span></span>\n<span class="line"><span>\tsignal.Notify(ch, os.Interrupt, syscall.SIGTERM)</span></span>\n<span class="line"><span>\tgo func() {</span></span>\n<span class="line"><span>\t\t&lt;-ch</span></span>\n<span class="line"><span>\t\tlog.Println("Received termination, signaling shutdown")</span></span>\n<span class="line"><span>\t\tcancel()</span></span>\n<span class="line"><span>\t}()</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tgo func(ctx context.Context) {</span></span>\n<span class="line"><span>\t\t&lt;-ctx.Done()</span></span>\n<span class="line"><span>\t\tlog.Println("context done")</span></span>\n<span class="line"><span>\t\tos.Exit(0)</span></span>\n<span class="line"><span>\t}(ctx)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\ttime.Sleep(time.Minute)</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.22,words:66},t:"信号监听",y:"a"}}],["/posts/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html",{loader:()=>n.e(1761).then(n.bind(n,3343)),meta:{e:"\n<h3>一、堆内存里面是分块的</h3>\n<ul>\n<li>Arena\nRuntime将堆内存划分为一个个的arena（每个64MB）。物理存储内存。</li>\n<li>Page\n每个Arena包含8192个page，每个page大小8kb。物理存储内存。</li>\n<li>Span\ngo语言特定内存管理单位。多个连续Page之间按照不同大小规格划分出逻辑上的Span（链表）。</li>\n</ul>\n<h3>二、程序请求内存的时候直接从预置的大小规格拿出来的</h3>\n<p>程序请求分配内存的时候，有大有小，为了降低碎片化内存带来的不良影响（空间浪费），采用Tcmalloc内存分配器类似的算法。Tcmalloc内存分配器类似的算法指的是将内存页按照预置的大小规格划分成多块(Span)(用链表记录)，程序请求内存时候，直接将匹配的大小规格的给过去（67种规格 8*8 bit (8字节)-32kb）。</p>",r:{minutes:1.77,words:532},t:"内存分配",y:"a"}}],["/posts/go/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html",{loader:()=>n.e(7711).then(n.bind(n,3155)),meta:{c:["golang"],g:["golang"],e:"<h3>栈内存管理</h3>\n<ol>\n<li>先进后出</li>\n<li>内存空间大小在编译时确定</li>\n<li>速度快</li>\n<li>栈内存主要用于存储局部变量、函数参数等临时数据。</li>\n<li>编译器管理</li>\n</ol>\n<h3>堆内存管理</h3>\n<ol>\n<li>后进先出</li>\n<li>内存空间大小在运行时确定</li>\n<li>速度较慢</li>\n<li>堆内存主要用于存储动态分配的数据。</li>\n<li>运行时系统管理</li>\n<li>可以通过new关键字来分配堆内存（Go中new出来的对象可不一定分配在堆上）</li>\n<li>堆内存管理采用了垃圾回收机制，由内存分配器和垃圾收集器</li>\n<li>内存分配器采用了TCMalloc（Thread-Caching Malloc）的设计思想</li>\n<li>内存分配器负责分配堆内存</li>\n<li>垃圾收集器采用了标记-清除算法</li>\n</ol>",r:{minutes:1.32,words:397},t:"内存管理",y:"a"}}],["/posts/go/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C.html",{loader:()=>n.e(6519).then(n.bind(n,2486)),meta:{e:"\n<h3>一、CAS（Compare-And-Swap）原理</h3>\n<pre><code>一种用于实现原子操作的机制，用于在多线程或多协程（Goroutine）环境下，安全地更新共享变量的值。内存位置（变量的地址）、预期旧值和新值。基本思想是先比较内存位置中的值是否等于预期旧值，如果相等，表示获取值到准备更新时候没有其他线程更改过这个数据，选择更新这个数据。\n</code></pre>\n<h3>二、cas为什么是线程安全的</h3>\n<ol>\n<li>\n<p>执行值替换的动作是原子的</p>\n<p>CAS（Compare-And-Swap）操作是原子性的(硬件层面CPU通常会提供一些指令来支持原子操作)。原子性意味着整个操作在执行过程中是不可分割的，它不会被其他线程（或 Go 语言中的 Goroutine）中断。那么不原子的是什么样子呢，比如自增操作<code>count++</code>，这个操作在编译器层面可能会被分解为：读取<code>count</code>的值，将其加<code>1</code>，再将新值写回count的内存位置这三个步骤。三个线程分别获取了count的旧值然后执行<code>++</code>，就会出现结果异常的情况。</p>\n</li>\n<li>\n<p>基于预期旧值的比较机制</p>\n<p>比较内存位置中的当前值与预期旧值，每个线程更新之前，比较一下已经拿到的初始值，和内存之中的值，如果没有变才会更新，如果变了，说明在这个期间有其他线程更新了这个数据，那么会放弃修改这个值。</p>\n</li>\n</ol>",r:{minutes:1.58,words:474},t:"原子操作",y:"a"}}],["/posts/go/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",{loader:()=>n.e(9081).then(n.bind(n,4029)),meta:{c:["golang"],g:["golang"],e:'<h3>一、样例代码</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go.mod</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tool</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> net.go</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> net_test.go</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.76,words:228},t:"命令行执行单元测试",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8errors.html",{loader:()=>n.e(9691).then(n.bind(n,1435)),meta:{e:'<p><a href="https://pkg.go.dev/github.com/pkg/errors" target="_blank" rel="noopener noreferrer">github.com/pkg/errors</a></p>\n<p><a href="https://pkg.go.dev/errors" target="_blank" rel="noopener noreferrer">pkg.go.dev/errors</a></p>\n<h3>差异</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>两者不同本质上在 fmt.Printf("%+v" ,err)时候 github.com 的多了堆栈信息</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:2.57,words:772},t:"golang推荐的包",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E5%88%A4%E5%AE%9A%E9%9B%B6%E5%80%BC.html",{loader:()=>n.e(5604).then(n.bind(n,752)),meta:{e:'\n<blockquote>\n<p>reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())</p>\n</blockquote>\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.08,words:24},t:"如何判定零值",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0pkg.html",{loader:()=>n.e(1799).then(n.bind(n,2599)),meta:{c:["golang"],g:["golang"],e:'<h3>参考资料</h3>\n<ul>\n<li><a href="https://medium.com/geekculture/release-your-go-package-on-pkg-go-dev-886ec42fbc77" target="_blank" rel="noopener noreferrer">medium.com/geekculture发布包到pkg</a></li>\n<li><a href="https://blog.golang.im/how-to-release-go-module/" target="_blank" rel="noopener noreferrer">囊地鼠饲养员的碎碎念/如何优雅地发布模块到pkg.go.dev</a></li>\n</ul>',r:{minutes:.2,words:60},t:"如何发布包到pkg",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E6%B1%A0%E5%8C%96%E8%BF%9E%E6%8E%A5.html",{loader:()=>n.e(1099).then(n.bind(n,1972)),meta:{e:"\n<ol>\n<li>实现原理</li>\n<li>具体抽象</li>\n<li>扩缩容机制</li>\n<li>超时与保活</li>\n<li>池满策略</li>\n</ol>\n<h3>GRPC调优</h3>\n<h3>GRPC特性</h3>\n<ol>\n<li>多路复用。HTTP/2作为应用层的传输协议。HTTP/2会复用传输层的TCP连接，但是Client有些条件些会新建连接（server发送GOAWAY Frame也会强制让client新建连接）</li>\n<li>一次GRPC调用就产生一个Stream（Stream包含多个Frame,Frame也是HTTP/2最小传输单位）</li>\n<li>一条GRPC连接允许并发的发送和接收多个Stream（服务端默认100个）控制参数MaxConcurrentStreams</li>\n<li>超时重连。创建连接后有一个goroutine负责重连机制,自带的</li>\n</ol>",r:{minutes:.78,words:234},t:"如何池化连接",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E9%80%80%E5%87%BA%E5%8D%8F%E7%A8%8B.html",{loader:()=>n.e(4788).then(n.bind(n,7229)),meta:{e:'\n<h3>超时场景</h3>\n<ol>\n<li>模拟一个Goroutine泄漏的场景</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>父协程创建chan(无缓冲且只有父协程有接收的位置)且在子协程运行完成之前退出</span></span>\n<span class="line"><span>子协程(阻塞在 chan &lt;- true)(因为唯一接收的地方父协程关闭了)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>当父协程close了，子协程继续 chan &lt;- true 也会出错</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.73,words:220},t:"如何退出协程",y:"a"}}],["/posts/go/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD.html",{loader:()=>n.e(9451).then(n.bind(n,3616)),meta:{e:'\n<h3>一、字符串拼接方式</h3>\n<ol>\n<li>\n<p>使用 +</p>\n</li>\n<li>\n<p>fmt.Sprintf</p>\n</li>\n<li>\n<p>strings.Builder</p>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> builder</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> strings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Builder</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">WriteString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">WriteString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">" World"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>bytes.Buffer</p>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> buffer</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Buffer</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">WriteString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Good"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">([]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"bye"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>[]byte 或者 []rune</p>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> byteSlice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">byte</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">byteSlice</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">byteSlice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)...)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">byteSlice</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">byteSlice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">" World"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)...)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">byteSlice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n</ol>',r:{minutes:.85,words:255},t:"字符串拼接性能",y:"a"}}],["/posts/go/%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6.html",{loader:()=>n.e(5279).then(n.bind(n,307)),meta:{e:'<h3>runtime 对 G 进行异步抢占</h3>\n<blockquote>\n<p>go 1.13 \\ go 1.14</p>\n</blockquote>\n<h3>Linux上真正的抢占式调度是基于信号来实现的 "异步抢占"</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>调用操作系统中信号相关的系统调用</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>发送指定信号给目标线程</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>线程接收到信号之后</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.29,words:88},t:"抢占式调度",y:"a"}}],["/posts/go/%E8%85%BE%E8%AE%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(3799).then(n.bind(n,4797)),meta:{d:1681206012e3,l:"2023年4月11日",c:["golang"],g:["golang"],e:"腾讯内部的代码风格要求",r:{minutes:17.11,words:5132},t:"腾讯代码规范",y:"a"}}],["/posts/go/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91.html",{loader:()=>n.e(5087).then(n.bind(n,7639)),meta:{c:["go"],g:["go"],e:'<h3>golang请求转发</h3>\n<div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package main</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import (</span></span>\n<span class="line"><span>    "log"</span></span>\n<span class="line"><span>    "net/http"</span></span>\n<span class="line"><span>    "net/http/httputil"</span></span>\n<span class="line"><span>    "net/url"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    "github.com/gogf/gf/v2/frame/g"</span></span>\n<span class="line"><span>    "github.com/gogf/gf/v2/net/ghttp"</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func main() {</span></span>\n<span class="line"><span>    s := g.Server()</span></span>\n<span class="line"><span>    s.SetPort(8899)</span></span>\n<span class="line"><span>    group := s.Group("/")</span></span>\n<span class="line"><span>    group.ALL("/api", func(r *ghttp.Request) {</span></span>\n<span class="line"><span>        ForwardHandler(r.Response.ResponseWriter, r.Request)</span></span>\n<span class="line"><span>    })</span></span>\n<span class="line"><span>    s.Run()</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func ForwardHandler(writer http.ResponseWriter, request *http.Request) {</span></span>\n<span class="line"><span>    u, err := url.Parse("http://localhost:8083" + "?" + request.URL.RawQuery)</span></span>\n<span class="line"><span>    if nil != err {</span></span>\n<span class="line"><span>        log.Println(err)</span></span>\n<span class="line"><span>        return</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    proxy := httputil.ReverseProxy{</span></span>\n<span class="line"><span>        Director: func(request *http.Request) {</span></span>\n<span class="line"><span>            request.URL = u</span></span>\n<span class="line"><span>        },</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    proxy.ServeHTTP(writer, request)</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.24,words:72},t:"请求转发",y:"a"}}],["/posts/go/%E8%AF%BB%E5%86%99%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(3397).then(n.bind(n,7333)),meta:{c:["go"],g:["go"],e:'<h3>一、常用API</h3>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> rwMutex</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">RWMutex</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rwMutex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 进行写操作</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rwMutex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> rwMutex</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">RWMutex</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rwMutex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">RLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 进行读操作</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rwMutex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">RUnlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.05,words:316},t:"读写锁原理",y:"a"}}],["/posts/go/%E9%85%8D%E7%BD%AEgo%E7%A7%81%E6%9C%89%E5%BA%93.html",{loader:()=>n.e(3613).then(n.bind(n,1998)),meta:{c:["golang"],g:["golang"],e:'<h3>一、配置golang环境</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> env</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -w</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GOINSECURE="gitlab.company.net"</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 在 Go 1.13 版本中 没有 GOINSECURE 环境变量</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> env</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -w</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GONOPROXY="gitlab.company.net"</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> env</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -w</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GOPRIVATE="gitlab.company.net"</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> env</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -w</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GONOSUMDB="gitlab.company.net"</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> env</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -w</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GOPROXY="https://goproxy.io,direct"</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> env</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -w</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GO111MODULE=on</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.31,words:393},t:"配置go私有库",y:"a"}}],["/posts/kubernetes/CI%E5%88%B6%E4%BD%9C%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F.html",{loader:()=>n.e(7448).then(n.bind(n,8168)),meta:{c:["docker"],g:["cicd","dockerfile"],e:'<h3>一、总览</h3>\n<ol>\n<li>制作镜像支持编译SDN以及上传helm包和images</li>\n</ol>\n<ul>\n<li>docker in docker</li>\n<li>go version 1.8</li>\n<li>registry.company.net</li>\n<li>buildx</li>\n</ul>\n<ol start="2">\n<li>\n<p>注册runner到gitlab</p>\n</li>\n<li>\n<p>编写gitlab-ci.yml文件设置CI流水线</p>\n</li>\n</ol>\n<h3>一、镜像构建源文件</h3>\n<ol>\n<li>目录树</li>\n</ol>',r:{minutes:3.29,words:988},t:"CI制作多架构镜像",y:"a"}}],["/posts/kubernetes/containerd%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(2020).then(n.bind(n,9489)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>一、环境</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root🐳 ~]# uname -a</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Linux ming-computer 5.15.0-71-generic #78~20.04.1-Ubuntu SMP Wed Apr 19 </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 11:26:48 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.91,words:573},t:"containerd安装",y:"a"}}],["/posts/kubernetes/CRD%E6%8E%A7%E5%88%B6%E5%99%A8.html",{loader:()=>n.e(8053).then(n.bind(n,3287)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h4>一、quick start</h4>\n<blockquote>\n<p>来个CRD控制器的QuickStart，从code gender代码生成到编译控制器，运行控制器查看监听事件，以及informer设计</p>\n</blockquote>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 基于版本v1.27.2</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://github.com/kubernetes/kubernetes.git</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> v1.27.2</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /kubernetes/staging/src/k8s.io/sample-controller</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.18,words:654},t:"CRD控制器",y:"a"}}],["/posts/kubernetes/flanne%E6%8E%A5%E5%85%A5k8s.html",{loader:()=>n.e(4365).then(n.bind(n,7443)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>kubernetes网络解决方案flannel如何使用，拓扑图理解</p>\n</blockquote>\n<h3>1.kubernetes如何接入flannale</h3>\n<ul>\n<li><a href="https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/" target="_blank" rel="noopener noreferrer">k8s/概念/扩展/网络插件</a></li>\n<li><a href="https://github.com/containerd/containerd/blob/main/script/setup/install-cni" target="_blank" rel="noopener noreferrer">k8s/概念/扩展/网络插件/containerd安装网络插件</a></li>\n<li><a href="https://github.com/cri-o/cri-o/blob/main/contrib/cni/README.md" target="_blank" rel="noopener noreferrer">k8s/概念/扩展/网络插件/CRI-O安装网络插件</a></li>\n<li><a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/#networking-and-network-policy" target="_blank" rel="noopener noreferrer">k8s/概念/集群管理/安装扩展</a></li>\n<li><a href="https://github.com/flannel-io/flannel#deploying-flannel-with-kubectl" target="_blank" rel="noopener noreferrer">deploying-flannel-with-kubectl</a></li>\n<li><a href="https://github.com/flannel-io/flannel#deploying-flannel-with-helm" target="_blank" rel="noopener noreferrer">deploying-flannel-with-helm</a></li>\n</ul>',r:{minutes:8.84,words:2651},t:"flannel接入k8s",y:"a"}}],["/posts/kubernetes/iperf%E7%94%A8%E6%B3%95.html",{loader:()=>n.e(1872).then(n.bind(n,2953)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>iperf压测网速</p>\n</blockquote>\n<h3>一、工具用途</h3>\n<p>测试带宽工具，具备类似功能的工具还有scp、wget。</p>\n<h3>二、开始带宽测试</h3>\n<ol>\n<li>\n<p>直接容器启动一个iperf3的server和client测试带宽，来一个<a href="https://github.com/nerdalert/iperf3/blob/master/README.md" target="_blank" rel="noopener noreferrer">quickstart</a></p>\n</li>\n<li>\n<p>服务器之间带宽测试</p>\n</li>\n</ol>',r:{minutes:2.9,words:869},t:"iperf用法",y:"a"}}],["/posts/kubernetes/k8s%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(1305).then(n.bind(n,8371)),meta:{c:["kubernetes"],g:["loki"],e:'<blockquote>\n<p>如何开启k8s的审计日志以及如何配置审计日志记录策略、解读k8s的apiserver关于审计日志的源码逻辑，了解loki如何采集日志并且http API接口查看日志.</p>\n</blockquote>\n<h3>一、loki存档审计日志架构图</h3>\n<figure><img src="/images/audit-log.png" alt="审计日志接入" tabindex="0" loading="lazy"><figcaption>审计日志接入</figcaption></figure>\n<h3>二、配置k8s仅仅记录资源的delete edit add，不记录查看动作</h3>',r:{minutes:3.56,words:1068},t:"k8s审计日志",y:"a"}}],["/posts/kubernetes/kata_firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(2399).then(n.bind(n,7392)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>一、环境</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@VM-8-4-centos ~]# uname -a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Linux</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> x86_64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GNU/Linux</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 需要支持虚拟化：有输出表示支持</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> egrep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'(vmx|svm)\'</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /proc/cpuinfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">wc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -l</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 需要安装kvm</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lsmod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kvm</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># kvm_intel  376832  11</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># kvm  1015808  1 kvm_intel</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># dev设备</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ll</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /dev/kvm</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.22,words:1267},t:"kata&firecracker环境搭建",y:"a"}}],["/posts/kubernetes/kube-proxy%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",{loader:()=>n.e(6764).then(n.bind(n,8581)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>理解kube-proxy在Flannel网络之中充当什么角色，底层的负载均衡算法是如何实现，相关的Service如何使用该插件的。</p>\n</blockquote>\n<h3>相关文档</h3>\n<ul>\n<li><a href="https://zhuanlan.zhihu.com/p/337806843" target="_blank" rel="noopener noreferrer">一文看懂 Kube-proxy</a></li>\n</ul>\n',r:{minutes:.22,words:66},t:"kube-proxy设计与实现",y:"a"}}],["/posts/kubernetes/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",{loader:()=>n.e(868).then(n.bind(n,7960)),meta:{c:["kubernetes"],g:["kubectl"],e:'<h3>命令式对象管理</h3>\n<ol>\n<li>查看所有的pod</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pods</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:5.09,words:1528},t:"kubectl常用的命令",y:"a"}}],["/posts/kubernetes/kubernetes%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(2061).then(n.bind(n,8522)),meta:{d:1684867212e3,l:"2023年5月24日",c:["kubernetes"],g:["kubernetes"],u:1,e:"介绍审计日志相关配置项，示例如何开启并且如何将审计日志打到标准输出",r:{minutes:3.17,words:952},t:"kubernetes审计日志",y:"a"}}],["/posts/kubernetes/Kubernetes%E7%BB%84%E4%BB%B6.html",{loader:()=>n.e(2761).then(n.bind(n,2741)),meta:{c:["docker"],g:["docker"],e:"\n<h3>一、控制节点</h3>\n<ol>\n<li>API Server 集群操作入口</li>\n<li>Scheduler 集群资源调度</li>\n<li>ControllerManager 维护集群状态</li>\n<li>ETCD 存储资源对象</li>\n</ol>\n<h3>二、工作节点</h3>\n<ol>\n<li>Kubelet 维护容器生命周期</li>\n<li>KubeProxy 集群内部服务发现和负载均衡</li>\n<li>Docker 节点上容器操作</li>\n</ol>\n<h3>何谓高可用的k8s</h3>\n<h3>k8s的相关术语</h3>\n<ol>\n<li>Master</li>\n<li>Node</li>\n<li>Pod</li>\n<li>Controller</li>\n<li>Service</li>\n<li>Label</li>\n<li>NameSpace</li>\n</ol>",r:{minutes:.77,words:230},t:"Kubernetes组件",y:"a"}}],["/posts/kubernetes/linux%E4%B8%8A%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.html",{loader:()=>n.e(5931).then(n.bind(n,6638)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>熟悉常用的指令比如ip\\route\\ping\\telnet\\netestat等</p>\n</blockquote>\n<h3>一、什么是静态路由</h3>\n<p>通过手动配置路由表的方式，在网络中设置<code>固定的路由路径</code>以实现数据包的转发和路由选择的方法；</p>\n<h3>二、使用route配置静态路由</h3>\n<ol>\n<li>将 169.254.0.0/16 网络的数据包转发到 10.16.200.0/21 子网中：</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将目标网络为169.254.0.0，子网掩码为255.255.0.0的数据包通过网关10.16.200.1进行路由转发</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 当本机需要访问169.254.0.0/16网络的时候，会直接通过10.16.200.1这个网关进行路由转发</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># -net 169.254.0.0：指定要添加路由的网络地址。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># netmask 255.255.0.0：指定网络掩码。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># gw 10.16.200.1：指定网关 IP 地址。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> route</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -net</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 169.254.0.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netmask</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 255.255.0.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> gw</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10.16.200.1</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.96,words:889},t:"如何配置静态路由",y:"a"}}],["/posts/kubernetes/Loki%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(9542).then(n.bind(n,8092)),meta:{c:["kubernetes"],g:["loki"],e:'<h3>一、安装步骤</h3>\n<ol>\n<li>安装<a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener noreferrer">helm</a>工具</li>\n<li>访问 <a href="https://artifacthub.io/" target="_blank" rel="noopener noreferrer">artifacthub</a> 添加 loki <a href="https://artifacthub.io/packages/helm/grafana/loki?modal=install" target="_blank" rel="noopener noreferrer">repo</a></li>\n<li>导出helm包 grafana/loki version 5.6.4</li>\n<li>修改helm包增加 scrape config 增加采集目标</li>\n<li>helm包重新打包</li>\n<li>安装在k8s</li>\n</ol>',r:{minutes:2.65,words:795},t:"Loki服务安装",y:"a"}}],["/posts/kubernetes/MySQL%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(9980).then(n.bind(n,2872)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>开源安装包</h3>\n<p><a href="https://artifacthub.io/packages/helm/bitnami/mysql" target="_blank" rel="noopener noreferrer">artifacthub.io/packages/helm/bitnami/mysql</a></p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># global.storageClass 存储类</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># secondary.replicaCount 从节点数量</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># MySQL的架构可以是独立的（standalone）或者是复制（replication）</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">helm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mysql-cluster</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    oci://registry-1.docker.io/bitnamicharts/mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    --set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> global.storageClass=nfs-client</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    --set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> architecture=replication</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    --set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> secondary.replicaCount=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.36,words:109},t:"MySQL集群搭建",y:"a"}}],["/posts/kubernetes/Nginx-Ingress%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(6751).then(n.bind(n,6772)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>1. nginx pod</h3>\n<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Pod</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx-pod</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> containers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx-container</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx:latest</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">---</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Service</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx-service</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">TCP</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">80</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   targetPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">80</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   nodePort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">30089</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">NodePort</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.62,words:185},t:"Nginx-Ingress安装",y:"a"}}],["/posts/kubernetes/S3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.html",{loader:()=>n.e(3012).then(n.bind(n,4)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>1.安装s3软件</h3>\n<h3>2.安装s3的CSI插件</h3>\n<ul>\n<li>MinIO Helm</li>\n<li>minio-StorageClass</li>\n<li>pvc of StorageClass</li>\n</ul>\n<h3>3.配置PVC使用存储</h3>\n<ul>\n<li>\n<p>pod use pvc</p>\n</li>\n<li>\n<p><a href="http://www.lishuai.fun/2021/12/31/k8s-pv-s3/#/%E8%A6%81%E6%B1%82" target="_blank" rel="noopener noreferrer">使用s3(minio)为kubernetes提供pv存储</a></p>\n</li>\n<li>\n<p><a href="https://github.com/ctrox/csi-s3" target="_blank" rel="noopener noreferrer">ctrox/csi-s3</a></p>\n</li>\n<li>\n<p><a href="https://developer.aliyun.com/article/745953" target="_blank" rel="noopener noreferrer">阿里云CSI插件介绍</a></p>\n</li>\n</ul>',r:{minutes:.26,words:79},t:"S3对象存储",y:"a"}}],["/posts/kubernetes/traefik%E9%85%8D%E7%BD%AEingress%E6%9C%8D%E5%8A%A1.html",{loader:()=>n.e(5233).then(n.bind(n,5983)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>在docker或者k8s集群内部安装traefik并且配置ingress访问内部服务</p>\n</blockquote>\n<h3>一、docker配置traefik访问Nginx服务</h3>\n<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'3\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  reverse-proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # The official v2 Traefik docker image</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">traefik:v2.10</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # Enables the web UI and tells Traefik to listen to docker</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">--api.insecure=true --providers.docker</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # The HTTP port</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"80:80"</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # The Web UI (enabled by --api.insecure=true)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"8080:8080"</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # So that Traefik can listen to the Docker events</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">/var/run/docker.sock:/var/run/docker.sock</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  nginx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">     - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"traefik.http.routers.nginx.rule=Host(`yourdomain.com`)"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">     - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"traefik.http.services.nginx.loadbalancer.server.port=80"</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">always</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.92,words:576},t:"配置traefik的ingress服务",y:"a"}}],["/posts/kubernetes/%E4%BB%80%E4%B9%88%E6%98%AFCNI.html",{loader:()=>n.e(6852).then(n.bind(n,3652)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>理解什么是CNI，k8s的网络模型是什么，实现的插件有哪些，相关的openvswitch又是什么</p>\n</blockquote>\n<h3>一、简短描述</h3>\n<ol>\n<li>CNCF项目;</li>\n<li>标准化的网络接口规范;</li>\n<li>CNI规范定义了"容器运行时"如何与"网络插件"进行通信，并且规定了插件必须实现的功能和接口;</li>\n<li>第三方插件:\n<ul>\n<li><a href="https://github.com/projectcalico/calico" target="_blank" rel="noopener noreferrer">calico</a></li>\n<li><a href="https://github.com/cilium/cilium" target="_blank" rel="noopener noreferrer">cilium</a></li>\n</ul>\n</li>\n</ol>',r:{minutes:14.12,words:4237},t:"什么是CNI",y:"a"}}],["/posts/kubernetes/%E5%88%9B%E5%BB%BAservice%E6%8C%87%E5%90%91%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1.html",{loader:()=>n.e(1203).then(n.bind(n,8120)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>声明一个elasticsearch-1的服务，它映射到一个外部的地址192.168.11.13的9200端口</h3>\n<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Service</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">elasticsearch-1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">ClusterIP</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">80</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #cluster端口，集群内部访问</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    targetPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9200</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #pod端口</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">---</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Endpoints</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">elasticsearch-1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">subsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">addresses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">192.168.11.13</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9200</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.47,words:142},t:"创建service和endpoints指向外部服务",y:"a"}}],["/posts/kubernetes/%E5%88%9D%E8%AF%86CRD.html",{loader:()=>n.e(3653).then(n.bind(n,4595)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>1.创建自定义资源</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> resourcedefinition.yaml</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:3.48,words:1043},t:"初识CRD",y:"a"}}],["/posts/kubernetes/%E5%88%B6%E4%BD%9Chelm%E5%8C%85%E5%92%8C%E8%87%AA%E5%BB%BAChart%E4%BB%93%E5%BA%93.html",{loader:()=>n.e(8472).then(n.bind(n,163)),meta:{c:["kubernetes"],g:["helm"],e:"<h3>一、Helm相关概念</h3>\n<p>Helm是一个kubernetes的包管理工具，软件包管理器 (类似ubuntu.apt centos.yum python.pip)，主要解决Kubernetes原生资源文件如deployment、replicationcontroller、service或pod等资源过于分散不好管理的问题。</p>\n<ul>\n<li>helm 命令行管理工具，kubernetes应用chart（创建、打包、发布和管理）</li>\n<li>chart 应用描述（kubernetes资源相关文件的集合），相当于是k8s的Yum RPM</li>\n<li>release 基于chart的部署实体，chart被Helm运行后生成一个release,比如MySQL chart可以有很多个实例（每一次安装有它自己的 release &amp;&amp; release name）</li>\n<li>Repository 存放和共享 charts 的地方</li>\n</ul>",r:{minutes:3.11,words:933},t:"制作helm包和自建Chart仓库",y:"a"}}],["/posts/kubernetes/%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91kata.html",{loader:()=>n.e(526).then(n.bind(n,361)),meta:{g:["golang","cicd"],e:'<h3>一、编写Dockerfile</h3>\n<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> centos:centos7</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> GOROOT=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/usr/local/go"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GOPROXY=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https://goproxy.cn,direct"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GOINSECURE=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"gitlab.my-company.net"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GOPRIVATE=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"*.corp.com,gitlab.my-company.net"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GONOPROXY=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"gitlab.my-company.net"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GONOSUMDB=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"gitlab.my-company.net"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    PATH=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"$PATH:/usr/local/go/bin"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    TZ=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Asia/Shanghai"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># repo</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> curl https://sh.rustup.rs -sSf | sh -s -- -y &amp;&amp; export PATH=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"$HOME/.cargo/bin:$PATH"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  yum-config-manager --add-repo  https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  yum -y install wget &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  cd /home &amp;&amp; wget https://go.dev/dl/go1.19.8.linux-arm64.tar.gz &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  tar -C /usr/local -xzf go1.19.8.linux-arm64.tar.gz &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  export PATH=$PATH:/usr/local/go/bin &amp;&amp; source /etc/profile &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  echo </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'export PATH=$PATH:/usr/local/go/bin\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | tee -a /etc/profile &gt; /etc/profile &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  source /etc/profile &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  yum install -y automake autoconf libtool make gcc gcc-c++ rsync git &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  cp /usr/share/zoneinfo/${TZ} /etc/localtime &amp;&amp; echo ${TZ} &gt; /etc/timezone &amp;&amp; \\</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.06,words:317},t:"制作镜像编译kata",y:"a"}}],["/posts/kubernetes/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85kubernetes.html",{loader:()=>n.e(6028).then(n.bind(n,5695)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>使用kubeadm搭建kubenertes环境</p>\n</blockquote>\n<h3>一、环境准备</h3>\n<p>CentOS 7.6 64bit 2核 2G * 2 ( 操作系统的版本至少在7.5以上 )</p>\n<ul>\n<li><a href="https://v1-26.docs.kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener noreferrer">1.环境准备之 kubernetes v1.26 CRI</a></li>\n<li><a href="https://v1-26.docs.kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/" target="_blank" rel="noopener noreferrer">2.使用部署工具kubeadm安装 kubernetes v1.26</a></li>\n</ul>',r:{minutes:43.71,words:13112},t:"如何安装kubernetes",y:"a"}}],["/posts/kubernetes/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0node%E8%8A%82%E7%82%B9.html",{loader:()=>n.e(7596).then(n.bind(n,24)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>如何使用kubeadm在master节点，然后在裸机centos安装节点环境(containerd\\runc\\cni)，使用kubeadm加入节点，并且配置kubectl环境</p>\n</blockquote>\n<h3>1.master节点生成token</h3>\n<p><a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-token/" target="_blank" rel="noopener noreferrer">setup-tools/kubeadm/kubeadm-token/</a>\n<a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-join/" target="_blank" rel="noopener noreferrer">setup-tools/kubeadm/kubeadm-join/</a></p>',r:{minutes:.65,words:195},t:"如何添加node节点",y:"a"}}],["/posts/kubernetes/%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8.html",{loader:()=>n.e(9939).then(n.bind(n,2105)),meta:{c:["kubernetes"],g:["kubernetes"],e:"<h3>一、什么是安全容器</h3>\n<h4>1.概念</h4>\n<p>安全容器是一种为应用程序提供高度隔离和安全性的技术，它可以控制应用程序访问系统资源和数据的权限，并提供虚拟化，使应用程序能够在隔离的环境中运行。安全容器的概念最早是由 FreeBSD 操作系统的开发者 Jails 提出的，他们在 2000 年左右将这一概念引入 FreeBSD 操作系统。后来，Linux 容器技术发展起来后，安全容器概念也逐渐被引入其中。</p>\n<h4>2.kubenertes</h4>\n<p>目前k8s或者docker底层容器，通常是依赖于runc，而runc的资源隔离方案底层是 Linux 容器技术。它利用 Linux 内核提供的一些隔离机制，如 namespace、cgroup、seccomp等。具体来说，namespace 用于隔离应用程序的进程空间、网络、文件系统等，cgroup 用于限制应用程序的资源使用，seccomp 用于限制应用程序对系统调用的访问。runc 利用这些机制，将应用程序运行在一个隔离的环境中，从而提高应用程序的安全性和可靠性。但在实际运行中，仍是由宿主机向容器直接提供网络、存储、计算等资源，然而容器的安全性可以概括为两点： a.不会对主机造成影响。b.不会对其他容器造成影响。Docker的不安全表现在共用内核问题、Namespace还不够完善。具体表现：</p>",r:{minutes:21.46,words:6439},t:"安全容器",y:"a"}}],["/posts/kubernetes/%E7%94%A8CNI%E7%BB%99docker%E5%AE%B9%E5%99%A8%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C.html",{loader:()=>n.e(8769).then(n.bind(n,6486)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>使用docker创建无网络的容器，然后使用CNI插件手动分配网卡和网桥等</p>\n</blockquote>\n<h3>1.安装docker和cni plugins</h3>\n<ul>\n<li>docker</li>\n<li>cni plugins</li>\n</ul>\n<p><a href="https://github.com/containernetworking/cni/blob/main/README.md" target="_blank" rel="noopener noreferrer">本文参考手册CNI README.md</a></p>\n<h3>2.脚本创建网络命名空间并分配网络quickStart</h3>',r:{minutes:4.23,words:1268},t:"用CNI给docker容器分配网络",y:"a"}}],["/posts/kubernetes/%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4.html",{loader:()=>n.e(1365).then(n.bind(n,7144)),meta:{c:["docker"],g:["docker"],e:'<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># ip link add &lt;interface_name&gt; type &lt;interface_type&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> eth0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> vlan</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.3,words:91},t:"网络常用命令",y:"a"}}],["/posts/kubernetes/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7telepresence.html",{loader:()=>n.e(2214).then(n.bind(n,56)),meta:{c:["kubernetes"],g:["telepresence"],e:'<h3>1.常用命令</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>telepresence version</span></span>\n<span class="line"><span>telepresence connect</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.71,words:212},t:"调试工具telepresence",y:"a"}}],["/posts/mongodb/Mongo%E9%9B%86%E7%BE%A4.html",{loader:()=>n.e(981).then(n.bind(n,1407)),meta:{e:"\n<h1>mongo集群模式</h1>\n<p>MongoDB 有三种集群部署模式，分别为主从复制（Master-Slaver）、副本集（Replica Set）和分片（Sharding）模式。</p>\n<p>Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。</p>\n<p>Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。</p>\n<p>Sharding模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。</p>",r:{minutes:3.62,words:1086},t:"mongodb集群",y:"a"}}],["/posts/linux/cpu%E6%9E%B6%E6%9E%84.html",{loader:()=>n.e(9503).then(n.bind(n,2267)),meta:{c:["linux"],g:["Linux"],e:'<h3>CPU两大派系</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. X86、AMD64、X86-64</span></span>\n<span class="line"><span>2. ARM、ARM-V8、AArch64</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.65,words:195},t:"CPU架构",y:"a"}}],["/posts/linux/float%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6.html",{loader:()=>n.e(3902).then(n.bind(n,4887)),meta:{c:["linux"],g:["Linux"],e:'<p><a href="https://zhuanlan.zhihu.com/p/375156201" target="_blank" rel="noopener noreferrer">float浮点数精度丢失问题分析</a></p>\n<blockquote>\n<p>整型是用的二进制存储数据，保留一个符号位(unsigned就没有)</p>\n</blockquote>\n<blockquote>\n<p>浮点数则用的是科学计数法存储数据</p>\n</blockquote>\n<h3>float同样也使用4字节存储，但除了整数外还能够存储小数位，并且表示的范围比int还要更大，怎么做到的？</h3>',r:{minutes:.53,words:158},t:"float浮点精度",y:"a"}}],["/posts/linux/linux%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E5%AF%86%E9%92%A5.html",{loader:()=>n.e(6200).then(n.bind(n,7901)),meta:{e:'\n<h3>一、本地机器（创建公钥私钥）</h3>\n<ol>\n<li>进入密钥存储路径</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo mkdir -p ~/.ssh</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>cd ~/.ssh</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 输入执行后指定文件名为 my_linux 然后一路回车</span></span>\n<span class="line"><span>ssh-keygen -t rsa</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.11,words:333},t:"Linux服务器SSH密钥",y:"a"}}],["/posts/linux/Linux%E7%BB%93%E6%9E%84%E7%BB%84%E6%88%90.html",{loader:()=>n.e(9958).then(n.bind(n,8926)),meta:{e:'\n<blockquote>\n<p>Linux的文件系统目录结构理解，从内核到应用程序大致组成</p>\n</blockquote>\n<h3>一、操作系统结构图</h3>\n<ol>\n<li>Linux系统一般有四个主要部分：内核、shell、文件系统、应用程序。</li>\n</ol>\n<blockquote>\n<p>shell是系统的用户界面，提供了用户与内核进行交互操作的接口，它接收用户输入的命令并将它送到内核去执行。</p>\n</blockquote>\n<figure><img src="/images/linux系统结构.jpeg" alt="系统结构" tabindex="0" loading="lazy"><figcaption>系统结构</figcaption></figure>',r:{minutes:1.46,words:437},t:"结构组成",y:"a"}}],["/posts/linux/lsof%E5%91%BD%E4%BB%A4.html",{loader:()=>n.e(7882).then(n.bind(n,7332)),meta:{e:'\n<blockquote>\n<p>lsof 查看进程打开了多少个文件或者网络套接字</p>\n</blockquote>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> aux</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> openvswitch</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查询进程ID为65191的进程打开的文件或网络套接字的命令</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lsof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 65191</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看进程打开了多少个文件或者网络套接字</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lsof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 21764</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">COMMAND(进程名称</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) PID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">进程号</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) USER(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">进程拥有者</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)   FD(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件描述符</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)    TYPE(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件类型</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) DEVICE(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">设备或者文件系统的信息</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) SIZE/OFF(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件的大小</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)  NODE(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件的节点编号</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) NAME(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件的路径和名称</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              cwd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">当前工作目录</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">     4096</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              rtd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">根目录</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)       </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">     4096</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              txt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 16136816</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   1820044</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/sbin/ovs-vswitchd</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  1531880</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2546</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/libc-2.28.so</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   724008</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2550</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/libm-2.28.so</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    68152</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2562</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/librt-2.28.so</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   136544</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2558</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/libpthread-2.28.so</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    67640</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    332375</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/libatomic.so.1.2.0</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   204088</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2539</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/ld-2.28.so</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.38,words:713},t:"lsof",y:"a"}}],["/posts/linux/rpm.html",{loader:()=>n.e(9642).then(n.bind(n,20)),meta:{e:'\n<ol>\n<li>如何安装rpm包</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 其中，-i 表示安装（install），-v 表示显示详细信息，-h 表示显示进度条。包名可以是绝对路径或相对路径，可以自动补全</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -ivh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 包名.rpm</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 卸载</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 包名</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.38,words:115},t:"RPM",y:"a"}}],["/posts/linux/uname.html",{loader:()=>n.e(9119).then(n.bind(n,4678)),meta:{e:'\n<h3>一、实例</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-33D71DFC home]# uname -a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Linux</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> k8s-master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 4.19.90-23.4.v2101.ky10.aarch64</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #1 SMP Wed Mar 3 15:41:26 CST 2021 aarch64 aarch64 aarch64 GNU/Linux</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">操作系统内核版本号:4.19.90-23.4.v2101.ky10.aarch64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">处理器架构:aarch64</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.54,words:163},t:"uname",y:"a"}}],["/posts/linux/%E4%BA%8C%E8%BF%9B%E5%88%B6.html",{loader:()=>n.e(3746).then(n.bind(n,303)),meta:{c:["linux"],g:["Linux"],e:'\n<h3>整数A和B如何通过移位运算判定大小</h3>\n<div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 通过符号位</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func compare(a, b int) string {</span></span>\n<span class="line"><span>\tc := a - b</span></span>\n<span class="line"><span>\tz := (unsafe.Sizeof(c)-1)*8 + 7</span></span>\n<span class="line"><span>\td := c &gt;&gt; z</span></span>\n<span class="line"><span>\tl := []string{"b大", "a大"}</span></span>\n<span class="line"><span>\treturn l[d+1]</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.22,words:665},t:"二进制",y:"a"}}],["/posts/linux/%E5%8F%91%E8%A1%8C%E7%89%88%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html",{loader:()=>n.e(4180).then(n.bind(n,7504)),meta:{e:'\n<blockquote>\n<p>Linux的各个发行版本和各种包管理工具有什么区别和联系</p>\n</blockquote>\n<h3>一、发行版本关系图</h3>\n<figure><img src="/images/linux发行版.png" alt="linux发行版" tabindex="0" loading="lazy"><figcaption>linux发行版</figcaption></figure>\n<h3>二、 包管理工具</h3>\n<ol>\n<li>dpkg (Ubuntu、Debian)</li>\n<li>apt (Ubuntu、Debian)</li>\n<li>rpm (RHEL、CentOS)</li>\n<li>yum (CentOS6、CentOS7)</li>\n<li>dnf (RHEL8、CentOS8)</li>\n<li>apt-get,apt的旧版本</li>\n</ol>',r:{minutes:.41,words:123},t:"发行版和包管理工具",y:"a"}}],["/posts/linux/%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB.html",{loader:()=>n.e(6934).then(n.bind(n,3940)),meta:{e:'<p><a href="https://cloud.tencent.com/developer/article/1688327" target="_blank" rel="noopener noreferrer">堆和栈的区别</a></p>\n<h3>关键词</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>栈区(stack)</span></span>\n<span class="line"><span>堆区(heap)</span></span>\n<span class="line"><span>全局区(静态区)(static)</span></span>\n<span class="line"><span>文字常量区</span></span>\n<span class="line"><span>程序代码区</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.43,words:130},t:"堆和栈的区别",y:"a"}}],["/posts/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",{loader:()=>n.e(5822).then(n.bind(n,5821)),meta:{c:["linux"],g:["Linux"],e:'\n<h3>1.端口的TCP连接</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 可以看到端口的访问情况</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netstat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -an</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \':19201\'</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> :::19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                :::</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">*</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                    LISTEN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">     </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.201.62.65:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      10.201.62.63:42062</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      TIME_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.201.62.65:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      10.201.62.63:42036</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      TIME_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51340</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51344</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51350</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.201.62.65:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      10.201.62.63:42082</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      TIME_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51342</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51346</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51348</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51356</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.63,words:489},t:"常用命令",y:"a"}}],["/posts/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html",{loader:()=>n.e(5428).then(n.bind(n,5535)),meta:{e:"<p>计算机系统\n进程\n概念\n进程是程序在执行过程中的一个实例。\n静态代码文件经过编译后生成二进制可执行文件，当我们运行这个可以执行文件后，CPU会执行程序中的每一条指令，这个运行中的程序，就称为进程\n状态\n7 种状态\n创建\n进程被创建时的状态\n就绪\n可运行，由于其他进程处于运行状态而暂时停止运行\n运行\n当前进程占用 CPU\n阻塞\n该进程正在等待某一事件发生（如等待输入/输出操作的完成）而暂时停止运\n结束\n进程从系统中消失时的状态\n挂起（两种挂起状态）\n描述进程没有占用实际的物理内存空间的情况，被换出到硬盘，这个状态就是挂起状态\n就绪挂起\n进程在外存（硬盘），但只要进入内存，即刻立刻运行\n阻塞挂起\n进程在外存（硬盘）并等待某个事件的出现；\n3中情况会被挂起\n系统行为\n进程所使用的内存空间不在物理内存\n用户行为\n通过 sleep 让进程间歇性挂起，其工作原理是设置一个定时器，到期后唤醒进程\n用户希望挂起一个程序的执行，比如在 Linux 中用 Ctrl+Z 挂起进程；\n状态转换\n状态流转图</p>",r:{minutes:27.02,words:8106},t:"",y:"a"}}],["/posts/linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html",{loader:()=>n.e(815).then(n.bind(n,9133)),meta:{c:["linux"],g:["Linux"],e:'\n<h3>mac 设置环境变量</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>export KUBE_GIT_VERSION=1.1.1</span></span>\n<span class="line"><span>export KUBE_GIT_VERSION=$KUBE_GIT_VERSION:1.1.1</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 查看当前环境变量</span></span>\n<span class="line"><span>echo $KUBE_GIT_VERSION</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 查看所有环境变量</span></span>\n<span class="line"><span>env</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.97,words:291},t:"环境变量",y:"a"}}],["/posts/linux/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA.html",{loader:()=>n.e(8594).then(n.bind(n,1973)),meta:{c:["linux"],g:["Linux"],e:'\n<blockquote>\n<p>简单学习磁盘分区是什么，如何使用，常用的命令有哪些</p>\n</blockquote>\n<h5>1. lsblk (List Block Devices) 命令解释：</h5>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. NAME：块设备名称。</span></span>\n<span class="line"><span>2. SIZE：块设备的容量大小。</span></span>\n<span class="line"><span>3. TYPE：块设备类型，如磁盘（disk）或分区（part）。</span></span>\n<span class="line"><span>4. MOUNTPOINT：设备被挂载的挂载点。</span></span>\n<span class="line"><span>5. MODEL：硬件设备的制造商及型号。</span></span>\n<span class="line"><span>6. FSTYPE：文件系统类型，比如ext4或NTFS。</span></span>\n<span class="line"><span>7. UUID：块设备的唯一标识符。</span></span>\n<span class="line"><span>8. LABEL：块设备的卷标或文件系统标签。</span></span>\n<span class="line"><span>9. RO：块设备是否为只读。</span></span>\n<span class="line"><span>10. RM：块设备是否可以通过软件进行移除。</span></span>\n<span class="line"><span>11. PARTTYPE：如果块设备是分区，则该字段会显示分区类型。</span></span>\n<span class="line"><span>12. PARTLABEL：如果块设备是分区，则该字段会显示分区卷标或文件系统标签。</span></span>\n<span class="line"><span>13. PARTUUID：如果块设备是分区，则该字段会显示分区的唯一标识符。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>这些指标可以帮助用户了解系统上的块设备，包括设备名称、容量、挂载点、文件系统类型等，从而更好地管理和使用系统。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>[root@k8s-master network-scripts]# lsblk</span></span>\n<span class="line"><span>NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span></span>\n<span class="line"><span>sr0     11:0    1 203.6M  0 rom  </span></span>\n<span class="line"><span>vda    253:0    0    60G  0 disk </span></span>\n<span class="line"><span>└─vda1 253:1    0    60G  0 part /</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:9.19,words:2758},t:"磁盘分区",y:"a"}}],["/posts/linux/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9.html",{loader:()=>n.e(7476).then(n.bind(n,6086)),meta:{d:1684435212e3,l:"2023年5月19日",c:["linux"],g:["linux"],e:"磁盘内存空间不足，但是磁盘的大小是足够的，需要重新分区并且挂载",r:{minutes:4.16,words:1247},t:"磁盘扩容",y:"a"}}],["/posts/linux/%E9%9B%B6%E6%8B%B7%E8%B4%9D.html",{loader:()=>n.e(1121).then(n.bind(n,8446)),meta:{e:"\n<blockquote>\n<p>零拷贝（Zero-copy）是一种计算机操作技术，主要减少数据在不同存储区域之间的复制次数，提高数据传输效率.</p>\n</blockquote>\n<h3>一、关键术语</h3>\n<blockquote>\n<p>原来获取数据: <code>CPU &gt;&gt; 磁盘控制器 &gt;&gt; 内核缓冲区</code></p>\n</blockquote>\n<blockquote>\n<p>DMA直接内存访问技术: <code>DMA控制器 &gt;&gt; 磁盘控制器 &gt;&gt; 内核缓冲区</code></p>\n</blockquote>\n<ol>\n<li>用户缓冲区</li>\n</ol>",r:{minutes:1.77,words:531},t:"零拷贝",y:"a"}}],["/posts/mysql/MVCC%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html",{loader:()=>n.e(9188).then(n.bind(n,9323)),meta:{e:'\n<h3>InnoDB的RC和RR的快照读有什么不同</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Read View的生成时机不同导致的</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>RC 每次快照读都会新生成一个快照和Read View</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>RR 事务开始后在第一次快照读创建Read View后面所有的快照读都是同一个</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.46,words:138},t:"MVCC实现机制",y:"a"}}],["/posts/mysql/MySQL%E5%88%86%E5%B1%82.html",{loader:()=>n.e(6746).then(n.bind(n,1768)),meta:{e:'\n<p><a href="https://www.cnblogs.com/mululu/p/14457394.html" target="_blank" rel="noopener noreferrer">西瓜汁拌面-mysql分层、存储引擎、解析原理</a></p>\n<h3>分层四层</h3>\n<ol>\n<li>连接（服务器与客户端建立连接）</li>\n<li>服务（提供select\\insert等接口、提供SQL优化器）</li>\n<li>引擎</li>\n<li>存储</li>\n</ol>\n<p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',r:{minutes:.22,words:66},t:"MySQL分层",y:"a"}}],["/posts/mysql/MySQL%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(8812).then(n.bind(n,7113)),meta:{e:"\n<h2>一、建表</h2>\n<h3>强制</h3>\n<ol>\n<li>是与否字段</li>\n<li>表名、字段名</li>\n<li>表名不使用复数</li>\n<li>禁用保留字</li>\n<li>索引名</li>\n<li>小数类型</li>\n<li>字符串类型。</li>\n<li>varchar length &lt; 5000</li>\n<li>表必备三字段 (要记录时区信息，那么类型设置为 timestamp)</li>\n<li>物理\\逻辑删除</li>\n</ol>\n<h2>二、索引</h2>\n<h3>强制</h3>\n<ol>\n<li>唯一特性字段</li>\n<li>三表join &amp;&amp; 字段类型</li>\n<li>varchar索引长度</li>\n<li>左/全模糊匹配</li>\n</ol>",r:{minutes:.72,words:216},t:"MySQL规范",y:"a"}}],["/posts/mysql/MySQL%E9%9B%86%E7%BE%A4.html",{loader:()=>n.e(4171).then(n.bind(n,2885)),meta:{e:'\n<ol>\n<li>\n<p>一主多从，主库更新和写入，从库只负责读。 <a href="https://blog.51cto.com/u_15127571/2715035" target="_blank" rel="noopener noreferrer">博客</a></p>\n</li>\n<li>\n<p>官方推荐 Docker Compose 一键搭建一主多从 <a href="https://registry.hub.docker.com/r/bitnami/mysql" target="_blank" rel="noopener noreferrer">bitnami/mysql</a></p>\n</li>\n<li>\n<p>kubernetes集群搭建MySQL集群</p>\n</li>\n</ol>',r:{minutes:.57,words:170},t:"MySQL集群方案",y:"a"}}],["/posts/mysql/SQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3.html",{loader:()=>n.e(53).then(n.bind(n,7145)),meta:{e:'\n<ol>\n<li>MySQL驱动 [GO]</li>\n<li>数据库连接池 [MySQL自身架构体系的连接池]</li>\n<li>SQL接口</li>\n<li>查询解析器 [SQL 已经被解析成 MySQL 认识的样子]</li>\n<li>MySQL查询优化器</li>\n<li>存储引擎</li>\n<li>Buffer Pool</li>\n<li>日志undo log\\redo log\\bin log</li>\n</ol>\n<p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',r:{minutes:.27,words:81},t:"执行过程详解",y:"a"}}],["/posts/mysql/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",{loader:()=>n.e(5401).then(n.bind(n,3211)),meta:{e:'\n<h3>Explain性能分析看哪些字段</h3>\n<h3>MySQL分层有哪些，各个有什么作用</h3>\n<h3>如何优化</h3>\n<ol>\n<li>数据请求量(limit限制行数和限制字段数量)</li>\n<li>减少服务端扫描的行数(explain rows)</li>\n<li>切分大查询(同一个process阻塞其他操作)（普通的select是不会加行级锁的）<a href="https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E8%A1%8C%E7%BA%A7%E9%94%81" target="_blank" rel="noopener noreferrer">xiaolincoding行锁</a></li>\n<li>分解大连接查询</li>\n</ol>',r:{minutes:.39,words:117},t:"性能优化",y:"a"}}],["/posts/network/DNS%E9%85%8D%E7%BD%AE.html",{loader:()=>n.e(7091).then(n.bind(n,5030)),meta:{c:["network"],g:["network"],e:'<h3>一、什么是DNS</h3>\n<ol>\n<li>DNS（Domain Name System）是一个用于将域名转换为与之关联的IP地址的分布式系统。</li>\n</ol>\n<p>在Linux上，有几个与DNS相关的配置：</p>\n<h3>二、Linux与DNS相关命令</h3>\n<ol>\n<li><code>/etc/resolv.conf</code>文件：这个文件包含了DNS服务器的配置信息，如名称服务器的IP地址、搜索域等。</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 未配置DNS Server的</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-62BEC048 ~]# cat /etc/resolv.conf</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Generated by NetworkManager</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 已经配置了DNS Server的</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-62BEC048 ~]# cat /etc/resolv.conf</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Generated by NetworkManager</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nameserver</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 114.114.114.114</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:17.91,words:5373},t:"DNS配置",y:"a"}}],["/posts/network/ipip%E9%9A%A7%E9%81%93%E9%80%9A%E8%AE%AF.html",{loader:()=>n.e(5762).then(n.bind(n,1541)),meta:{c:["network"],g:["network"],e:'<h3>一、概念</h3>\n<ol>\n<li>IP 隧道</li>\n</ol>\n<p>Linux 原生支持多种三层隧道，其底层实现原理都是基于 tun 设备。</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看tunnel操作指引</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tunnel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> help</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[ mode { ipip | gre | sit | isatap | vti } ] [ remote ADDR ] [ local ADDR ]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.13,words:638},t:"ipip隧道通讯",y:"a"}}],["/posts/network/NAT%E9%85%8D%E7%BD%AE%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE.html",{loader:()=>n.e(5189).then(n.bind(n,7886)),meta:{c:["network"],g:["network"],e:"<blockquote>\n<p>使用NAT实现数据转发其中包括DNAT和SNAT实验实现公网访问后转发到局域网的服务以及从内部网络命名空间配置SNAT访问公网服务</p>\n</blockquote>\n<h3>一、概念</h3>\n<h5>1.NAT</h5>\n<p>NAT（网络地址转换）是一种网络技术，一般用于局域网和公网之间IP地址转换，常用iptables实现。</p>\n<h5>2.DNAT</h5>\n<p>DNAT（目标网络地址转换）是NAT的一种形式，它将目标IP地址和端口转换为不同的IP地址和端口，通常用于将外部请求转发到内部网络中的特定服务器上。一般通过公网IP进来公网网卡的数据包更改目的ip或端口访问到内部服务。</p>",r:{minutes:9.37,words:2811},t:"NAT配置公网访问",y:"a"}}],["/posts/network/tcp%E7%B2%98%E5%8C%85.html",{loader:()=>n.e(1395).then(n.bind(n,9401)),meta:{c:["network"],g:["network"],e:'<blockquote>\n<p>理解什么是tcp粘包以及如何解决粘包的问题</p>\n</blockquote>\n<h1>tcp 粘包</h1>\n<p><a href="https://www.topgoer.com/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/socket%E7%BC%96%E7%A8%8B/TCP%E9%BB%8F%E5%8C%85.html" target="_blank" rel="noopener noreferrer">TCP黏包</a></p>\n<h3>什么是粘包</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>多次 net.Conn.Write 数据在服务端被当成同一份数据解析</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.63,words:188},t:"tcp粘包",y:"a"}}],["/posts/network/tcp%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%8A%93%E5%8C%85.html",{loader:()=>n.e(8043).then(n.bind(n,3172)),meta:{c:["network"],g:["network"],e:'<h3>一、抓包理解tcp连接</h3>\n<ol>\n<li>使用golang做tcp网络编程创建client &amp;&amp; server</li>\n<li>使用tcpdump监听客户端和服务端的连接情况</li>\n</ol>\n<h5>1.tcpdump</h5>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># client</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tcpdump</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lo0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> localhost</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dst</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 9292</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -n</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># server</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tcpdump</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lo0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> localhost</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> src</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 9292</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -n</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.7,words:1110},t:"TCP连接与抓包",y:"a"}}],["/posts/network/veth-pair%E5%92%8Chost%E7%BD%91%E6%A1%A5%E9%80%9A%E4%BF%A1.html",{loader:()=>n.e(9582).then(n.bind(n,8197)),meta:{c:["network"],g:["network"],e:'<blockquote>\n<p>使用 host bridge 和 veth pair 实现两个网络命名空间下的网卡通信</p>\n</blockquote>\n<h3>1.网络命名空间创建</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> list</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.52,words:457},t:"veth-pair和host网桥通信",y:"a"}}],["/posts/network/veth-pair%E5%92%8Covs-bridge%E9%80%9A%E8%AE%AF.html",{loader:()=>n.e(5228).then(n.bind(n,2887)),meta:{c:["network"],g:["network"],e:'<blockquote>\n<p>使用 openvswitch bridge 和 veth pair 实现两个网络命名空间下的网卡通信</p>\n</blockquote>\n<h3>创建 veth-pair 和 ovs-br</h3>\n<blockquote>\n<p>OVS 是第三方开源的 Bridge，功能比 Linux Bridge 要更强大，对于同样的实验，我们用 OVS 来看看是什么效果</p>\n</blockquote>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用 ovs 提供的命令创建一个 ovs bridge</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-vsctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add-br</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-br</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看 ovs bridge</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-vsctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> show</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建两对 veth-pair</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用于创建一个虚拟以太网接口ovs-veth-a，并生成一个与之相连的对等接口ovs-veth-b</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用于连接Open vSwitch网络交换机</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> veth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> peer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-b</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> veth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> peer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-d</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将 veth-pair 两端分别加入到 ns 和 ovs bridge 中</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-vsctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add-port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-br</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-b</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ifconfig</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-b</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-vsctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add-port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-br</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-d</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 给 ns 中的 veth 配置 IP 并启用</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.1.1.2/24</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.1.1.3/24</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-c</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># veth0 ping veth1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ping</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10.1.1.3</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">PING</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10.1.1.3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (10.1.1.3) 56(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">84</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) bytes of data.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.1.1.3:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.586</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ms</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.1.1.3:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.066</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ms</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.55,words:465},t:"veth-pair和ovs-bridge通讯",y:"a"}}],["/posts/network/VPN%E9%80%9A%E8%AE%AF.html",{loader:()=>n.e(6528).then(n.bind(n,2127)),meta:{c:["network"],g:["network"],e:"<h3>一、概念</h3>\n<h5>1.什么是TUN设备</h5>\n<p>在计算机网络中，TUN 与 TAP 是操作系统内核中的虚拟网络设备。</p>\n<ul>\n<li>\n<p>tun是网络层的虚拟网络设备，可以收发第三层数据报文包，如IP封包，因此常用于一些点对点IP隧道等。</p>\n</li>\n<li>\n<p>tap是链路层的虚拟网络设备，等同于一个以太网设备，它可以收发第二层数据报文包，如以太网数据帧。Tap最常见的用途就是做为虚拟机的网卡，因为它和普通的物理网卡更加相近，也经常用作普通机器的虚拟网卡。</p>\n</li>\n</ul>\n<p>用户空间的程序可以通过 TUN/TAP 设备发送数据。常见于基于TUN/TAP设备实现的VPN。比如VPN软件在用户空间创建一个TUN/TAP设备，并将其配置为将网络流量导入到VPN隧道中。然后，VPN软件可以通过TUN/TAP设备读取和写入数据，将它们加密并通过隧道发送到VPN服务器。在服务器端，VPN软件将收到的数据解密并通过TUN/TAP设备发送到网络接口，从而实现了VPN连接。</p>",r:{minutes:5.98,words:1794},t:"VPN通讯",y:"a"}}],["/posts/network/write_broken_pipe.html",{loader:()=>n.e(1617).then(n.bind(n,6366)),meta:{c:["network"],g:["network"],e:'\n<ul>\n<li><a href="https://blog.csdn.net/cljdsc/article/details/124134531" target="_blank" rel="noopener noreferrer">golang服务报错: write: broken pipe</a></li>\n<li><a href="https://piaohua.github.io/post/golang/20220731-connection-broken-pipe/" target="_blank" rel="noopener noreferrer">重现broken pipe: 讲解很清晰</a></li>\n<li><a href="https://reid00.github.io/posts/gin-error-connection-write-broken-pipe/" target="_blank" rel="noopener noreferrer">Gin Error Connection Write Broken Pipe</a></li>\n<li><a href="https://zyun.360.cn/blog/?p=1634" target="_blank" rel="noopener noreferrer">nginx\\api-gateway(golang server)\\backend broken pipe</a></li>\n<li><a href="https://testerhome.com/articles/23296" target="_blank" rel="noopener noreferrer">记一次connection-reset-by-peer问题定位-状态流转很详细</a></li>\n<li><a href="https://itnext.io/forcefully-close-tcp-connections-in-golang-e5f5b1b14ce6" target="_blank" rel="noopener noreferrer">如何在Golang中强制关闭TCP连接</a></li>\n<li><a href="https://www.cnblogs.com/taoshihan/p/14785384.html" target="_blank" rel="noopener noreferrer">服务端大量close_wait 和 time_wait状态</a></li>\n<li><a href="https://blog.csdn.net/EDDYCJY/article/details/120898217" target="_blank" rel="noopener noreferrer">Go 中如何强制关闭 TCP 连接</a></li>\n<li>[抓包 127.0.0.1 （loopback） 使用 tcpdump+wireshark][https://www.bbsmax.com/A/D854qmj6dE/]</li>\n<li><a href="https://huoding.com/2016/01/19/488" target="_blank" rel="noopener noreferrer">浅谈Close Wait - 写的简单明了</a></li>\n<li><a href="https://www.topgoer.com/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/socket%E7%BC%96%E7%A8%8B/socket%E5%9B%BE%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">Socket图解</a></li>\n</ul>',r:{minutes:3.83,words:1149},t:"write_broken_pipe",y:"a"}}],["/posts/network/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BD%91%E6%A1%A5.html",{loader:()=>n.e(2532).then(n.bind(n,3226)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>理解什么是网桥、路由，如何应用，了解docker的网络模型</p>\n</blockquote>\n<h3>1.网桥的创建</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 安装 bridge-utils 包，它包含了配置网桥所需的工具</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bridge-utils</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建网桥</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo brctl addbr &lt;bridge-name&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> brctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addbr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> my-net</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将物理接口添加到网桥中</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo brctl addif &lt;bridge-name&gt; &lt;physical-interface&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> brctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addif</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> my-net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lo</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将名为 "my-net" 的网络接口（network interface）启用（up）</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo ip link set dev &lt;bridge-name&gt; up</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> my-net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># ifconfig 可以查看到 my-net 网桥</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看网桥的状态以及连接到网桥上的接口</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> brctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> show</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:10.88,words:3265},t:"什么是网桥",y:"a"}}],["/posts/network/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GRE%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1.html",{loader:()=>n.e(1534).then(n.bind(n,7597)),meta:{c:["network"],g:["network"],e:'<h3>一、概念</h3>\n<ol>\n<li>什么是VXLAN</li>\n</ol>\n<p>一种网络虚拟化技术</p>\n<ol start="2">\n<li>GRE隧道是什么</li>\n</ol>\n<p>一种隧道协议。（将原始的数据包封装在一个新的IP头中实现跨越多个网络端口传输）</p>\n<ol start="3">\n<li>两者之间的关系是什么</li>\n</ol>\n<p>在VXLAN网络中，通过使用GRE隧道技术可以实现虚拟网络之间的隔离。</p>\n<ol start="4">\n<li>原理</li>\n</ol>\n<p>GRE协议将原始的数据包封装在一个新的IP头中，使得数据包能够跨越多个网络端口传输。（借助IP协议中的IP数据报文来传输数据）</p>',r:{minutes:2.11,words:633},t:"如何使用GRE隧道通信",y:"a"}}],["/posts/network/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BAvxlan%E7%BD%91%E7%BB%9C.html",{loader:()=>n.e(8098).then(n.bind(n,4577)),meta:{c:["network"],g:["network"],e:'<h3>一、概念</h3>\n<ol>\n<li>什么是VXLAN</li>\n</ol>\n<p>一种网络虚拟化技术。</p>\n<ol start="2">\n<li>GRE隧道是什么</li>\n</ol>\n<p>一种隧道协议，将原始的数据包封装在一个新的IP头中实现跨越多个网络端口传输。</p>\n<ol start="3">\n<li>两者之间的关系是什么</li>\n</ol>\n<p>在VXLAN网络中，通过使用GRE隧道技术可以实现虚拟网络之间的隔离。</p>\n<ol start="4">\n<li>原理</li>\n</ol>\n<p>GRE协议将原始的数据包封装在一个新的IP头中，使得数据包能够跨越多个网络端口传输，借助IP协议中的IP数据报文来传输数据。要实现VXLAN网络隔离，需要使用Linux中的网络命名空间来创建多个隔离的虚拟网络环境，并将VXLAN设备连接到相应的命名空间。</p>',r:{minutes:3.54,words:1063},t:"如何构建vxlan网络",y:"a"}}],["/posts/network/%E7%BD%91%E7%BB%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html",{loader:()=>n.e(9274).then(n.bind(n,1487)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>来个network namespace和veth pair的QuickStart</p>\n</blockquote>\n<h3>一、什么是 Network Namespace</h3>\n<ol>\n<li>Network Namespace 是用于在Linux系统中创建虚拟网络的一种机制；</li>\n<li>可将物理主机划分为多个逻辑上独立的网络空间(独立的网络设备、IP地址、路由表、防火墙等)；</li>\n<li>常用于虚拟机、容器等技术；</li>\n</ol>\n<h3>二、如何创建和使用 Network Namespace</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 对于每个 Network Namespace 来说，它会有自己独立的网卡、路由表、ARP 表、iptables 等和网络相关的资源</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 安装iproute</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> iproute</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看当前网络命名空间</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> list</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建一个新的网络名称空间</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /var/run/netns/</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Network Namespace 中执行命令使用 `ip netns exec` 子命令</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 新创建的 Network Namespace 中会默认创建一个 lo 回环网卡，此时网卡处于关闭状态</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addr</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">1:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lo:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">LOOPBAC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">K&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">mtu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 65536</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> qdisc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> noop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> state</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> DOWN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> group</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> default</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> qlen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1000</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    link/loopback</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 00:00:00:00:00:00</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> brd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 00:00:00:00:00:00</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 由于lo环回网卡关闭状态</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ping</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 127.0.0.1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ping:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> connect:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 网络不可达</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 启用lo环回网卡</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 启用后可以ping通</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ping</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 127.0.0.1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">PING</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 127.0.0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (127.0.0.1) 56(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">84</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) bytes of data.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.039</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ms</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.038</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ms</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.32,words:697},t:"网络命名空间",y:"a"}}],["/posts/network/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80.html",{loader:()=>n.e(4212).then(n.bind(n,2709)),meta:{c:["network"],g:["network"],e:"<h3>一、网桥</h3>\n<ol>\n<li>网络设备，连接多个网络。</li>\n<li>转发不同网络之中的数据流。</li>\n<li>工作在OSI模型的第二层：数据链路层，通过物理地址（MAC地址）识别网络设备来传递数据包</li>\n</ol>\n<blockquote>\n<p>可以减少网络冲突</p>\n</blockquote>\n<h3>二、网段</h3>\n<ol>\n<li>网络地址范围 (表示方式：IP地址和子网掩码)</li>\n<li>同一网段的设备可互相通信，不同网段需要路由器等设备才可痛心</li>\n</ol>\n<h3>三、iptable是什么</h3>\n<ol>\n<li>一个防火墙工具</li>\n<li>控制网络数据包的流动</li>\n</ol>",r:{minutes:7.1,words:2130},t:"网络基础",y:"a"}}],["/posts/nginx/%E4%BC%9A%E8%AF%9D%E7%B2%98%E6%80%A7.html",{loader:()=>n.e(9989).then(n.bind(n,6396)),meta:{c:["Nginx"],g:["Nginx"],e:'<blockquote>\n<p>配置Nginx实现负载均衡转发请求和保持会话粘性</p>\n</blockquote>\n<h3>一、如何配置负载均衡同一个域名均衡给多个服务</h3>\n<h5>1.开启多个服务端</h5>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx-test</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx-test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  --network-alias</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> one</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  435861851/gin:v0.0.1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx-test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  --network-alias</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> two</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  hashicorp/http-echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -text=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello world"</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.95,words:886},t:"会话粘性",y:"a"}}],["/posts/nginx/%E5%9F%9F%E5%90%8D%E6%8C%87%E5%90%91%E9%85%8D%E7%BD%AE.html",{loader:()=>n.e(5534).then(n.bind(n,9647)),meta:{c:["Nginx"],g:["Nginx"],e:'<blockquote>\n<p>通过Nginx使用不同的域名指向不同的服务</p>\n</blockquote>\n<h3>1.配置和启动Nginx</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx-test</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.86,words:259},t:"域名指向配置",y:"a"}}],["/posts/nginx/%E5%BC%80%E5%90%AFSSL%E9%AA%8C%E8%AF%81.html",{loader:()=>n.e(4931).then(n.bind(n,6012)),meta:{c:["Nginx"],g:["Nginx"],e:'<blockquote>\n<p>如何生成SSL证书并且应用于Nginx服务开启https</p>\n</blockquote>\n<h3>1.创建证书</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cert</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:2.52,words:757},t:"开启SSL验证",y:"a"}}],["/posts/struct/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>n.e(7013).then(n.bind(n,8248)),meta:{e:'\n<h3>一、数据结构起源</h3>\n<p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。程序简单来说就是<code>程序设计  = 数据结构 + 算法</code>。</p>\n<ol>\n<li>逻辑结构</li>\n</ol>\n<p>定义: 数据对象之间数据元素之间的相互关系</p>\n<ul>\n<li>集合结构</li>\n<li>线性结构</li>\n<li>树形结构</li>\n<li>图形结构</li>\n</ul>\n<ol start="2">\n<li>物理结构</li>\n</ol>\n<ul>\n<li>顺序存储。数据在内存块上连续有序分配比如数组。</li>\n<li>链式存储。数据在内存块位置不连续但是在程序中有指针将这些串起来比如链表。</li>\n</ul>',r:{minutes:8.19,words:2457},t:"数据结构",y:"a"}}],["/posts/struct/%E6%A0%91.html",{loader:()=>n.e(3245).then(n.bind(n,792)),meta:{e:"\n<h3>一、关键概念</h3>\n<ol>\n<li>结点的度指节点拥有的子节点（注意子节点的子节点数量不算在内）的数量，比如二叉树的度就是2。</li>\n<li>树的度是指树中节点的最大度数，比如二叉树的度最大为2那树的度就是2.</li>\n<li>深度指从跟节点往子节点计算，根节点的深度是0，跟节点的子节点的深度是1，根节点的子节点的子节点的深度是2。</li>\n<li>高度指由最外面的叶子节点开始数，树叶的高度是0，树叶的父节点的高度是1。</li>\n<li>阶Order指节点的子节点数目的最大值，比如二叉树的阶就是2。</li>\n<li>关键字指标识和区分数据记录的值比如用户表中的用户ID，如<code>B+树</code>中非叶子节点中的关键字关联叶子节点数据记录的关键字。</li>\n<li>根节点指最顶端的节点。</li>\n<li>父节点</li>\n<li>子节点</li>\n<li>结点。树中的每个点有的书中也称为节点。</li>\n<li>路径。在一棵树中，一个结点到另一个结点之间的通路，称为路径。</li>\n<li>路径长度。在一条路径中，每经过一个结点，路径长度都要加1。</li>\n<li>结点的权指的是给每一个结点赋予一个新的数值，被称为这个结点的权。</li>\n<li>结点的带权路径长度：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。</li>\n</ol>",r:{minutes:7.11,words:2134},t:"树",y:"a"}}],["/posts/prometheus/alertmanager.html",{loader:()=>n.e(630).then(n.bind(n,4790)),meta:{c:["prometheus"],g:["prometheus","alertmanager"],e:'<blockquote>\n<p>使用docker和自定义指标搭建promethus服务、alertmanager服务，试用邮件告警功能</p>\n</blockquote>\n<h3>一、启动alertmanager</h3>\n<ol>\n<li>配置</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Documents/alertmanager/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Documents/alertmanager/template</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Documents/alertmanager/config.yml</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Documents/alertmanager/template/email.tmpl</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Documents/alertmanager</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:16.01,words:4802},t:"alertmanager",y:"a"}}],["/posts/prometheus/mongodb%E6%8C%87%E6%A0%87.html",{loader:()=>n.e(1967).then(n.bind(n,4603)),meta:{c:["prometheus"],g:["mongodb","prometheus"],e:'<h3>一、Go采集MongoDB指标</h3>\n<h5>1.定义prometheus指标</h5>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> tool</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    "github.com/prometheus/client_golang/prometheus"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Application</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "application"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Command</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "command"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Database</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "database"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> RequestID</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "request_id"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Status</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "status"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MongoStatusEnum</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> string</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    Success</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MongoStatusEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "success"</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    Fail</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    MongoStatusEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "fail"</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    Start</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">   MongoStatusEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "start"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    mongoHistogram</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> prometheus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">NewHistogramVec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">prometheus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">HistogramOpts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        Name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:    </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mongodb_operations_duration_seconds"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        Help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:    </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mongodb command record"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        Buckets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">float64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">},</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }, []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Database</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">RequestID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    prometheus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">MustRegister</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mongoHistogram</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> AddMetrics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">labels</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> prometheus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">speed</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> float64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    mongoHistogram</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">With</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Observe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">speed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.56,words:769},t:"mongodb指标",y:"a"}}],["/posts/prometheus/mybatis%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87.html",{loader:()=>n.e(2588).then(n.bind(n,4763)),meta:{c:["prometheus"],g:["mongodb","prometheus"],e:'<h3>一、定义各个prometheus指标</h3>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MybatisMetrics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] labelNames </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"class"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "command"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "status"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Counter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> QUERY_COUNT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Counter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mybatis_requests_total"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"total sql command."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">labelNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(labelNames).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Gauge</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> QUERY_MAX </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Gauge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mybatis_requests_max"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"run sql command latency in seconds."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">labelNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(labelNames).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Summary</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> QUERY_SUMMARY </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Summary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mybatis_latency_seconds"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Request latency in seconds."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">labelNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(labelNames)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.19,words:357},t:"mybatis监控指标",y:"a"}}],["/posts/prometheus/node_exporter%E6%8C%87%E6%A0%87.html",{loader:()=>n.e(49).then(n.bind(n,764)),meta:{c:["prometheus"],g:["prometheus","api"],e:'<blockquote>\n<p>使用docker搭建prometheus和node exporter，解释本机cpu、内存等指标查看方式，以及如何通过http api接口查看监控数据</p>\n</blockquote>\n<h3>一、本机运行node-exporter</h3>\n<ol>\n<li>启动node exporter</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 常驻进程启动</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ./node_exporter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">./node_exporter.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 2&gt;&amp;1 &amp;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看采集到的指标</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> curl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:9100/metrics</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.71,words:1413},t:"node_exporter指标",y:"a"}}],["/posts/prometheus/prometheus.html",{loader:()=>n.e(3435).then(n.bind(n,8861)),meta:{c:["prometheus"],g:["prometheus","linux"],e:'<h3>一、本地启动Prometheus</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Documents/data</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:12.1,words:3631},t:"prometheus",y:"a"}}],["/posts/prometheus/prometheus%E9%AB%98%E5%8F%AF%E7%94%A8.html",{loader:()=>n.e(7312).then(n.bind(n,6117)),meta:{c:["prometheus"],g:["prometheus"],e:"<h3>一、应用场景</h3>\n<p>HCI超融合的监控，我们的应用程序将会和主机一起打包销售，给到客户的时候启动主机，这个主机有可能是1台也有可能是3台。那么主机启动之后，监控服务随之启动,业务会暴露指标给prometheus采集,这里的prometheus如果有1台主机那么就只有1个监控服务，如果有3台主机那么就会有3个监控服务，这3台机器上面的3个prometheus的实例各自的存储是独立的。</p>\n<h3>二、需求</h3>\n<ol>\n<li>prometheus任何一台宕机，监控情况正常；</li>\n<li>prometheus独立于业务之外，监控不会影响业务，也就是在内存、磁盘等占用不会影响业务正常运行；</li>\n</ol>",r:{minutes:13.58,words:4075},t:"prometheus高可用",y:"a"}}],["/posts/prometheus/%E8%81%94%E9%82%A6%E6%9C%BA%E5%88%B6.html",{loader:()=>n.e(3661).then(n.bind(n,5147)),meta:{d:1680936012e3,l:"2023年4月8日",c:["prometheus"],g:["prometheus"],u:1,e:"<h3>一、配置热重载</h3>\n<ol>\n<li>main.main函数启动时候更改 config.LoadFile(cfg.configFile 为 config.LoadConfigFromEtcd(cfg.configFile,</li>\n<li>在 &lt;-hub (chan os.Signal) 监听的select之中添加 &lt;-etcd.Listen() 监听，有配置更改时候调用 reladConfig 函数</li>\n</ol>\n<h3>二、federation</h3>\n<ol>\n<li>docker install两个prometheus</li>\n<li>本地mac启动一个exporter暴露系统指标</li>\n<li>指定一个prometheus采集指标</li>\n<li>federation机制让另一个prometheus也采集到一样的指标</li>\n</ol>",r:{minutes:2.44,words:731},t:"联邦机制",y:"a"}}],["/posts/redis/bitmap%E4%BD%8D%E5%9B%BE.html",{loader:()=>n.e(3388).then(n.bind(n,2385)),meta:{e:'\n<p>(bitmap)[http://c.biancheng.net/redis/bitmap.html]</p>\n<h3>内存占用</h3>\n<blockquote>\n<p>位图（bitmap）同样属于 string 数据类型；512 MB 最大；</p>\n</blockquote>\n<h3>经典场景之记录签到情况</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SETBIT key offset value</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SETBIT userID(用户ID) 1(具体日期) bool(是否签到)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>一个用户一个位图</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.22,words:66},t:"bitmap位图",y:"a"}}],["/posts/redis/Blogs.html",{loader:()=>n.e(6783).then(n.bind(n,5653)),meta:{e:"\n<ol>\n<li>\n<p>存储文章内容k-v形式存储字符串(序列化内容)</p>\n</li>\n<li>\n<p>文章访问量自增 INCRBY</p>\n</li>\n<li>\n<p>文章内容访问或更改属性麻烦更换为散列 HSET key field value</p>\n</li>\n<li>\n<p>获取文章列表使用列表类型list LPUSH RPUSH LPOP RPOP</p>\n</li>\n<li>\n<p>文章的标签tags存储使用集合类型 SCARD key</p>\n</li>\n<li>\n<p>文章按照访问量排序 - 有序集合 ZCOUNT key min max</p>\n</li>\n</ol>",r:{minutes:1.53,words:459},t:"使用Redis搭建博客",y:"a"}}],["/posts/redis/cluster.html",{loader:()=>n.e(9948).then(n.bind(n,5356)),meta:{e:'\n<ol>\n<li>简介</li>\n<li>如何安装使用（linux、docker、k8s）</li>\n<li>底层原理</li>\n<li>高可用、高性能优化配置</li>\n</ol>\n<h3>go的redis客户端需要连接池吗，不是说redis是单线程的？</h3>\n<h3>参考博客</h3>\n<p><a href="https://segmentfault.com/a/1190000038771812" target="_blank" rel="noopener noreferrer">深入学习Redis之Redis Cluster</a></p>\n<h1>Full_stack_knowledge_system</h1>',r:{minutes:.24,words:72},t:"目录",y:"a"}}],["/posts/redis/Hash.html",{loader:()=>n.e(2864).then(n.bind(n,8725)),meta:{e:"\n<ol>\n<li>\n<p>获取哈希表之中所有的字段和值</p>\n</li>\n<li>\n<p>查看哈希表之中指定的Key是否存在</p>\n</li>\n<li>\n<p>删除哈希表字段Key</p>\n</li>\n<li>\n<p>哈希表的指定Key的指定字段field设置增量increment</p>\n</li>\n<li>\n<p>获取哈希表中所有字段</p>\n</li>\n<li>\n<p>设置哈希表之中Key的指定的字段field值</p>\n</li>\n</ol>\n",r:{minutes:.31,words:93},t:"Redis 哈希(hash)",y:"a"}}],["/posts/redis/Key.html",{loader:()=>n.e(8841).then(n.bind(n,6411)),meta:{e:"\n<ol>\n<li>\n<p>删除Key</p>\n</li>\n<li>\n<p>检查Key是否存在</p>\n</li>\n<li>\n<p>设置Key过期时间</p>\n</li>\n<li>\n<p>查找所有符合给定模式( pattern)的Key</p>\n</li>\n<li>\n<p>获取Key的过期时间(ms/s)</p>\n</li>\n<li>\n<p>修改Key的名称</p>\n</li>\n<li>\n<p>返回Key存储的值的类型</p>\n</li>\n</ol>\n",r:{minutes:.22,words:67},t:"Reids 键 Key",y:"a"}}],["/posts/redis/List.html",{loader:()=>n.e(4400).then(n.bind(n,281)),meta:{e:"\n<ol>\n<li>\n<p>往Key列表PUSH指定元素(头部\\尾部)</p>\n</li>\n<li>\n<p>移出并获取列表Key的第一个元素\\最后一个元素</p>\n</li>\n<li>\n<p>获取列表指定返回的元素</p>\n</li>\n<li>\n<p>获取列表指定索引的元素</p>\n</li>\n</ol>\n",r:{minutes:.21,words:64},t:"List 列表",y:"a"}}],["/posts/redis/plan.html",{loader:()=>n.e(4731).then(n.bind(n,441)),meta:{e:"<ol>\n<li>\n<p>redis 01-28  xiaolincoding\\java全栈\\Redis入门指南</p>\n</li>\n<li>\n<p>mysql 01-29 xiaolincoding</p>\n</li>\n<li>\n<p>golang 01-30\\01-31</p>\n</li>\n<li>\n<p>tcp/ip</p>\n</li>\n<li>\n<p>mongodb</p>\n</li>\n<li>\n<p>kafka</p>\n</li>\n<li>\n<p>elastic</p>\n</li>\n<li>\n<p>k8s</p>\n</li>\n<li>\n<p>个人优势</p>\n</li>\n<li>\n<p>项目经验</p>\n</li>\n</ol>",r:{minutes:.17,words:50},t:"Full_stack_knowledge_system",y:"a"}}],["/posts/redis/",{loader:()=>n.e(2110).then(n.bind(n,3672)),meta:{e:'\n<p>Redis入门指南</p>\n<h3>优秀站点</h3>\n<p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">Java全栈知识体系</a></p>\n<p><a href="https://xiaolincoding.com/" target="_blank" rel="noopener noreferrer">小林coding</a></p>\n<p><a href="https://www.cnblogs.com/rerise/p/16203438.html" target="_blank" rel="noopener noreferrer">熔断/降级/限流</a></p>',r:{minutes:.12,words:36},t:"Redis_Getting_Started_Guide",y:"a"}}],["/posts/redis/Redis%E4%B8%BB%E4%BB%8E%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html",{loader:()=>n.e(1702).then(n.bind(n,5)),meta:{e:"<h3>reids的集群的脑裂是什么（双主或多主）</h3>\n<pre><code>主从集群中，同时存在两个或多个主节点，它们都能接收写请求。\n客户端不知道应该往哪个主节点写入数据，导致数据不一致或者数据丢失。\n</code></pre>\n<h3>产生的原因</h3>\n<ol>\n<li>网络问题：leader无法通信，哨兵将从节点升级为主节点，</li>\n<li>哨兵配置异常。（导致将多个从节点提升为主节点）</li>\n</ol>\n<h3>如何避免脑裂</h3>\n<ol>\n<li>配置合理的哨兵参数：\nmin-slaves-to-write：这个配置项设置了主库能进行数据同步的最少从库数量，即至少要保证N个从库能进行数据同步；\nmin-slaves-max-lag：这个配置项设置了主从库间进行数据复制时，从库给主库发送 ACK 消息的最大延迟（以秒为单位）</li>\n</ol>",r:{minutes:1.41,words:423},t:"",y:"a"}}],["/posts/redis/Redis%E4%BA%8B%E5%8A%A1.html",{loader:()=>n.e(6209).then(n.bind(n,8130)),meta:{e:'\n<h3>事务是批量执行脚本，Redis语句是原子性的(事物不可分割，要么都发生要么都不发生)</h3>\n<h3>Redis事务不会因为批量脚本之中的某一个执行失败而回滚，也不会造成后续的指令不执行</h3>\n<h3>常用指令</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MULTI</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>EXEC</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1,words:300},t:"Redis事务",y:"a"}}],["/posts/redis/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.html",{loader:()=>n.e(6420).then(n.bind(n,3769)),meta:{e:"\n<ol>\n<li>\n<p>client订阅频道chat</p>\n</li>\n<li>\n<p>server发布消息到频道chat</p>\n</li>\n<li>\n<p>查看订阅和发布系统状态 [获取活跃频道组成的列表]</p>\n</li>\n</ol>\n",r:{minutes:.16,words:47},t:"发布/订阅",y:"a"}}],["/posts/redis/Redis%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8.html",{loader:()=>n.e(7102).then(n.bind(n,2366)),meta:{e:'\n<h3>使用场景</h3>\n<ol>\n<li>热点数据缓存</li>\n<li>限时业务(使用expire过期key的特性)</li>\n<li>计数器(incre原子操作)</li>\n<li>分布式锁</li>\n<li>延时操作(发布订阅Pub/Sub频道 + Keyspace Notifications在key expire时候主动push事件)</li>\n<li>排行榜</li>\n<li>点赞、好友相互关系(集合的交集、并集、差集)</li>\n<li>简单队列</li>\n</ol>\n<h1>Full_stack_knowledge_system</h1>\n<p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',r:{minutes:.34,words:102},t:"Redis概念和基础",y:"a"}}],["/posts/redis/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D.html",{loader:()=>n.e(9462).then(n.bind(n,5240)),meta:{e:'\n<h3>SAVE \\ BGSAVE</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>命令将在 redis 安装目录中创建dump.rdb文件</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.21,words:62},t:"数据备份和恢复",y:"a"}}],["/posts/redis/Redis%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.html",{loader:()=>n.e(3686).then(n.bind(n,7171)),meta:{e:'\n<h3>并发如何带来缓存一致性的问题</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>同时发起A|B两个请求</span></span>\n<span class="line"><span>A更新值为1并记录到缓存</span></span>\n<span class="line"><span>B更新值为2并记录到缓存</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>正确的情况：数据库和缓存都为2</span></span>\n<span class="line"><span>实际的情况：缓存先被B更新为2，然后又被A更新为1</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.24,words:371},t:"缓存一致性",y:"a"}}],["/posts/redis/Redis%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E5%92%8C%E7%A9%BF%E9%80%8F.html",{loader:()=>n.e(7655).then(n.bind(n,8870)),meta:{e:'\n<h3>缓存雪崩</h3>\n<blockquote>\n<p>数据大量过期，大量请求直接访问数据库造成数据库宕机</p>\n</blockquote>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>大量数据同时过期</span></span>\n<span class="line"><span>Redis故障宕机</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.54,words:161},t:"Redis缓存",y:"a"}}],["/posts/redis/Redis%E9%99%90%E9%A2%91.html",{loader:()=>n.e(5658).then(n.bind(n,6195)),meta:{e:'\n<h3>最简单的但是有超频的风险的</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SET userID count_request</span></span>\n<span class="line"><span>Expired userID xxx</span></span>\n<span class="line"><span>incre(userID)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.71,words:214},t:"Redis限频",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{loader:()=>n.e(6936).then(n.bind(n,8679)),meta:{e:'\n<ul>\n<li><a href="https://pdai.tech/md/arch/arch-z-lock.html" target="_blank" rel="noopener noreferrer">Java全栈知识体系之分布式系统</a></li>\n<li><a href="https://www.infoq.cn/article/dvaaj71f4fbqsxmgvdce" target="_blank" rel="noopener noreferrer">InfoQ Redis</a></li>\n</ul>\n<h3>锁实现需要支持</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>互斥</span></span>\n<span class="line"><span>超时释放</span></span>\n<span class="line"><span>高性能</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.19,words:356},t:"集群分布式锁及实现方案",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8FDocker%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(2108).then(n.bind(n,7324)),meta:{e:'\n<h3>创建本地data目录和conf文件夹</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node1/data \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node1/conf \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node2/data \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node2/conf \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node3/data \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node3/conf</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.61,words:482},t:"基于Docker搭建Redis集群",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(8727).then(n.bind(n,6092)),meta:{e:'\n<p><a href="https://xie.infoq.cn/article/6c3500c66c3cdee3d72b88780" target="_blank" rel="noopener noreferrer">InfoQ Redis集群</a></p>\n<h3>模式概览</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>一主多从</span></span>\n<span class="line"><span>主负责读写</span></span>\n<span class="line"><span>从负责读 [Redis2.6开始默认从只读]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.47,words:141},t:"集群模式主从模式",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html",{loader:()=>n.e(6992).then(n.bind(n,7490)),meta:{e:"\n",r:{minutes:.02,words:7},t:"分布式事务",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E7%89%87Cluster%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(9551).then(n.bind(n,8429)),meta:{e:'\n<p><a href="https://www.cnblogs.com/jian0110/p/14002555.html" target="_blank" rel="noopener noreferrer">博客园cluster</a></p>\n<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-cluster.html" target="_blank" rel="noopener noreferrer">Java全栈知识体系</a></p>\n<h3>节点数</h3>\n<blockquote>\n<p>官方推荐 3主3从六个节点</p>\n</blockquote>',r:{minutes:.37,words:111},t:"Cluster模式",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(609).then(n.bind(n,1474)),meta:{e:'\n<p><a href="https://xie.infoq.cn/article/6c3500c66c3cdee3d72b88780" target="_blank" rel="noopener noreferrer">InfoQ Redis集群</a></p>\n<blockquote>\n<p>master宕机哨兵会自动选举slave为master</p>\n</blockquote>\n<h3>配置</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>redis.conf与主从一致</span></span>\n<span class="line"><span>每个哨兵进程sentinel.conf</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.44,words:132},t:"哨兵 redis-sentinel",y:"a"}}],["/posts/redis/Set.html",{loader:()=>n.e(6726).then(n.bind(n,8279)),meta:{e:"\n<ol>\n<li>\n<p>向集合添加一个或者多个成员</p>\n</li>\n<li>\n<p>获取集合的成员数量</p>\n</li>\n<li>\n<p>获取集合的所有成员</p>\n</li>\n<li>\n<p>返回集合的差集\\交集\\并集</p>\n</li>\n</ol>\n",r:{minutes:.17,words:52},t:"Redis集合Set",y:"a"}}],["/posts/redis/String.html",{loader:()=>n.e(6005).then(n.bind(n,2008)),meta:{e:"\n<ol>\n<li>\n<p>设置和获取Key值</p>\n</li>\n<li>\n<p>自增自减Key值</p>\n</li>\n</ol>\n",r:{minutes:.07,words:21},t:"String 字符串",y:"a"}}],["/posts/redis/%E5%88%86%E7%89%87RedisCluster%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(5689).then(n.bind(n,2958)),meta:{e:'\n<blockquote>\n<p>主从只是扩展了读，但是写和存储能力并未得到扩展</p>\n</blockquote>\n<h3>关键模块</h3>\n<ol>\n<li>\n<p>哈希槽(Hash Slot)(数量是2^14=16384)，Cluster每个节点负责一部分哈希槽</p>\n</li>\n<li>\n<p>Keys hash tags 将相关Key分配到相同的hash slot</p>\n</li>\n<li>\n<p>Cluster nodes属性</p>\n</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>redis-cli cluster nodes</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>node id, address:port, flags, last ping sent, last pong received, configuration epoch, link state, slots.</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.26,words:978},t:"集群分片",y:"a"}}],["/posts/redis/%E5%88%86%E7%89%87RedisCluster%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(7979).then(n.bind(n,6755)),meta:{e:'\n<ol>\n<li>redis-conf</li>\n<li>redis-cli --cluster create</li>\n</ol>\n<h3>Redis-conf配置</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#注释掉 bind 项，默认监听所有网卡 70 #bind 127.0.0.1</span></span>\n<span class="line"><span>#关闭保护模式 89 protected-mode no</span></span>\n<span class="line"><span>#redis默认端口6379 不用修改 port 6379</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 开启AOF持久化</span></span>\n<span class="line"><span>appendonly yes</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 开启守护进程</span></span>\n<span class="line"><span>daemonize yes</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 指定redis进程的PID文件存放位置</span></span>\n<span class="line"><span>pidfile "/home/centos/redis/redis-6.2.6/logs/redis/redis.pid"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># log文件输出位置，如果进程以守护进程的方式运行，此处又将输出文件设置为stdout的话，就会将日志信息输出到/dev/null里面去了</span></span>\n<span class="line"><span>logfile "/home/centos/redis/redis-6.2.6/logs/redis/redis.log"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 默认16个数据库</span></span>\n<span class="line"><span>databases 16</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 指定本地数据库文件名</span></span>\n<span class="line"><span>dbfilename "dump.db"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 指定本地数据问就按存放位置</span></span>\n<span class="line"><span>dir "/home/centos/redis/redis-6.2.6/logs/data"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 设置redis连接密码，如果配置了连接密码，客户端在连接redis是需要通过AUTH&lt;password&gt;命令提供密码，默认关闭</span></span>\n<span class="line"><span>requirepass "xyredis"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 开启集群功能</span></span>\n<span class="line"><span>cluster-enabled yes</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 群集名称文件设置</span></span>\n<span class="line"><span>cluster-config-file nodes-6379.conf</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 取消注释群集超时时间设置</span></span>\n<span class="line"><span>cluster-node-timeout 15000</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.06,words:317},t:"Redis集群模式搭建",y:"a"}}],["/posts/redis/%E5%88%86%E7%89%87%E6%8A%80%E6%9C%AF.html",{loader:()=>n.e(4662).then(n.bind(n,4984)),meta:{e:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>最多1000节点</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>集群节点间使用异步复制</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.68,words:504},t:"redis 分片技术",y:"a"}}],["/posts/redis/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(6407).then(n.bind(n,9679)),meta:{e:'\n<blockquote>\n<p>哨兵的核心功能是主节点的自动故障转移</p>\n</blockquote>\n<h3>哨兵机制原理</h3>\n<ol>\n<li>哨兵之间集群建立、哨兵与主从库连接建立</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>哨兵实例之间可以相互发现，要归功于 Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制，他们共同订阅Redis的同一个频道，获取对方的IP和端口号从而建立网络连接</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>每个哨兵发送INFO给主库，收到从库列表，进而与从库建立连接</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.25,words:374},t:"哨兵机制 Redis Sendtinel",y:"a"}}],["/posts/redis/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html",{loader:()=>n.e(819).then(n.bind(n,5120)),meta:{e:'<h3>Redis入门指南</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>9 种数据类型</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>BitMap 二值状态统计的场景</span></span>\n<span class="line"><span>Stream 消息队列</span></span>\n<span class="line"><span>HyperLogLog 海量数据基数统计的场景</span></span>\n<span class="line"><span>GEO 地理位置信息</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>HSET key field value</span></span>\n<span class="line"><span>KEYS</span></span>\n<span class="line"><span>LPUSH LPOP</span></span>\n<span class="line"><span>RPUSH RPOP</span></span>\n<span class="line"><span>LLEN KEY</span></span>\n<span class="line"><span>SADD KEY member</span></span>\n<span class="line"><span>SREM KEY member</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>ZADD KEY [score member]...</span></span>\n<span class="line"><span>ZADD studend 89 tom 98 jack 76 rose</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>MULTI</span></span>\n<span class="line"><span>...</span></span>\n<span class="line"><span>EXEC</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Redis的事务还能保证一个事务内的命令依次执行而不被其他命令插入</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>开发者必须在事务执行出错后自己收拾剩下的摊子（将数据库复原回事务执行前的状态等）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Watch 命令用于监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断 (CAS)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>EXPIRE</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SORT</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SORT key ALPHA [字典排序]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SORT key DESC</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.15,words:1244},t:"Full_stack_knowledge_system",y:"a"}}],["/posts/redis/%E6%8C%81%E4%B9%85%E5%8C%96AOF%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(8290).then(n.bind(n,136)),meta:{e:'<h3>AOF(Append Only File)日志</h3>\n<h3>原理</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>执行写命令完成后会记录日志到硬盘</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.86,words:257},t:"",y:"a"}}],["/posts/redis/%E6%8C%81%E4%B9%85%E5%8C%96RDB%E5%BF%AB%E7%85%A7.html",{loader:()=>n.e(5046).then(n.bind(n,4974)),meta:{e:'\n<blockquote>\n<p>某一个瞬间的内存数据</p>\n</blockquote>\n<h3>命令</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SAVE</span></span>\n<span class="line"><span>BGSAVE</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.61,words:183},t:"RDB快照",y:"a"}}],["/posts/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{loader:()=>n.e(2450).then(n.bind(n,2772)),meta:{e:'\n<h3>各种数据类型用了哪些数据结构</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>string 简单动态字符串 SDS(simple dynamis string)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>zset 跳表 + listpack</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>hash 哈希表</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>set 整数集合 + 哈希表</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>list quicklist</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.56,words:469},t:"数据结构角度解释各种数据类型差别",y:"a"}}],["/posts/redis/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0.html",{loader:()=>n.e(489).then(n.bind(n,4205)),meta:{e:'\n<h3>过期字典</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>哈希表</span></span>\n<span class="line"><span>struct{ key,expired_timestamp }</span></span>\n<span class="line"><span>key存在过期字典之中且 system_timestamp &gt; expired_timestamp 表示已经过期</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.07,words:321},t:"Redis的过期删除和内存淘汰",y:"a"}}],["/posts/redis/%E9%AB%98%E5%8F%AF%E7%94%A8-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E8%A7%A3.html",{loader:()=>n.e(7487).then(n.bind(n,2308)),meta:{e:'\n<h3>主从复制如何执行</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>replicaof 192.168.0.1 6379</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:2.21,words:664},t:"主从复制详解",y:"a"}}],["/404.html",{loader:()=>n.e(7490).then(n.bind(n,1489)),meta:{t:""}}],["/posts/architecture/",{loader:()=>n.e(2272).then(n.bind(n,9557)),meta:{t:"Architecture"}}],["/posts/docker/",{loader:()=>n.e(5031).then(n.bind(n,2533)),meta:{t:"Docker"}}],["/posts/etcd/",{loader:()=>n.e(5129).then(n.bind(n,7824)),meta:{t:"Etcd"}}],["/posts/git/",{loader:()=>n.e(6249).then(n.bind(n,3231)),meta:{t:"Git"}}],["/posts/java/",{loader:()=>n.e(7276).then(n.bind(n,1919)),meta:{t:"Java"}}],["/posts/kafka/",{loader:()=>n.e(3763).then(n.bind(n,2240)),meta:{t:"Kafka"}}],["/posts/go/",{loader:()=>n.e(1441).then(n.bind(n,8610)),meta:{t:"Go"}}],["/posts/kubernetes/",{loader:()=>n.e(6607).then(n.bind(n,6276)),meta:{t:"Kubernetes"}}],["/posts/mongodb/",{loader:()=>n.e(3355).then(n.bind(n,6053)),meta:{t:"Mongodb"}}],["/posts/linux/",{loader:()=>n.e(1343).then(n.bind(n,9772)),meta:{t:"Linux"}}],["/posts/mysql/",{loader:()=>n.e(3191).then(n.bind(n,5626)),meta:{t:"Mysql"}}],["/posts/network/",{loader:()=>n.e(183).then(n.bind(n,5998)),meta:{t:"Network"}}],["/posts/nginx/",{loader:()=>n.e(4741).then(n.bind(n,8076)),meta:{t:"Nginx"}}],["/posts/struct/",{loader:()=>n.e(6170).then(n.bind(n,6507)),meta:{t:"Struct"}}],["/posts/prometheus/",{loader:()=>n.e(4475).then(n.bind(n,5860)),meta:{t:"Prometheus"}}],["/category/",{loader:()=>n.e(3583).then(n.bind(n,3233)),meta:{t:"分类",I:!1}}],["/category/%E5%88%86%E5%B8%83%E5%BC%8F/",{loader:()=>n.e(7056).then(n.bind(n,6078)),meta:{t:"分布式 分类",I:!1}}],["/category/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/",{loader:()=>n.e(7927).then(n.bind(n,5238)),meta:{t:"领域驱动设计 分类",I:!1}}],["/category/docker/",{loader:()=>n.e(1360).then(n.bind(n,2570)),meta:{t:"docker 分类",I:!1}}],["/category/kubernetes/",{loader:()=>n.e(1628).then(n.bind(n,3355)),meta:{t:"kubernetes 分类",I:!1}}],["/category/etcd/",{loader:()=>n.e(2418).then(n.bind(n,5222)),meta:{t:"etcd 分类",I:!1}}],["/category/git/",{loader:()=>n.e(5612).then(n.bind(n,4232)),meta:{t:"git 分类",I:!1}}],["/category/java/",{loader:()=>n.e(8236).then(n.bind(n,1730)),meta:{t:"java 分类",I:!1}}],["/category/kafka/",{loader:()=>n.e(9630).then(n.bind(n,8292)),meta:{t:"kafka 分类",I:!1}}],["/category/go/",{loader:()=>n.e(918).then(n.bind(n,4118)),meta:{t:"go 分类",I:!1}}],["/category/golang/",{loader:()=>n.e(9746).then(n.bind(n,4550)),meta:{t:"golang 分类",I:!1}}],["/category/linux/",{loader:()=>n.e(8654).then(n.bind(n,332)),meta:{t:"linux 分类",I:!1}}],["/category/network/",{loader:()=>n.e(150).then(n.bind(n,3942)),meta:{t:"network 分类",I:!1}}],["/category/nginx/",{loader:()=>n.e(5552).then(n.bind(n,1320)),meta:{t:"Nginx 分类",I:!1}}],["/category/prometheus/",{loader:()=>n.e(4e3).then(n.bind(n,5448)),meta:{t:"prometheus 分类",I:!1}}],["/tag/",{loader:()=>n.e(1797).then(n.bind(n,951)),meta:{t:"标签",I:!1}}],["/tag/cap/",{loader:()=>n.e(3154).then(n.bind(n,346)),meta:{t:"标签: CAP",I:!1}}],["/tag/cdn/",{loader:()=>n.e(3865).then(n.bind(n,2415)),meta:{t:"标签: CDN",I:!1}}],["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",{loader:()=>n.e(9198).then(n.bind(n,8277)),meta:{t:"标签: 分布式事务",I:!1}}],["/tag/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/",{loader:()=>n.e(4333).then(n.bind(n,391)),meta:{t:"标签: 架构设计",I:!1}}],["/tag/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/",{loader:()=>n.e(2653).then(n.bind(n,3654)),meta:{t:"标签: 领域驱动模型设计",I:!1}}],["/tag/docker/",{loader:()=>n.e(4446).then(n.bind(n,5384)),meta:{t:"标签: docker",I:!1}}],["/tag/chartmuseum/",{loader:()=>n.e(3510).then(n.bind(n,4527)),meta:{t:"标签: chartmuseum",I:!1}}],["/tag/loki/",{loader:()=>n.e(5863).then(n.bind(n,8321)),meta:{t:"标签: loki",I:!1}}],["/tag/registry/",{loader:()=>n.e(3221).then(n.bind(n,4338)),meta:{t:"标签: registry",I:!1}}],["/tag/etcd/",{loader:()=>n.e(1700).then(n.bind(n,1416)),meta:{t:"标签: etcd",I:!1}}],["/tag/git/",{loader:()=>n.e(8474).then(n.bind(n,3532)),meta:{t:"标签: git",I:!1}}],["/tag/java/",{loader:()=>n.e(250).then(n.bind(n,3691)),meta:{t:"标签: java",I:!1}}],["/tag/kafka/",{loader:()=>n.e(8900).then(n.bind(n,7101)),meta:{t:"标签: kafka",I:!1}}],["/tag/go/",{loader:()=>n.e(9236).then(n.bind(n,5065)),meta:{t:"标签: go",I:!1}}],["/tag/go%E5%8E%9F%E7%90%86/",{loader:()=>n.e(7429).then(n.bind(n,1927)),meta:{t:"标签: GO原理",I:!1}}],["/tag/golang/",{loader:()=>n.e(7984).then(n.bind(n,1985)),meta:{t:"标签: golang",I:!1}}],["/tag/golangci-lint/",{loader:()=>n.e(578).then(n.bind(n,6170)),meta:{t:"标签: golangci-lint",I:!1}}],["/tag/fmt/",{loader:()=>n.e(1150).then(n.bind(n,3437)),meta:{t:"标签: fmt",I:!1}}],["/tag/gin/",{loader:()=>n.e(428).then(n.bind(n,8177)),meta:{t:"标签: gin",I:!1}}],["/tag/mongodb/",{loader:()=>n.e(9416).then(n.bind(n,5579)),meta:{t:"标签: mongodb",I:!1}}],["/tag/cicd/",{loader:()=>n.e(6613).then(n.bind(n,4486)),meta:{t:"标签: cicd",I:!1}}],["/tag/dockerfile/",{loader:()=>n.e(8712).then(n.bind(n,4370)),meta:{t:"标签: dockerfile",I:!1}}],["/tag/kubernetes/",{loader:()=>n.e(2582).then(n.bind(n,8471)),meta:{t:"标签: kubernetes",I:!1}}],["/tag/kubectl/",{loader:()=>n.e(8288).then(n.bind(n,398)),meta:{t:"标签: kubectl",I:!1}}],["/tag/helm/",{loader:()=>n.e(110).then(n.bind(n,5108)),meta:{t:"标签: helm",I:!1}}],["/tag/telepresence/",{loader:()=>n.e(879).then(n.bind(n,9732)),meta:{t:"标签: telepresence",I:!1}}],["/tag/linux/",{loader:()=>n.e(4316).then(n.bind(n,5922)),meta:{t:"标签: Linux",I:!1}}],["/tag/linux/",{loader:()=>n.e(4316).then(n.bind(n,5922)),meta:{t:"标签: linux",I:!1}}],["/tag/network/",{loader:()=>n.e(8844).then(n.bind(n,863)),meta:{t:"标签: network",I:!1}}],["/tag/nginx/",{loader:()=>n.e(14).then(n.bind(n,2912)),meta:{t:"标签: Nginx",I:!1}}],["/tag/prometheus/",{loader:()=>n.e(874).then(n.bind(n,1847)),meta:{t:"标签: prometheus",I:!1}}],["/tag/alertmanager/",{loader:()=>n.e(8327).then(n.bind(n,7856)),meta:{t:"标签: alertmanager",I:!1}}],["/tag/api/",{loader:()=>n.e(6810).then(n.bind(n,5414)),meta:{t:"标签: api",I:!1}}],["/article/",{loader:()=>n.e(7511).then(n.bind(n,8010)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>n.e(7199).then(n.bind(n,353)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>n.e(5464).then(n.bind(n,4695)),meta:{t:"时间轴",I:!1}}]])},8761:(s,i,n)=>{n.d(i,{U:()=>a});const a=JSON.parse('{"base":"/","lang":"zh-CN","title":"笔记本","description":"这是一个笔记本","head":[],"locales":{}}')},6653:(s,i,n)=>{n.d(i,{K:()=>a});const a=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$TZwotpRmN0OXkabvaXvPx.s3pNFshkqIZUjlzMNz1fhkZqsPTx4Sy"]}},"author":{"name":"xuweiqiang","url":"https://weiqiangxu.github.io"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"weiqiangxu/docs","docsDir":"src","footer":"默认页脚","displayFooter":false,"blog":{"description":"一个后端开发者","intro":"/intro.html","medias":{"Email":"https://github.com/weiqiangxu","GitHub":"https://github.com/weiqiangxu","VuePressThemeHope":{"icon":"https://theme-hope-assets.vuejs.press/logo.svg","link":"https://theme-hope.vuejs.press/zh"}}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/","/posts/"],"sidebar":{"/":["",{"text":"Linux","icon":"laptop-code","prefix":"posts/linux","link":"/posts/linux/常用命令.md","children":"structure","collapsible":true,"expanded":false},{"text":"Golang","icon":"book","prefix":"posts/go/","children":"structure","collapsible":true},{"text":"Docker","icon":"book","prefix":"posts/docker/","children":"structure","collapsible":true},{"text":"prometheus","icon":"book","prefix":"posts/prometheus/","children":"structure","collapsible":true},{"text":"java","icon":"book","prefix":"posts/java/","children":"structure","collapsible":true},{"text":"Etcd","icon":"book","prefix":"posts/etcd/","children":"structure","collapsible":true},{"text":"Nginx","icon":"book","prefix":"posts/nginx/","children":"structure","collapsible":true},{"text":"Kubernetes","icon":"book","prefix":"posts/kubernetes/","children":"structure","collapsible":true},{"text":"Network","icon":"book","prefix":"posts/network/","children":"structure","collapsible":true},{"text":"Git","icon":"book","prefix":"posts/git/","children":"structure","collapsible":true},{"text":"kafka","icon":"book","prefix":"posts/kafka/","children":"structure","collapsible":true},{"text":"DataStruct","icon":"book","prefix":"posts/struct/","children":"structure","collapsible":true},"intro"]}}}}')},4923:(s,i,n)=>{},8123:(s,i,n)=>{n.d(i,{v:()=>a});const a={"/posts/linux":["操作系统","常用命令","磁盘分区","磁盘扩容","堆和栈的区别","二进制","发行版和包管理工具","环境变量配置","Linux结构组成","零拷贝","cpu架构","float浮点数精度","linux服务器ssh密钥","lsof命令","rpm","uname"],"/posts/go/":["Security规范","代码分层实践","读写锁实现原理","个人编码规范","交叉编译","命令行执行单元测试","内存分配","内存管理","配置go私有库","抢占式调度","请求转发","如何池化连接","如何发布包到pkg","如何判定零值","如何退出协程","腾讯代码规范","信号监听","优雅拼接URL","原子操作","字符串拼接性能","Channel底层原理","context","defer","defer实现原理","for和range性能比较","GC","GPM","GMP原理与调度","goland快捷键","golang导出docker镜像","golang静态扫描和格式检查","golang生产者消费者模式","如何优雅地使用errors","golang引用传递和值传递","GoModules","GRPC","jaegertracing","map","middleware底层实现原理","module冲突","mongodb自定义排序","Mutex","什么是openTracing","reflect的性能","runtime包","slice","Socket是什么","什么是stream","string","struct底层数据结构","sync.Map设计","UnitTest规范"],"/posts/docker/":["多架构镜像存储","分配网络给容器","集成gvisor","集成kata","镜像仓库搭建","双网卡实现网络隔离","制作多架构镜像","buildx","chartmuseum","dind","docker离线安装","loki采集日志"],"/posts/prometheus/":["联邦机制","alertmanager","mongodb指标","mybatis监控指标","node_exporter指标","prometheus","prometheus高可用"],"/posts/java/":["docker安装maven仓库","Java版本","制作maven包"],"/posts/etcd/":["Docker安装Etcd","etcd基础","Etcd开启SSL认证","Raft算法"],"/posts/nginx/":["会话粘性","开启SSL验证","域名指向配置"],"/posts/kubernetes/":["安全容器","初识CRD","创建service指向外部服务","调试工具telepresence","traefik配置ingress服务","如何安装kubernetes","linux上如何配置静态路由","如何添加node节点","什么是CNI","网络常用的命令","用CNI给docker容器分配网络","制作镜像编译kata","制作helm包和自建Chart仓库","CI制作多架构镜像","containerd安装","CRD控制器","flanne接入k8s","iperf用法","k8s审计日志","/posts/kubernetes/kata_firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","kube-proxy设计与实现","kubectl常用命令","kubernetes审计日志","Kubernetes组件","Loki服务安装","MySQL集群搭建","Nginx-Ingress安装","S3对象存储"],"/posts/network/":["如何构建vxlan网络","如何使用GRE隧道通信","什么是网桥","网络基础","网络命名空间","DNS配置","ipip隧道通讯","NAT配置公网访问","tcp连接与抓包","tcp粘包","veth-pair和host网桥通信","veth-pair和ovs-bridge通讯","VPN通讯","write_broken_pipe"],"/posts/git/":["密钥配置","Gitlab安装使用","Runner安装应用到CI","runner镜像制作"],"/posts/kafka/":["kafka基础"],"/posts/struct/":["树","数据结构"]}},2878:(s,i,n)=>{n.d(i,{P:()=>a});const a={Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}}},s=>{s.O(0,[9469,4596],(()=>s(s.s=8731))),s.O()}]);