"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7435],{6262:(e,n)=>{n.A=(e,n)=>{const s=e.__vccOpts||e;for(const[e,i]of n)s[e]=i;return s}},8025:(e,n,s)=>{s.r(n),s.d(n,{comp:()=>l,data:()=>t});var i=s(641);const a={},l=(0,s(6262).A)(a,[["render",function(e,n){return(0,i.uX)(),(0,i.CE)("div",null,n[0]||(n[0]=[(0,i.Fv)('<h1 id="socket" tabindex="-1"><a class="header-anchor" href="#socket"><span>socket</span></a></h1><h3 id="复习一下tcp-ip" tabindex="-1"><a class="header-anchor" href="#复习一下tcp-ip"><span>复习一下TCP/IP</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pid是一个机器内标识2个进程的东西</span></span>\n<span class="line"><span>网络层IP协议的ip地址标识主机</span></span>\n<span class="line"><span>TCP是ip地址+协议+端口号标识网络中的一个进程</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>socket套接字，应用层和传输层之间的抽象层，它把tcp\\ip层的复杂操作抽象为几个接口</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>换句话说，应用层通过socket和传输层沟通</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h3><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>type server interface {</span></span>\n<span class="line"><span>    bind</span></span>\n<span class="line"><span>    listen</span></span>\n<span class="line"><span>    accept</span></span>\n<span class="line"><span>    recv</span></span>\n<span class="line"><span>    close</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>type client interface {</span></span>\n<span class="line"><span>    connect</span></span>\n<span class="line"><span>    send</span></span>\n<span class="line"><span>    close</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="golang的net包提供的接口有" tabindex="-1"><a class="header-anchor" href="#golang的net包提供的接口有"><span>golang的net包提供的接口有</span></a></h3><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Close(net.Conn)</span></span>\n<span class="line"><span>Reader(net.Conn)</span></span>\n<span class="line"><span>Write(net.Conn)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>net.Listen()</span></span>\n<span class="line"><span>net.Listen().Accept()</span></span>\n<span class="line"><span>net.Dial()</span></span>\n<span class="line"><span>net.ListenUDP()</span></span>\n<span class="line"><span>net.DialUDP()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本地端口假设是8080只能有一个server-listener" tabindex="-1"><a class="header-anchor" href="#本地端口假设是8080只能有一个server-listener"><span>本地端口假设是8080只能有一个server.Listener</span></a></h3><h3 id="本地端口client-connect一个端口可以创建多个socket连接" tabindex="-1"><a class="header-anchor" href="#本地端口client-connect一个端口可以创建多个socket连接"><span>本地端口client.Connect一个端口可以创建多个socket连接</span></a></h3><h3 id="一台linux服务器最多能支撑多少个tcp连接" tabindex="-1"><a class="header-anchor" href="#一台linux服务器最多能支撑多少个tcp连接"><span>一台Linux服务器最多能支撑多少个TCP连接</span></a></h3><h3 id="相关术语" tabindex="-1"><a class="header-anchor" href="#相关术语"><span>相关术语</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>TCP连接四元组是源IP地址、源端口、目的IP地址和目的端口</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>ip最大是255.255.255.255 (4个8bit)（IPV4其实是个4字节的数据）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2的8次方=256（一个8bit的数据有256种十进制数据）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>理论上</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>原地址IP端口组合（2的32次方（ip数）×2的16次方（port数））与目标地址IP端口组合 </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>就是TCP连接的最大数量 （server.Listen）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作系统对打开的文件数量有限制-socket-too-many-open-file" tabindex="-1"><a class="header-anchor" href="#操作系统对打开的文件数量有限制-socket-too-many-open-file"><span>操作系统对打开的文件数量有限制 socket too many open file</span></a></h3><h3 id="socket会消耗系统内存-linux系统在多个位置都限制了可打开的文件描述符的数量" tabindex="-1"><a class="header-anchor" href="#socket会消耗系统内存-linux系统在多个位置都限制了可打开的文件描述符的数量"><span>socket会消耗系统内存，linux系统在多个位置都限制了可打开的文件描述符的数量</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>系统级fs.file-max</span></span>\n<span class="line"><span>用户级/etc/security/limits.conf</span></span>\n<span class="line"><span>进程级fs.nr_open</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="io多路复用-时分多路复用-一个线程可以管理多个tcp连接" tabindex="-1"><a class="header-anchor" href="#io多路复用-时分多路复用-一个线程可以管理多个tcp连接"><span>IO多路复用(时分多路复用) 一个线程可以管理多个TCP连接</span></a></h3><h3 id="c10k并发处理万个连接的代名词" tabindex="-1"><a class="header-anchor" href="#c10k并发处理万个连接的代名词"><span>C10K并发处理万个连接的代名词</span></a></h3><h3 id="每个tcp连接需要的资源" tabindex="-1"><a class="header-anchor" href="#每个tcp连接需要的资源"><span>每个TCP连接需要的资源</span></a></h3><ol><li>内存</li><li>CPU</li><li>端口号</li><li>文件描述符</li><li>线程</li></ol><h3 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章"><span>相关文章</span></a></h3><p><a href="https://blog.csdn.net/qq_16059847/article/details/116102880" target="_blank" rel="noopener noreferrer">一台Linux服务器最多能支撑多少个TCP连接</a></p><p><a href="https://segmentfault.com/a/1190000022734659" target="_blank" rel="noopener noreferrer">Go语言使用net包实现Socket网络编程</a></p><p><a href="https://en.wikipedia.org/wiki/C10k_problem" target="_blank" rel="noopener noreferrer">C10k</a></p>',26)]))}]]),t=JSON.parse('{"path":"/posts/go/Socket%E6%98%AF%E4%BB%80%E4%B9%88.html","title":"socket","lang":"zh-CN","frontmatter":{"hide":true,"description":"socket 复习一下TCP/IP 概念 接口 golang的net包提供的接口有 本地端口假设是8080只能有一个server.Listener 本地端口client.Connect一个端口可以创建多个socket连接 一台Linux服务器最多能支撑多少个TCP连接 相关术语 操作系统对打开的文件数量有限制 socket too many open ...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/Socket%E6%98%AF%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"socket"}],["meta",{"property":"og:description","content":"socket 复习一下TCP/IP 概念 接口 golang的net包提供的接口有 本地端口假设是8080只能有一个server.Listener 本地端口client.Connect一个端口可以创建多个socket连接 一台Linux服务器最多能支撑多少个TCP连接 相关术语 操作系统对打开的文件数量有限制 socket too many open ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"socket\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"复习一下TCP/IP","slug":"复习一下tcp-ip","link":"#复习一下tcp-ip","children":[]},{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"golang的net包提供的接口有","slug":"golang的net包提供的接口有","link":"#golang的net包提供的接口有","children":[]},{"level":3,"title":"本地端口假设是8080只能有一个server.Listener","slug":"本地端口假设是8080只能有一个server-listener","link":"#本地端口假设是8080只能有一个server-listener","children":[]},{"level":3,"title":"本地端口client.Connect一个端口可以创建多个socket连接","slug":"本地端口client-connect一个端口可以创建多个socket连接","link":"#本地端口client-connect一个端口可以创建多个socket连接","children":[]},{"level":3,"title":"一台Linux服务器最多能支撑多少个TCP连接","slug":"一台linux服务器最多能支撑多少个tcp连接","link":"#一台linux服务器最多能支撑多少个tcp连接","children":[]},{"level":3,"title":"相关术语","slug":"相关术语","link":"#相关术语","children":[]},{"level":3,"title":"操作系统对打开的文件数量有限制 socket too many open file","slug":"操作系统对打开的文件数量有限制-socket-too-many-open-file","link":"#操作系统对打开的文件数量有限制-socket-too-many-open-file","children":[]},{"level":3,"title":"socket会消耗系统内存，linux系统在多个位置都限制了可打开的文件描述符的数量","slug":"socket会消耗系统内存-linux系统在多个位置都限制了可打开的文件描述符的数量","link":"#socket会消耗系统内存-linux系统在多个位置都限制了可打开的文件描述符的数量","children":[]},{"level":3,"title":"IO多路复用(时分多路复用) 一个线程可以管理多个TCP连接","slug":"io多路复用-时分多路复用-一个线程可以管理多个tcp连接","link":"#io多路复用-时分多路复用-一个线程可以管理多个tcp连接","children":[]},{"level":3,"title":"C10K并发处理万个连接的代名词","slug":"c10k并发处理万个连接的代名词","link":"#c10k并发处理万个连接的代名词","children":[]},{"level":3,"title":"每个TCP连接需要的资源","slug":"每个tcp连接需要的资源","link":"#每个tcp连接需要的资源","children":[]},{"level":3,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"readingTime":{"minutes":1.62,"words":487},"filePathRelative":"posts/go/Socket是什么.md","excerpt":"\\n<h3>复习一下TCP/IP</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>pid是一个机器内标识2个进程的东西</span></span>\\n<span class=\\"line\\"><span>网络层IP协议的ip地址标识主机</span></span>\\n<span class=\\"line\\"><span>TCP是ip地址+协议+端口号标识网络中的一个进程</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);