"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6407],{6262:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,a]of i)s[e]=a;return s}},9679:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>l,data:()=>t});var a=s(641);const n={},l=(0,s(6262).A)(n,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h1 id="哨兵机制-redis-sendtinel" tabindex="-1"><a class="header-anchor" href="#哨兵机制-redis-sendtinel"><span>哨兵机制 Redis Sendtinel</span></a></h1><blockquote><p>哨兵的核心功能是主节点的自动故障转移</p></blockquote><h3 id="哨兵机制原理" tabindex="-1"><a class="header-anchor" href="#哨兵机制原理"><span>哨兵机制原理</span></a></h3><ol><li>哨兵之间集群建立、哨兵与主从库连接建立</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>哨兵实例之间可以相互发现，要归功于 Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制，他们共同订阅Redis的同一个频道，获取对方的IP和端口号从而建立网络连接</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>每个哨兵发送INFO给主库，收到从库列表，进而与从库建立连接</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>哨兵之间通讯 send is-master-down-by-addr 收到的Y/N判定各个哨兵主观下线是否存在</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>赞成票数如果大于或者等于哨兵配置之中的 quorum 配置项，则客观下线</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="哨兵选举" tabindex="-1"><a class="header-anchor" href="#哨兵选举"><span>哨兵选举</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Raft选举算法： 选举的票数大于等于num(sentinels)/2+1时，将成为领导者，如果没有超过，继续选举</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1主4从-5个哨兵-3个哨兵故障-主库宕机-只能标记主库下线-无法完成主从切换-为什么" tabindex="-1"><a class="header-anchor" href="#_1主4从-5个哨兵-3个哨兵故障-主库宕机-只能标记主库下线-无法完成主从切换-为什么"><span>1主4从，5个哨兵，3个哨兵故障，主库宕机，只能标记主库下线，无法完成主从切换，为什么</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>哨兵只能获得2票没法获取 5/2 + 1= 3票</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="新主库的选出" tabindex="-1"><a class="header-anchor" href="#新主库的选出"><span>新主库的选出</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 选择redis.conf.salve-priority从节点优先级最高的</span></span>\n<span class="line"><span>2. 选择复制偏移量最大，只复制最完整的从节点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="哨兵如何切换从库为主库的呢" tabindex="-1"><a class="header-anchor" href="#哨兵如何切换从库为主库的呢"><span>哨兵如何切换从库为主库的呢</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sentinels-3通知client切换主库</span></span>\n<span class="line"><span>新主库执行 slaveof no one</span></span>\n<span class="line"><span>其他从库执行 slaveof new master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="full-stack-knowledge-system" tabindex="-1"><a class="header-anchor" href="#full-stack-knowledge-system"><span>Full_stack_knowledge_system</span></a></h1><p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',17)]))}]]),t=JSON.parse('{"path":"/posts/redis/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html","title":"哨兵机制 Redis Sendtinel","lang":"zh-CN","frontmatter":{"hide":true,"description":"哨兵机制 Redis Sendtinel 哨兵的核心功能是主节点的自动故障转移 哨兵机制原理 哨兵之间集群建立、哨兵与主从库连接建立 哨兵之间通讯 send is-master-down-by-addr 收到的Y/N判定各个哨兵主观下线是否存在 哨兵选举 1主4从，5个哨兵，3个哨兵故障，主库宕机，只能标记主库下线，无法完成主从切换，为什么 新主库的选...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/redis/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"哨兵机制 Redis Sendtinel"}],["meta",{"property":"og:description","content":"哨兵机制 Redis Sendtinel 哨兵的核心功能是主节点的自动故障转移 哨兵机制原理 哨兵之间集群建立、哨兵与主从库连接建立 哨兵之间通讯 send is-master-down-by-addr 收到的Y/N判定各个哨兵主观下线是否存在 哨兵选举 1主4从，5个哨兵，3个哨兵故障，主库宕机，只能标记主库下线，无法完成主从切换，为什么 新主库的选..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"哨兵机制 Redis Sendtinel\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"哨兵机制原理","slug":"哨兵机制原理","link":"#哨兵机制原理","children":[]},{"level":3,"title":"哨兵选举","slug":"哨兵选举","link":"#哨兵选举","children":[]},{"level":3,"title":"1主4从，5个哨兵，3个哨兵故障，主库宕机，只能标记主库下线，无法完成主从切换，为什么","slug":"_1主4从-5个哨兵-3个哨兵故障-主库宕机-只能标记主库下线-无法完成主从切换-为什么","link":"#_1主4从-5个哨兵-3个哨兵故障-主库宕机-只能标记主库下线-无法完成主从切换-为什么","children":[]},{"level":3,"title":"新主库的选出","slug":"新主库的选出","link":"#新主库的选出","children":[]},{"level":3,"title":"哨兵如何切换从库为主库的呢","slug":"哨兵如何切换从库为主库的呢","link":"#哨兵如何切换从库为主库的呢","children":[]}],"readingTime":{"minutes":1.25,"words":374},"filePathRelative":"posts/redis/哨兵模式.md","excerpt":"\\n<blockquote>\\n<p>哨兵的核心功能是主节点的自动故障转移</p>\\n</blockquote>\\n<h3>哨兵机制原理</h3>\\n<ol>\\n<li>哨兵之间集群建立、哨兵与主从库连接建立</li>\\n</ol>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>哨兵实例之间可以相互发现，要归功于 Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制，他们共同订阅Redis的同一个频道，获取对方的IP和端口号从而建立网络连接</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>每个哨兵发送INFO给主库，收到从库列表，进而与从库建立连接</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);