"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2450],{6262:(s,i)=>{i.A=(s,i)=>{const e=s.__vccOpts||s;for(const[s,n]of i)e[s]=n;return e}},2772:(s,i,e)=>{e.r(i),e.d(i,{comp:()=>l,data:()=>d});var n=e(641);const a={},l=(0,e(6262).A)(a,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="数据结构角度解释各种数据类型差别" tabindex="-1"><a class="header-anchor" href="#数据结构角度解释各种数据类型差别"><span>数据结构角度解释各种数据类型差别</span></a></h1><h3 id="各种数据类型用了哪些数据结构" tabindex="-1"><a class="header-anchor" href="#各种数据类型用了哪些数据结构"><span>各种数据类型用了哪些数据结构</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>string 简单动态字符串 SDS(simple dynamis string)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>zset 跳表 + listpack</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>hash 哈希表</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>set 整数集合 + 哈希表</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>list quicklist</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新旧版本-redis-3-0-和-redis-7-0最新-涉及哪9种数据结构" tabindex="-1"><a class="header-anchor" href="#新旧版本-redis-3-0-和-redis-7-0最新-涉及哪9种数据结构"><span>新旧版本(Redis 3.0 和 Redis 7.0最新)涉及哪9种数据结构</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SDS</span></span>\n<span class="line"><span>双向链表</span></span>\n<span class="line"><span>压缩列表ziplist</span></span>\n<span class="line"><span>哈希表hash</span></span>\n<span class="line"><span>跳表zskiplist</span></span>\n<span class="line"><span>整数集合inset</span></span>\n<span class="line"><span>quicklist</span></span>\n<span class="line"><span>listpack</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis所有的key存储是什么数据结构-查找时间复杂度是啥" tabindex="-1"><a class="header-anchor" href="#redis所有的key存储是什么数据结构-查找时间复杂度是啥"><span>Redis所有的Key存储是什么数据结构，查找时间复杂度是啥</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>哈希表hash</span></span>\n<span class="line"><span>O(1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表"><span>哈希表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>散列函数 f(key)</span></span>\n<span class="line"><span>数组存放记录 - 数组也称为散列表</span></span>\n<span class="line"><span>给定表M，任意key通过f(key)直接获取表中的地址，则为哈希表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis的对象" tabindex="-1"><a class="header-anchor" href="#redis的对象"><span>Redis的对象</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>struct{ type, encoding, pointer }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="c语言字符串" tabindex="-1"><a class="header-anchor" href="#c语言字符串"><span>C语言字符串</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>获取长度时间复杂度O(N)</span></span>\n<span class="line"><span>不能有&#39;\\0&#39;所以无法保存二进制数据</span></span>\n<span class="line"><span>字符串操作有缓冲区溢出风险</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sds" tabindex="-1"><a class="header-anchor" href="#sds"><span>SDS</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>simple dynamis string 简单动态字符串</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>{len,alloc,flags,buf[]}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Redis之中是双向链表</span></span>\n<span class="line"><span>表头表尾节点获取时间复杂度都是O(1)</span></span>\n<span class="line"><span>节点可以存储不同类型的值</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>链表因为内存不连续无法很好利用CPU缓存(数组因为内存是连续所以可以充分利用CPU缓存)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="压缩列表" tabindex="-1"><a class="header-anchor" href="#压缩列表"><span>压缩列表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>内存紧凑型</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>过多元素查询效率会降低</span></span>\n<span class="line"><span>新增修改需要内存空间重新分配</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跳表" tabindex="-1"><a class="header-anchor" href="#跳表"><span>跳表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>zset对象底层用到了</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>zrangebyscore范围查找就是用到了跳表，而查找元素用到了哈希表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>跳表是链表基础上改进，号称 [多层] 的有序链表</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>查找复杂度是 O(logN)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>struct{ []skiplistlevl{*pointer...} }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么用跳表而不用平衡树-avl树-红黑树" tabindex="-1"><a class="header-anchor" href="#为什么用跳表而不用平衡树-avl树-红黑树"><span>为什么用跳表而不用平衡树(AVL树\\红黑树)</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>内存灵活</span></span>\n<span class="line"><span>范围查找简单</span></span>\n<span class="line"><span>经常更新消耗更小</span></span>\n<span class="line"><span>实现难度更简单</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',25)]))}]]),d=JSON.parse('{"path":"/posts/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"数据结构角度解释各种数据类型差别","lang":"zh-CN","frontmatter":{"hide":true,"description":"数据结构角度解释各种数据类型差别 各种数据类型用了哪些数据结构 新旧版本(Redis 3.0 和 Redis 7.0最新)涉及哪9种数据结构 Redis所有的Key存储是什么数据结构，查找时间复杂度是啥 哈希表 Redis的对象 C语言字符串 SDS 链表 压缩列表 跳表 原理 为什么用跳表而不用平衡树(AVL树\\\\红黑树)","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"数据结构角度解释各种数据类型差别"}],["meta",{"property":"og:description","content":"数据结构角度解释各种数据类型差别 各种数据类型用了哪些数据结构 新旧版本(Redis 3.0 和 Redis 7.0最新)涉及哪9种数据结构 Redis所有的Key存储是什么数据结构，查找时间复杂度是啥 哈希表 Redis的对象 C语言字符串 SDS 链表 压缩列表 跳表 原理 为什么用跳表而不用平衡树(AVL树\\\\红黑树)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构角度解释各种数据类型差别\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"各种数据类型用了哪些数据结构","slug":"各种数据类型用了哪些数据结构","link":"#各种数据类型用了哪些数据结构","children":[]},{"level":3,"title":"新旧版本(Redis 3.0 和 Redis 7.0最新)涉及哪9种数据结构","slug":"新旧版本-redis-3-0-和-redis-7-0最新-涉及哪9种数据结构","link":"#新旧版本-redis-3-0-和-redis-7-0最新-涉及哪9种数据结构","children":[]},{"level":3,"title":"Redis所有的Key存储是什么数据结构，查找时间复杂度是啥","slug":"redis所有的key存储是什么数据结构-查找时间复杂度是啥","link":"#redis所有的key存储是什么数据结构-查找时间复杂度是啥","children":[]},{"level":3,"title":"哈希表","slug":"哈希表","link":"#哈希表","children":[]},{"level":3,"title":"Redis的对象","slug":"redis的对象","link":"#redis的对象","children":[]},{"level":3,"title":"C语言字符串","slug":"c语言字符串","link":"#c语言字符串","children":[]},{"level":3,"title":"SDS","slug":"sds","link":"#sds","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]},{"level":3,"title":"压缩列表","slug":"压缩列表","link":"#压缩列表","children":[]},{"level":3,"title":"跳表","slug":"跳表","link":"#跳表","children":[]},{"level":3,"title":"为什么用跳表而不用平衡树(AVL树\\\\红黑树)","slug":"为什么用跳表而不用平衡树-avl树-红黑树","link":"#为什么用跳表而不用平衡树-avl树-红黑树","children":[]}],"readingTime":{"minutes":1.56,"words":469},"filePathRelative":"posts/redis/数据结构理解数据类型.md","excerpt":"\\n<h3>各种数据类型用了哪些数据结构</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>string 简单动态字符串 SDS(simple dynamis string)</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>zset 跳表 + listpack</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>hash 哈希表</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>set 整数集合 + 哈希表</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>list quicklist</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);