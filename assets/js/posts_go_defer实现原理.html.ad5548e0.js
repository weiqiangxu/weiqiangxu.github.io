"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9662],{6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},1409:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>p});var e=a(641);const i={},l=(0,a(6262).A)(i,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="defer" tabindex="-1"><a class="header-anchor" href="#defer"><span>defer</span></a></h1><ol><li>特性(延迟调用、异常处理、运行时间点、后进先出、return执行顺序)</li><li>源码(数据结构、deferproc、newdefer、deferreturn)</li></ol><h3 id="_1-延迟函数fmt-println在执行的时候参数就被确定" tabindex="-1"><a class="header-anchor" href="#_1-延迟函数fmt-println在执行的时候参数就被确定"><span>1.延迟函数fmt.Println在执行的时候参数就被确定</span></a></h3><h3 id="_2-return非原子-分为set返回值和callback-返回值-中间执行defer" tabindex="-1"><a class="header-anchor" href="#_2-return非原子-分为set返回值和callback-返回值-中间执行defer"><span>2.return非原子，分为<code>set返回值</code>和<code>callback 返回值</code>,中间执行<code>defer</code></span></a></h3><h3 id="_3-具名返回值在set返回值后可以被修改" tabindex="-1"><a class="header-anchor" href="#_3-具名返回值在set返回值后可以被修改"><span>3.具名返回值在<code>set返回值后</code>可以被修改</span></a></h3><h3 id="_4-defer要改变返回值-改变的是在set值之后的具名返回值" tabindex="-1"><a class="header-anchor" href="#_4-defer要改变返回值-改变的是在set值之后的具名返回值"><span>4.defer要改变返回值，改变的是在<code>set值之后的具名返回值</code></span></a></h3><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// main.go</span></span>\n<span class="line"><span>package main</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import &quot;fmt&quot;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func main() {</span></span>\n<span class="line"><span>\ti := foo()</span></span>\n<span class="line"><span>\tfmt.Println(i)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tz := deferFuncReturn()</span></span>\n<span class="line"><span>\tfmt.Println(z)</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 为什么结果是0</span></span>\n<span class="line"><span>func foo() int {</span></span>\n<span class="line"><span>\tvar i int</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tfmt.Printf(&quot;out1 = %p\\n&quot;, &amp;i)</span></span>\n<span class="line"><span>\tdefer func() {</span></span>\n<span class="line"><span>\t\tfmt.Printf(&quot;in1 = %p\\n&quot;, &amp;i)</span></span>\n<span class="line"><span>\t\ti++</span></span>\n<span class="line"><span>\t}()</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\treturn i</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 为什么结果是1</span></span>\n<span class="line"><span>func deferFuncReturn() (result int) {</span></span>\n<span class="line"><span>\tvar i int</span></span>\n<span class="line"><span>\tfmt.Printf(&quot;out = %p\\n&quot;, &amp;result)</span></span>\n<span class="line"><span>\tdefer func() {</span></span>\n<span class="line"><span>\t\tresult++</span></span>\n<span class="line"><span>\t\tfmt.Printf(&quot;in = %p\\n&quot;, &amp;result)</span></span>\n<span class="line"><span>\t}()</span></span>\n<span class="line"><span>\treturn i</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 为什么结果是1</span></span>\n<span class="line"><span>func foo() int {</span></span>\n<span class="line"><span>    var i int</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    defer func() {</span></span>\n<span class="line"><span>        i++</span></span>\n<span class="line"><span>    }()</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    return 1</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 为什么结果是 2</span></span>\n<span class="line"><span>func foo() (ret int) {</span></span>\n<span class="line"><span>    defer func() {</span></span>\n<span class="line"><span>        ret++</span></span>\n<span class="line"><span>    }()</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    return 1</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 为什么输出是0</span></span>\n<span class="line"><span>func a() {</span></span>\n<span class="line"><span>    i := 0</span></span>\n<span class="line"><span>    defer fmt.Println(i)</span></span>\n<span class="line"><span>    i++</span></span>\n<span class="line"><span>    return</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7)]))}]]),p=JSON.parse('{"path":"/posts/go/defer%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"defer","lang":"zh-CN","frontmatter":{"description":"defer 特性(延迟调用、异常处理、运行时间点、后进先出、return执行顺序) 源码(数据结构、deferproc、newdefer、deferreturn) 1.延迟函数fmt.Println在执行的时候参数就被确定 2.return非原子，分为set返回值和callback 返回值,中间执行defer 3.具名返回值在set返回值后可以被修改 ...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/defer%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"defer"}],["meta",{"property":"og:description","content":"defer 特性(延迟调用、异常处理、运行时间点、后进先出、return执行顺序) 源码(数据结构、deferproc、newdefer、deferreturn) 1.延迟函数fmt.Println在执行的时候参数就被确定 2.return非原子，分为set返回值和callback 返回值,中间执行defer 3.具名返回值在set返回值后可以被修改 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"defer\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"1.延迟函数fmt.Println在执行的时候参数就被确定","slug":"_1-延迟函数fmt-println在执行的时候参数就被确定","link":"#_1-延迟函数fmt-println在执行的时候参数就被确定","children":[]},{"level":3,"title":"2.return非原子，分为set返回值和callback 返回值,中间执行defer","slug":"_2-return非原子-分为set返回值和callback-返回值-中间执行defer","link":"#_2-return非原子-分为set返回值和callback-返回值-中间执行defer","children":[]},{"level":3,"title":"3.具名返回值在set返回值后可以被修改","slug":"_3-具名返回值在set返回值后可以被修改","link":"#_3-具名返回值在set返回值后可以被修改","children":[]},{"level":3,"title":"4.defer要改变返回值，改变的是在set值之后的具名返回值","slug":"_4-defer要改变返回值-改变的是在set值之后的具名返回值","link":"#_4-defer要改变返回值-改变的是在set值之后的具名返回值","children":[]}],"readingTime":{"minutes":0.81,"words":242},"filePathRelative":"posts/go/defer实现原理.md","excerpt":"\\n<ol>\\n<li>特性(延迟调用、异常处理、运行时间点、后进先出、return执行顺序)</li>\\n<li>源码(数据结构、deferproc、newdefer、deferreturn)</li>\\n</ol>\\n<h3>1.延迟函数fmt.Println在执行的时候参数就被确定</h3>\\n<h3>2.return非原子，分为<code>set返回值</code>和<code>callback 返回值</code>,中间执行<code>defer</code></h3>\\n<h3>3.具名返回值在<code>set返回值后</code>可以被修改</h3>\\n<h3>4.defer要改变返回值，改变的是在<code>set值之后的具名返回值</code></h3>","autoDesc":true}')}}]);