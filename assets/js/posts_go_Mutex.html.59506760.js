"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6174],{6262:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,a]of i)s[e]=a;return s}},497:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>t,data:()=>l});var a=s(641);const n={},t=(0,s(6262).A)(n,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h3 id="goroutine-获得锁的逻辑" tabindex="-1"><a class="header-anchor" href="#goroutine-获得锁的逻辑"><span>goroutine 获得锁的逻辑</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>type mutex struct {</span></span>\n<span class="line"><span>    state int32 // 未加锁</span></span>\n<span class="line"><span>    sema uint32 // 信号量</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>lock 和 unlock 都是atomic包提供函数原子性操作该字段</p></blockquote><ol><li>正常模式 goroutine自旋几次 - 原子操作获得锁 ，如果自旋几次都拿不到锁，则通过信号量排队等待 FIFO</li><li>饥饿模式 goroutine加锁等待超过1ms后</li></ol><h3 id="正常模式" tabindex="-1"><a class="header-anchor" href="#正常模式"><span>正常模式</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>自旋、排队</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>高吞吐、尾端延迟</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="饥饿模式" tabindex="-1"><a class="header-anchor" href="#饥饿模式"><span>饥饿模式</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FIFO</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="metex-state常量定义" tabindex="-1"><a class="header-anchor" href="#metex-state常量定义"><span>Metex.State常量定义</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>表示已经加锁 mutexLocked</span></span>\n<span class="line"><span>记录是否已有goroutine唤醒</span></span>\n<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a></p>',11)]))}]]),l=JSON.parse('{"path":"/posts/go/Mutex.html","title":"mutex包","lang":"zh-CN","frontmatter":{"title":"mutex包","tags":["GO原理"],"categories":["go"],"date":"2023-04-08T06:40:12.000Z","index_img":"/images/bg/computer.jpeg","hide":true,"description":"goroutine 获得锁的逻辑 lock 和 unlock 都是atomic包提供函数原子性操作该字段 正常模式 goroutine自旋几次 - 原子操作获得锁 ，如果自旋几次都拿不到锁，则通过信号量排队等待 FIFO 饥饿模式 goroutine加锁等待超过1ms后 正常模式 饥饿模式 Metex.State常量定义 Golang合集","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/Mutex.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"mutex包"}],["meta",{"property":"og:description","content":"goroutine 获得锁的逻辑 lock 和 unlock 都是atomic包提供函数原子性操作该字段 正常模式 goroutine自旋几次 - 原子操作获得锁 ，如果自旋几次都拿不到锁，则通过信号量排队等待 FIFO 饥饿模式 goroutine加锁等待超过1ms后 正常模式 饥饿模式 Metex.State常量定义 Golang合集"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"GO原理"}],["meta",{"property":"article:published_time","content":"2023-04-08T06:40:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mutex包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-08T06:40:12.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"goroutine 获得锁的逻辑","slug":"goroutine-获得锁的逻辑","link":"#goroutine-获得锁的逻辑","children":[]},{"level":3,"title":"正常模式","slug":"正常模式","link":"#正常模式","children":[]},{"level":3,"title":"饥饿模式","slug":"饥饿模式","link":"#饥饿模式","children":[]},{"level":3,"title":"Metex.State常量定义","slug":"metex-state常量定义","link":"#metex-state常量定义","children":[]}],"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"posts/go/Mutex.md","localizedDate":"2023年4月8日","excerpt":"<h3>goroutine 获得锁的逻辑</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>type mutex struct {</span></span>\\n<span class=\\"line\\"><span>    state int32 // 未加锁</span></span>\\n<span class=\\"line\\"><span>    sema uint32 // 信号量</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);