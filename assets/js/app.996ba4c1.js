"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3524],{1709:(s,i,n)=>{n.d(i,{l:()=>a});const a={category:{"/":{path:"/category/",map:{分布式:{path:"/category/%E5%88%86%E5%B8%83%E5%BC%8F/",indexes:[0,1,2,3]},领域驱动设计:{path:"/category/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/",indexes:[4]},docker:{path:"/category/docker/",indexes:[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},git:{path:"/category/git/",indexes:[23]},etcd:{path:"/category/etcd/",indexes:[24,25,26,27,28]},kubernetes:{path:"/category/kubernetes/",indexes:[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64]},go:{path:"/category/go/",indexes:[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87]},golang:{path:"/category/golang/",indexes:[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104]},樱桃:{path:"/category/%E6%A8%B1%E6%A1%83/",indexes:[105]},火龙果:{path:"/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",indexes:[106]},水果:{path:"/category/%E6%B0%B4%E6%9E%9C/",indexes:[106]},gmp:{path:"/category/gmp/",indexes:[73]},java:{path:"/category/java/",indexes:[107,108,109]},kafka:{path:"/category/kafka/",indexes:[110,111,112,113,114,115,116,117,118]},linux:{path:"/category/linux/",indexes:[119,120,121,122,123,124,125,126,127,128,129]},network:{path:"/category/network/",indexes:[130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145]},Nginx:{path:"/category/nginx/",indexes:[146,147,148]},prometheus:{path:"/category/prometheus/",indexes:[149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165]},restfulAPI:{path:"/category/restfulapi/",indexes:[166]}}}},tag:{"/":{path:"/tag/",map:{CAP:{path:"/tag/cap/",indexes:[0]},CDN:{path:"/tag/cdn/",indexes:[1]},分布式事务:{path:"/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",indexes:[2]},架构设计:{path:"/tag/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/",indexes:[3]},领域驱动模型设计:{path:"/tag/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/",indexes:[4]},docker:{path:"/tag/docker/",indexes:[34,90,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22]},git:{path:"/tag/git/",indexes:[23]},etcd:{path:"/tag/etcd/",indexes:[24,25,26,27,28]},network:{path:"/tag/network/",indexes:[29,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145]},go:{path:"/tag/go/",indexes:[74,75,76,77,78,79,80,81,82,83,84,85,86,87]},golang:{path:"/tag/golang/",indexes:[164,88,89,90,91,92,94,95,96,97,98,99,100,101,102,103,104,167]},GO原理:{path:"/tag/go%E5%8E%9F%E7%90%86/",indexes:[65,66,67,68,69,70,71]},红:{path:"/tag/%E7%BA%A2/",indexes:[106,105]},小:{path:"/tag/%E5%B0%8F/",indexes:[105]},圆:{path:"/tag/%E5%9C%86/",indexes:[105]},大:{path:"/tag/%E5%A4%A7/",indexes:[106]},GMP:{path:"/tag/gmp/",indexes:[73]},GO:{path:"/tag/go/",indexes:[73]},"golangci-lint":{path:"/tag/golangci-lint/",indexes:[102]},fmt:{path:"/tag/fmt/",indexes:[102]},gin:{path:"/tag/gin/",indexes:[93]},mongodb:{path:"/tag/mongodb/",indexes:[162,163,164,103]},单元测试:{path:"/tag/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/",indexes:[88]},net:{path:"/tag/net/",indexes:[72]},java:{path:"/tag/java/",indexes:[162,163,107,108,109]},kafka原理:{path:"/tag/kafka%E5%8E%9F%E7%90%86/",indexes:[110,111,112,113,114,116,117,118]},kafka:{path:"/tag/kafka/",indexes:[115]},cicd:{path:"/tag/cicd/",indexes:[17,167]},dockerfile:{path:"/tag/dockerfile/",indexes:[17]},kata:{path:"/tag/kata/",indexes:[34]},kubernetes:{path:"/tag/kubernetes/",indexes:[32,33,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61]},runc:{path:"/tag/runc/",indexes:[40]},containerd:{path:"/tag/containerd/",indexes:[40]},kubectl:{path:"/tag/kubectl/",indexes:[41]},helm:{path:"/tag/helm/",indexes:[57]},telepresence:{path:"/tag/telepresence/",indexes:[62]},Linux:{path:"/tag/linux/",indexes:[122,123,124,125,126,127,128,129]},linux:{path:"/tag/linux/",indexes:[152,119,120,121]},loki:{path:"/tag/loki/",indexes:[5,30,31]},promtail:{path:"/tag/promtail/",indexes:[5,30,31]},audit:{path:"/tag/audit/",indexes:[30]},Nginx:{path:"/tag/nginx/",indexes:[146,147,148]},alertmanager:{path:"/tag/alertmanager/",indexes:[151,154,161]},告警:{path:"/tag/%E5%91%8A%E8%AD%A6/",indexes:[151,153,154,161]},高可用:{path:"/tag/%E9%AB%98%E5%8F%AF%E7%94%A8/",indexes:[151,161]},prometheus:{path:"/tag/prometheus/",indexes:[149,150,152,153,154,155,156,157,158,159,160,162,163,164,165]},mybatis:{path:"/tag/mybatis/",indexes:[162]},api:{path:"/tag/api/",indexes:[150,156]},监控:{path:"/tag/%E7%9B%91%E6%8E%A7/",indexes:[150,156]},内存分析:{path:"/tag/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/",indexes:[150]},springboot:{path:"/tag/springboot/",indexes:[163]},chartmuseum:{path:"/tag/chartmuseum/",indexes:[63]},registry:{path:"/tag/registry/",indexes:[64]},restfulAPI:{path:"/tag/restfulapi/",indexes:[166]}}}}}},4776:(s,i,n)=>{n.d(i,{M:()=>a});const a=["/posts/architecture/CAP.html","/posts/architecture/CDN%E6%8A%80%E6%9C%AF.html","/posts/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A6%82%E5%BF%B5.html","/posts/architecture/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%8F%90%E9%AB%98%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%83%BD%E5%8A%9B.html","/posts/architecture/%E8%A7%A3%E6%9E%84%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1.html","/posts/loki/docker%E5%AE%89%E8%A3%85loki%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97.html","/posts/docker/buildx.html","/posts/docker/dind.html","/posts/docker/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.html","/posts/docker/%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C%E7%BB%99%E5%AE%B9%E5%99%A8.html","/posts/docker/%E5%88%B6%E4%BD%9C%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F.html","/posts/docker/%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E9%9A%94%E7%A6%BB.html","/posts/docker/%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8.html","/posts/docker/%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE.html","/posts/docker/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA.html","/posts/docker/%E9%9B%86%E6%88%90gvisor.html","/posts/docker/%E9%9B%86%E6%88%90kata.html","/posts/kubernetes/CI%E5%88%B6%E4%BD%9C%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F.html","/posts/kubernetes/Kubernetes%E7%BB%84%E4%BB%B6.html","/posts/kubernetes/%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4.html","/posts/network/%E4%BB%80%E4%B9%88%E6%98%AFCNI.html","/posts/network/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BD%91%E6%A1%A5.html","/posts/network/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BD%91%E7%BB%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html","/posts/gitlab/git%E5%AF%86%E9%92%A5%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE.html","/posts/etcd/Docker%E5%AE%89%E8%A3%85Etcd.html","/posts/etcd/Etcd%E5%BC%80%E5%90%AFSSL%E8%AE%A4%E8%AF%81.html","/posts/etcd/Raft%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0.html","/posts/etcd/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","/posts/etcd/%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0.html","/posts/infoq/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E5%85%B3%E5%BF%83%E7%9A%84kubernetes%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98.html","/posts/loki/%E5%9F%BA%E4%BA%8Eloki%E6%90%AD%E5%BB%BAk8s%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html","/posts/loki/%E5%9C%A8k8s%E5%88%9B%E5%BB%BAloki%E6%9C%8D%E5%8A%A1%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97.html","/posts/kubernetes/kubernetes%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html","/posts/kubernetes/containerd%E5%AE%89%E8%A3%85.html","/posts/kubernetes/containerd%E4%B8%AD%E9%9B%86%E6%88%90kata.html","/posts/kubernetes/containerd%E5%92%8Ckata_firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","/posts/kubernetes/CRD%E6%8E%A7%E5%88%B6%E5%99%A8.html","/posts/kubernetes/kubernetes%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8.html","/posts/kubernetes/kubernetes%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html","/posts/kubernetes/kubernetes%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2.html","/posts/kubernetes/k8s%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.html","/posts/kubernetes/kubectl_command.html","/posts/kubernetes/eBPF_cilium%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html","/posts/kubernetes/eBPF%E5%B7%A5%E5%85%B7%E5%BA%93.html","/posts/kubernetes/flanne%E6%8E%A5%E5%85%A5k8s.html","/posts/kubernetes/iperf%E7%94%A8%E6%B3%95.html","/posts/kubernetes/kube-proxy%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html","/posts/kubernetes/kubernetes%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98.html","/posts/kubernetes/kubernetes%E7%9A%84ingress-nginx%E9%85%8D%E7%BD%AE%E4%BC%9A%E8%AF%9D%E7%B2%98%E6%80%A7.html","/posts/kubernetes/linux%E4%B8%8A%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.html","/posts/kubernetes/Nginx-Ingress%E5%AE%89%E8%A3%85.html","/posts/kubernetes/S3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.html","/posts/kubernetes/traefik%E9%85%8D%E7%BD%AEingress%E6%9C%8D%E5%8A%A1.html","/posts/kubernetes/veth-pair%E5%92%8Chost%E7%BD%91%E6%A1%A5%E9%80%9A%E4%BF%A1.html","/posts/kubernetes/veth-pair%E5%92%8Covs-bridge%E9%80%9A%E8%AE%AF.html","/posts/kubernetes/%E5%88%9B%E5%BB%BAservice%E6%8C%87%E5%90%91%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1.html","/posts/kubernetes/%E5%88%9D%E8%AF%86CRD.html","/posts/kubernetes/%E5%88%B6%E4%BD%9Chelm%E5%8C%85%E5%92%8C%E8%87%AA%E5%BB%BAChart%E4%BB%93%E5%BA%93.html","/posts/kubernetes/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85kubernetes.html","/posts/kubernetes/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0node%E8%8A%82%E7%82%B9.html","/posts/kubernetes/%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8.html","/posts/kubernetes/%E7%94%A8CNI%E7%BB%99docker%E5%AE%B9%E5%99%A8%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C.html","/posts/kubernetes/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7telepresence.html","/posts/registry/chartmuseum.html","/posts/registry/registry.html","/posts/go/Channel.html","/posts/go/GC.html","/posts/go/GMP-hello%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html","/posts/go/GMP-%E5%8D%8F%E7%A8%8B%E8%AE%A9%E5%87%BA%E6%8A%A2%E5%8D%A0%E8%B0%83%E5%BA%A6%E7%9B%91%E6%8E%A7.html","/posts/go/map.html","/posts/go/Mutex.html","/posts/go/%E4%BF%A1%E5%8F%B7%E9%87%8F.html","/posts/go/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91.html","/posts/go/GMP-%E8%AE%A9%E5%87%BA%E6%81%A2%E5%A4%8D%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.html","/posts/go/2.GPM%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3.html","/posts/go/7.defer%E7%9F%A5%E8%AF%86%E7%82%B9.html","/posts/go/8.GoModules.html","/posts/go/UnitTest%E8%A7%84%E8%8C%83.html","/posts/go/%E4%B8%AA%E4%BA%BA%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.html","/posts/go/%E4%BA%92%E6%96%A5%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/%E4%BB%A3%E7%A0%81%E5%88%86%E5%B1%82%E5%AE%9E%E8%B7%B5.html","/posts/go/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88.html","/posts/go/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA.html","/posts/go/%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1GoModules.html","/posts/go/%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B.html","/posts/go/%E7%9B%91%E5%90%AC%E4%BF%A1%E5%8F%B7.html","/posts/go/%E8%AF%BB%E5%86%99%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.html","/posts/go/%E5%A6%82%E4%BD%95%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","/posts/go/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEgo%E7%A7%81%E6%9C%89%E5%BA%93.html","/posts/go/golang%E5%AF%BC%E5%87%BAdocker%E9%95%9C%E5%83%8F.html","/posts/go/%E4%BC%98%E5%8C%96params%E6%98%AFany%E6%8E%A5%E5%8F%A3.html","/posts/go/ApiGetway%E8%AE%BE%E8%AE%A1.html","/posts/go/middleware%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BE%9D%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%93%E6%8B%BC%E6%8E%A5URL.html","/posts/go/%E8%85%BE%E8%AE%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html","/posts/go/module%E5%86%B2%E7%AA%81.html","/posts/go/%E4%BD%BF%E7%94%A8range%E5%BF%85%E6%87%82%E7%9A%84%E7%82%B9.html","/posts/go/goland%E5%BF%AB%E6%8D%B7%E9%94%AE.html","/posts/go/golang%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%92%8C%E5%80%BC%E4%BC%A0%E9%80%92.html","/posts/go/golang%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.html","/posts/go/golang%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","/posts/go/golang%E9%9D%99%E6%80%81%E6%89%AB%E6%8F%8F%E5%92%8C%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5.html","/posts/go/mongodb%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F.html","/posts/go/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0pkg.html","/posts/go/cherry.html","/posts/go/dragonfruit.html","/posts/java/docker%E5%AE%89%E8%A3%85maven%E4%BB%93%E5%BA%93.html","/posts/java/Java%E7%89%88%E6%9C%AC.html","/posts/java/%E5%88%B6%E4%BD%9Cmaven%E5%8C%85.html","/posts/kafka/group.html","/posts/kafka/kafka%E5%9F%BA%E7%A1%80.html","/posts/kafka/kafka%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html","/posts/kafka/Rebalance%E6%9C%BA%E5%88%B6.html","/posts/kafka/%E5%88%86%E5%8C%BA%E5%92%8C%E5%89%AF%E6%9C%AC%E6%9C%BA%E5%88%B6.html","/posts/kafka/%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3.html","/posts/kafka/%E5%90%8C%E6%AD%A5%E5%8F%91%E9%80%81%E5%92%8C%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81.html","/posts/kafka/%E5%90%8C%E6%AD%A5%E6%8F%90%E4%BA%A4%E5%92%8C%E5%BC%82%E6%AD%A5%E6%8F%90%E4%BA%A4.html","/posts/kafka/%E5%A6%82%E4%BD%95%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E5%8F%88%E4%B8%8D%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE.html","/posts/linux/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9.html","/posts/linux/%E7%BD%91%E7%BB%9C.html","/posts/loki/loki.html","/posts/linux/cpu%E6%9E%B6%E6%9E%84.html","/posts/linux/float%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6.html","/posts/linux/%E4%BA%8C%E8%BF%9B%E5%88%B6.html","/posts/linux/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html","/posts/linux/%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87.html","/posts/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","/posts/linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html","/posts/linux/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA.html","/posts/network/DNS%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%9C%89%E5%93%AA%E4%BA%9B.html","/posts/network/ipip%E9%9A%A7%E9%81%93%E9%80%9A%E8%AE%AF.html","/posts/network/NAT%E9%85%8D%E7%BD%AE%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE.html","/posts/network/tcp%E7%B2%98%E5%8C%85.html","/posts/network/tcp%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%8A%93%E5%8C%85.html","/posts/network/tcp%E8%BF%9E%E6%8E%A5%E5%8F%AF%E4%BB%A5%E4%B8%80%E7%9B%B4%E4%BF%9D%E6%8C%81%E5%90%97.html","/posts/network/websocket.html","/posts/network/write_broken_pipe.html","/posts/network/%E4%BB%80%E4%B9%88%E6%98%AFDHCP.html","/posts/network/%E4%BB%80%E4%B9%88%E6%98%AF%E9%82%BB%E5%B1%85%E8%A1%A8.html","/posts/network/%E4%BD%BF%E7%94%A8tun%E8%AE%BE%E5%A4%87%E5%AE%9E%E7%8E%B0VPN%E9%80%9A%E4%BF%A1.html","/posts/network/%E5%9B%BE%E8%A7%A3%E6%B3%9B%E6%B4%AA%E4%B8%8E%E5%B9%BF%E6%92%AD%E9%A3%8E%E6%9A%B4.html","/posts/network/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GRE%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1.html","/posts/network/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BAvxlan%E7%BD%91%E7%BB%9C.html","/posts/network/%E6%9E%84%E5%BB%BAVPN%E9%80%9A%E8%AE%AF.html","/posts/network/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80.html","/posts/nginx/%E4%BC%9A%E8%AF%9D%E7%B2%98%E6%80%A7.html","/posts/nginx/%E5%9F%9F%E5%90%8D%E6%8C%87%E5%90%91%E9%85%8D%E7%BD%AE.html","/posts/nginx/%E5%BC%80%E5%90%AFSSL%E9%AA%8C%E8%AF%81.html","/posts/prometheus/snapshot%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE.html","/posts/prometheus/prometheus%E7%9A%84%E8%B5%84%E6%BA%90%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90.html","/posts/prometheus/alertmanager%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%BA%E5%88%B6.html","/posts/prometheus/%E6%9F%A5%E7%9C%8Bprometheus%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98.html","/posts/prometheus/%E6%90%AD%E5%BB%BAalertmanager%E5%91%8A%E8%AD%A6%E6%9C%8D%E5%8A%A1.html","/posts/prometheus/%E7%AE%80%E5%8D%95%E7%9A%84webhook.html","/posts/prometheus/golang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%8C%87%E6%A0%87exporter.html","/posts/prometheus/node_exporter%E6%8C%87%E6%A0%87%E8%A7%A3%E6%9E%90.html","/posts/prometheus/prometheus%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90.html","/posts/prometheus/prometheus%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88%E9%A2%84%E7%A0%94.html","/posts/prometheus/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BA%E8%81%94%E9%82%A6%E6%9C%BA%E5%88%B6%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.html","/posts/prometheus/%E5%9F%BA%E4%BA%8E%E8%BF%9C%E7%A8%8B%E5%86%99%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AEprometheus%E9%9B%86%E7%BE%A4.html","/posts/prometheus/alertmanager%E7%9A%84%E5%8E%86%E5%8F%B2%E5%91%8A%E8%AD%A6.html","/posts/prometheus/mybatis%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87.html","/posts/prometheus/springboot%E7%9A%84mongodb%E6%8C%87%E6%A0%87.html","/posts/prometheus/mongodb%E6%8C%87%E6%A0%87%E9%87%87%E9%9B%86.html","/posts/prometheus/%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8prometheus%E6%9C%8D%E5%8A%A1.html","/posts/restfulapi/restfulAPI.html","/posts/kubernetes/%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91kata.html","/intro.html","/posts/","/posts/architecture/","/posts/architecture/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B.html","/posts/cicd/","/posts/consul/","/posts/elastic/10%E9%81%93%E4%B8%8D%E5%BE%97%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98.html","/posts/elastic/Elastic%E9%9B%86%E7%BE%A4.html","/posts/elastic/","/posts/gitlab/gitlab-ci%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99.html","/posts/gitlab/Linux%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html","/posts/gitlab/","/posts/gitlab/runner%E5%9C%A8Docker%E5%AE%89%E8%A3%85.html","/posts/gitlab/runner%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C.html","/posts/gitlab/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%B5%81%E6%B0%B4%E7%BA%BFfmt__lint.html","/posts/gitlab/%E6%90%AD%E5%BB%BAdocker%20hub%E7%A7%81%E6%9C%8D.html","/posts/gitlab/%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8.html","/posts/infoq/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E8%89%BA%E6%9C%AF.html","/posts/go/chan%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/posts/go/Context%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","/posts/go/defer%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/for%E5%92%8Crange%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83.html","/posts/go/gin-pprof.html","/posts/go/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html","/posts/go/golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html","/posts/go/GPM%E5%8E%9F%E7%90%86%E5%92%8C%E8%B0%83%E5%BA%A6.html","/posts/go/GRPC%E5%BA%95%E5%B1%82%E8%B0%83%E4%BC%98.html","/posts/go/log%E6%BA%90%E7%A0%81.html","/posts/go/map%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/map%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/posts/go/pprof%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html","/posts/go/","/posts/go/reflect%E7%9A%84%E6%80%A7%E8%83%BD.html","/posts/go/runtime%E5%8C%85.html","/posts/go/Security%E8%A7%84%E8%8C%83.html","/posts/go/slice%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/posts/go/Socket%E6%98%AF%E4%BB%80%E4%B9%88.html","/posts/go/string.html","/posts/go/string%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/posts/go/struct%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/posts/go/sync.Map%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFopenTracing.html","/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFstream.html","/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFunary.html","/posts/go/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C.html","/posts/go/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8errors.html","/posts/go/%E5%A6%82%E4%BD%95%E5%88%A4%E5%AE%9A%E9%9B%B6%E5%80%BC.html","/posts/go/%E5%A6%82%E4%BD%95%E6%B1%A0%E5%8C%96%E8%BF%9E%E6%8E%A5.html","/posts/go/%E5%A6%82%E4%BD%95%E9%80%80%E5%87%BA%E5%8D%8F%E7%A8%8B.html","/posts/go/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD%E5%8F%8A%E5%8E%9F%E7%90%86.html","/posts/go/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8EDDD.html","/posts/go/%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6.html","/posts/go/%E6%8F%AD%E7%A7%98Build%E7%BA%A6%E6%9D%9F.html","/posts/go/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91.html","/posts/go/%E9%9D%A2%E8%AF%95%E9%A2%98.html","/posts/kafka/","/posts/kubernetes/Chart.html","/posts/kubernetes/endpoints.html","/posts/kubernetes/harbor%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html","/posts/kubernetes/k8s%E4%B8%8A%E6%90%AD%E5%BB%BAMySQL%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4.html","/posts/kubernetes/k8s%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86.html","/posts/kubernetes/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6.html","/posts/kubernetes/kubeadm.html","/posts/kubernetes/kubeadm%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0.html","/posts/kubernetes/kubectl.html","/posts/kubernetes/pod%E6%97%A5%E5%BF%97.html","/posts/kubernetes/","/posts/kubernetes/systemctl.html","/posts/kubernetes/%E5%88%9B%E5%BB%BAinformer.html","/posts/linux/linux%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E5%AF%86%E9%92%A5.html","/posts/linux/Linux%E7%BB%93%E6%9E%84%E7%BB%84%E6%88%90.html","/posts/linux/lsof%E5%91%BD%E4%BB%A4.html","/posts/linux/rpm.html","/posts/linux/uname.html","/posts/linux/%E5%8F%91%E8%A1%8C%E7%89%88%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html","/posts/linux/%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB.html","/posts/linux/%E7%BD%91%E5%8D%A1.html","/posts/makefile/awk%E4%BD%BF%E7%94%A8.html","/posts/makefile/docker.html","/posts/makefile/","/posts/makefile/%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD.html","/posts/makefile/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html","/posts/mongodb/mongo_single.html","/posts/mongodb/Mongo%E9%9B%86%E7%BE%A4.html","/posts/mysql/MVCC%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html","/posts/mysql/MySQL%E5%88%86%E5%B1%82.html","/posts/mysql/MySQL%E8%A7%84%E8%8C%83.html","/posts/mysql/MySQL%E9%9B%86%E7%BE%A4.html","/posts/mysql/SQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3.html","/posts/mysql/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","/posts/nacos/docker%E5%AE%89%E8%A3%85nacos.html","/posts/nacos/nacos.html","/posts/nacos/","/posts/redis/bitmap%E4%BD%8D%E5%9B%BE.html","/posts/redis/Blogs.html","/posts/redis/cluster.html","/posts/redis/Hash.html","/posts/redis/Key.html","/posts/redis/List.html","/posts/redis/plan.html","/posts/redis/","/posts/redis/Redis%E4%B8%BB%E4%BB%8E%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","/posts/redis/Redis%E4%BA%8B%E5%8A%A1.html","/posts/redis/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.html","/posts/redis/Redis%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8.html","/posts/redis/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D.html","/posts/redis/Redis%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.html","/posts/redis/Redis%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E5%92%8C%E7%A9%BF%E9%80%8F.html","/posts/redis/Redis%E9%99%90%E9%A2%91.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8FDocker%E6%90%AD%E5%BB%BA.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E7%89%87Cluster%E6%A8%A1%E5%BC%8F.html","/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html","/posts/redis/Set.html","/posts/redis/String.html","/posts/redis/%E5%88%86%E7%89%87RedisCluster%E5%8E%9F%E7%90%86.html","/posts/redis/%E5%88%86%E7%89%87RedisCluster%E6%90%AD%E5%BB%BA.html","/posts/redis/%E5%88%86%E7%89%87%E6%8A%80%E6%9C%AF.html","/posts/redis/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html","/posts/redis/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html","/posts/redis/%E6%8C%81%E4%B9%85%E5%8C%96AOF%E6%97%A5%E5%BF%97.html","/posts/redis/%E6%8C%81%E4%B9%85%E5%8C%96RDB%E5%BF%AB%E7%85%A7.html","/posts/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","/posts/redis/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0.html","/posts/redis/%E9%AB%98%E5%8F%AF%E7%94%A8-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E8%A7%A3.html"]},3781:(s,i,n)=>{n.d(i,{U:()=>a});const a={article:{"/":{path:"/article/",indexes:[29,5,30,31,32,33,34,35,36,37,38,39,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,88,89,119,120,121,90,91,92,93,94,95,0,1,2,3,4,65,66,67,68,69,70,71,72,110,111,112,113,114,115,116,117,118,40,41,96,106,105,97,98,99,100,101,102,103,104,23,73,168,169,170,171,172,173,6,7,8,9,10,11,12,13,14,15,16,174,175,176,177,178,179,180,181,182,183,184,24,25,26,27,28,185,74,75,76,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,77,78,79,209,210,211,80,81,82,212,213,214,215,216,217,83,218,219,220,221,84,85,86,87,222,107,108,109,223,224,17,42,43,225,44,226,45,227,228,229,46,230,231,232,47,48,18,49,50,233,234,51,235,52,53,54,236,55,56,57,167,58,59,60,61,19,62,122,123,237,238,239,240,241,124,125,126,242,243,127,128,129,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,130,131,132,133,134,135,136,137,20,138,21,22,139,140,141,142,143,144,145,146,147,148,165,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,63,64,166]}},star:{"/":{path:"/star/",indexes:[]}},timeline:{"/":{path:"/timeline/",indexes:[29,5,30,31,32,119,120,121,33,34,35,36,37,38,90,91,39,149,150,151,152,92,93,94,95,153,154,155,156,0,1,2,3,4,65,66,67,68,69,70,71,72,110,111,112,113,114,115,116,117,118,40,41,157,158,159,160,96,161,162,163,164,106,105,88,89,97,98,99,100,101,102,103,104,23,73]}}}},7877:(s,i,n)=>{n.d(i,{B:()=>O});var a={};n.r(a);var e={};n.r(e);var l={};n.r(l),n.d(l,{default:()=>A});var t={};n.r(t);var h={};n.r(h),n.d(h,{default:()=>f});var p={};n.r(p),n.d(p,{default:()=>x});var r={};n.r(r),n.d(r,{default:()=>M});var k=n(2402),d=n(3073),o=n(9403),c=n(596),g=n(8831);const A={enhance:({app:s})=>{(0,k.L4)("FontIcon")||s.component("FontIcon",o.A),(0,k.L4)("Badge")||s.component("Badge",c.A),(0,k.L4)("VPCard")||s.component("VPCard",g.A)},setup:()=>{(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]};var m=n(6358),E=n(3827),b=n(355),u=n(1599),v=n(8913),F=n(457),y=n(3349),B=n(1781),C=n(9212);const f={enhance:({app:s})=>{s.component("CodeTabs",B.S),s.component("Tabs",C.t)}};var D=n(8031),w=n(3027);const x={enhance:({app:s})=>{s.component("CodeDemo",D.A),s.component("MdDemo",w.A)}};var S=n(5753),I=n(5054),P=n(783),R=n(8465),_=n(641),q=n(7107),N=n(9920);(0,R.M_)((s=>{const i=s.t,n=!1!==s.I,a=s.i;return n?{title:i,content:a?()=>[(0,_.h)(P.GB,{icon:a}),i]:null,order:s.O,index:s.I}:null}));const M={enhance:({app:s,router:i})=>{const{scrollBehavior:n}=i.options;i.options.scrollBehavior=async(...s)=>(await P.lE.wait(),n(...s)),(0,P.fk)(s),s.component("HopeIcon",P.GB),s.component("BloggerInfo",q.tI),s.component("SocialMedias",q.rS),s.component("GlobalEncrypt",N.J),s.component("LocalEncrypt",N.n)},setup:()=>{(0,P.PV)(),(0,P.i$)(),(0,q.su)()},layouts:{Layout:P.PE,NotFound:P.Mk,BlogCategory:q.Pn,BlogHome:q.qX,BlogType:q.z7,Timeline:q.Kf}},O=[a,e,l,m,E,b,u,v,F,y,t,h,p,S,I,r].map((s=>s.default)).filter(Boolean)},8164:(s,i,n)=>{n.d(i,{J:()=>e,c:()=>a});const a=JSON.parse('{"/posts/gitlab/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%B5%81%E6%B0%B4%E7%BA%BFfmt&&lint.html":"/posts/gitlab/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%B5%81%E6%B0%B4%E7%BA%BFfmt__lint.html","/posts/kubernetes/containerd%E5%92%8Ckata&firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html":"/posts/kubernetes/containerd%E5%92%8Ckata_firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","/posts/kubernetes/eBPF&cilium%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html":"/posts/kubernetes/eBPF_cilium%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"}'),e=Object.fromEntries([["/intro.html",{loader:()=>n.e(3912).then(n.bind(n,558)),meta:{v:"/assets/images/cover3.jpg",e:"\n<h3>Welcome to my little world 👋</h3>\n<ul>\n<li>🔭 I’m currently working Guangzhou</li>\n<li>🌱 My favorite Golang\\Java\\PHP\\k8s\\Vue</li>\n<li>👯 Keep getting handsome</li>\n<li>💬 I love programming</li>\n<li>📫 My Email: 435861851@qq.com</li>\n</ul>\n",r:{minutes:.11,words:34},t:"介绍页",i:"circle-info",y:"a"}}],["/",{loader:()=>n.e(4470).then(n.bind(n,9908)),meta:{t:"主页",i:"home"}}],["/posts/",{loader:()=>n.e(8666).then(n.bind(n,6236)),meta:{e:"\x3c!-- <Catalog /> --\x3e\n",r:{minutes:.04,words:13},t:"程序人生",i:"laptop-code",y:"a"}}],["/posts/architecture/CAP.html",{loader:()=>n.e(2288).then(n.bind(n,4763)),meta:{d:1680936012e3,l:"2023年4月8日",c:["分布式"],g:["CAP"],e:'<h3>分布式和微服务什么意思</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>单机系统就是程序部署到一台机器，所有的服务由这一台机器提供</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>分布式系统相对而言，是一组为了完成共同任务而协调工作的计算机节点组成,它们通过网络进行通讯的系统；</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>分布式系统是多个机器共同提供服务</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.33,words:998},t:"CAP理论",y:"a"}}],["/posts/architecture/CDN%E6%8A%80%E6%9C%AF.html",{loader:()=>n.e(6850).then(n.bind(n,2221)),meta:{d:1680936012e3,l:"2023年4月8日",c:["分布式"],g:["CDN"],e:'<h3>CDN</h3>\n<ol>\n<li>CDN是什么</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>内容分发网络（Content Delivery Network，简称CDN）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>克服单机系统输出带宽及并发能力不足的缺点</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>全局负载均衡技术将用户的访问指向离用户最近的服务器</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.38,words:413},t:"CDN",y:"a"}}],["/posts/architecture/",{loader:()=>n.e(2272).then(n.bind(n,3382)),meta:{e:"\n",r:{minutes:.04,words:13},t:"微服务架构设计模式 Chris Richardson",y:"a"}}],["/posts/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A6%82%E5%BF%B5.html",{loader:()=>n.e(701).then(n.bind(n,4856)),meta:{d:1680936012e3,l:"2023年4月8日",c:["分布式"],g:["分布式事务"],e:'<p><a href="http://icyfenix.cn/architect-perspective/general-architecture/transaction/distributed.html" target="_blank" rel="noopener noreferrer">分布式事务</a></p>\n<h3>CAP</h3>\n<blockquote>\n<p>三个特性最多只能同时满足其中两个</p>\n</blockquote>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>一致性（Consistency）</span></span>\n<span class="line"><span>可用性（Availability）</span></span>\n<span class="line"><span>分区容忍性（Partition Tolerance）</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.6,words:480},t:"分布式事务 Distributed Transaction",y:"a"}}],["/posts/architecture/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%8F%90%E9%AB%98%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%83%BD%E5%8A%9B.html",{loader:()=>n.e(1958).then(n.bind(n,2933)),meta:{d:1680936012e3,l:"2023年4月8日",c:["分布式"],g:["架构设计"],e:'<h3>架构设计</h3>\n<p><a href="https://www.zhihu.com/question/395652253/answer/2458366961" target="_blank" rel="noopener noreferrer">怎么提高自己的系统设计和架构理论水平？</a></p>\n<ol>\n<li>无锁化</li>\n<li>缓存</li>\n<li>分片</li>\n</ol>\n',r:{minutes:.2,words:59},t:"架构设计",y:"a"}}],["/posts/architecture/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B.html",{loader:()=>n.e(9561).then(n.bind(n,464)),meta:{e:"<blockquote>\n<p>系统的结构，取决于系统的成员的交流方式和沟通结构</p>\n</blockquote>\n<p>设计一个组织结构或系统时，需要考虑到人们之间的沟通和协作方式，以确保最终的设计能够促进有效的沟通和协作。</p>\n<p>结构是为了高效沟通和协作，高效沟通和协作的方式决定了组织结构。</p>\n",r:{minutes:.34,words:103},t:"",y:"a"}}],["/posts/architecture/%E8%A7%A3%E6%9E%84%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1.html",{loader:()=>n.e(6930).then(n.bind(n,4900)),meta:{d:1680936012e3,l:"2023年4月8日",c:["领域驱动设计"],g:["领域驱动模型设计"],e:'<h3>专业术语</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Domain-Driven Design 领域驱动设计</span></span>\n<span class="line"><span>DataAccessobjects DAO 数据存取对象</span></span>\n<span class="line"><span>PersistenceObject PO 持久化层对象</span></span>\n<span class="line"><span>DataTransferObject DTO 数据传输对象</span></span>\n<span class="line"><span>ViewObject VO 视图对象</span></span>\n<span class="line"><span>DomainObject DO 领域对象</span></span>\n<span class="line"><span>view 展现层     </span></span>\n<span class="line"><span>service 服务层  </span></span>\n<span class="line"><span>po 数据持久化层</span></span>\n<span class="line"><span>防腐 领域之间互相访问获取到的其他域的模型需要转换映射到自己域的模型（域之间可能会有相互的依赖，需要注意域之间的防腐，并且依赖注入的方式注入而不是直接New其他域的对象出来使用）</span></span>\n<span class="line"><span>界限 域拆分依据业务水平拆分，平行而非上下</span></span>\n<span class="line"><span>领域驱动三层架构 API层\\Domain层\\Repository层</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.17,words:951},t:"领域驱动模型设计简单应用",y:"a"}}],["/posts/cicd/",{loader:()=>n.e(2132).then(n.bind(n,7273)),meta:{e:"\n<ol>\n<li>配置git环境支持GO私服moudle同步</li>\n<li>配置helm环境</li>\n<li>支持buildx多架构编译和共享主机网络</li>\n<li>支持docker私服registry验证和免SSL验证</li>\n</ol>\n",r:{minutes:.18,words:55},t:"CICD示例",y:"a"}}],["/posts/consul/",{loader:()=>n.e(9875).then(n.bind(n,2358)),meta:{e:'\n<h3>模块</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>服务发现</span></span>\n<span class="line"><span>检查健康</span></span>\n<span class="line"><span>键值对存储</span></span>\n<span class="line"><span>多数据中心</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.16,words:49},t:"consul",y:"a"}}],["/posts/docker/buildx.html",{loader:()=>n.e(5303).then(n.bind(n,5509)),meta:{c:["docker"],g:["docker"],e:'<h3>1.官网</h3>\n<p><a href="https://github.com/docker/buildx" target="_blank" rel="noopener noreferrer">https://github.com/docker/buildx</a>\n<a href="https://github.com/moby/buildkit" target="_blank" rel="noopener noreferrer">https://github.com/moby/buildkit</a></p>\n<blockquote>\n<p>buildx 命令属于实验特性，因此首先需要开启该特性，比如 ~/.docker/config.json 的 experimental 设置为 true</p>\n</blockquote>',r:{minutes:1.51,words:452},t:"buildx",i:"object-group",O:2,y:"a"}}],["/posts/docker/dind.html",{loader:()=>n.e(1910).then(n.bind(n,1120)),meta:{c:["docker"],g:["docker"],e:'<h3>什么是dind</h3>\n<blockquote>\n<p>kubernetes的编译需要用到dind，就是docker内部启动一个容器用于编译镜像，在gitlab的CI的时候可以使用</p>\n</blockquote>\n<ol>\n<li>官网</li>\n</ol>\n<p><a href="https://github.com/jpetazzo/dind" target="_blank" rel="noopener noreferrer">https://github.com/jpetazzo/dind</a>\n<a href="https://hub.docker.com/_/docker/tags?page=1&amp;name=dind" target="_blank" rel="noopener noreferrer">DockerHub上面dind的文档</a>\n<a href="https://docker-practice.github.io/zh-cn/image/dockerfile/entrypoint.html" target="_blank" rel="noopener noreferrer">ENTRYPOINT 入口点</a></p>',r:{minutes:1.23,words:370},t:"dind",i:"object-group",O:2,y:"a"}}],["/posts/docker/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(8355).then(n.bind(n,8184)),meta:{c:["docker"],g:["docker"],e:'<h3>方式一：导出rpm包或者deb包进行离线安装 - 推荐</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># rpm包导出</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> reinstall</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --downloadonly</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --downloaddir=./</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 安装rpm包</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -ivh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ./</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">*</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">.rpm</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -ivh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> package_name.rpm</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># deb包导出</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dpkg-repack</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dpkg-repack</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF"> ${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">package-name</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.96,words:289},t:"docker离线安装",i:"object-group",O:2,y:"a"}}],["/posts/docker/%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C%E7%BB%99%E5%AE%B9%E5%99%A8.html",{loader:()=>n.e(8297).then(n.bind(n,5287)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>创建无网络的docker容器然后手动分配网络</p>\n</blockquote>\n<h3>一、环境准备</h3>\n<ul>\n<li><a href="https://weiqiangxu.github.io/2023/04/18/%E8%AF%AD%E9%9B%80k8s%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener noreferrer">docker</a></li>\n</ul>\n<h3>二、运行</h3>',r:{minutes:2.76,words:828},t:"分配网络给容器",y:"a"}}],["/posts/docker/%E5%88%B6%E4%BD%9C%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F.html",{loader:()=>n.e(3132).then(n.bind(n,5750)),meta:{c:["docker"],g:["docker"],e:'<h3>方式一、使用buildx</h3>\n<ol>\n<li>多架构Go程序目录</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 文件目录</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># bin目录是go程序编译结果 go build GOOS=linx GOARCH=amd64 \\ GOARCH=arm64</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Dockerfile</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> README.md</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bin</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> amd64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> │&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tool</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> arm64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">     └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tool</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> golang</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go.mod</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│&nbsp;&nbsp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> main.go</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sh</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> start.sh</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.54,words:462},t:"制作多架构镜像",i:"object-group",O:2,y:"a"}}],["/posts/docker/%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E9%9A%94%E7%A6%BB.html",{loader:()=>n.e(203).then(n.bind(n,4954)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>创建docker容器然后分配两张不同网段的网卡，验证网络隔离环境</p>\n</blockquote>\n<h3>一、环境准备</h3>\n<ul>\n<li><a href="https://weiqiangxu.github.io/2023/04/18/%E8%AF%AD%E9%9B%80k8s%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener noreferrer">docker</a></li>\n</ul>',r:{minutes:2.2,words:661},t:"双网卡实现网络隔离",y:"a"}}],["/posts/docker/%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8.html",{loader:()=>n.e(8314).then(n.bind(n,3357)),meta:{c:["docker"],g:["docker"],e:'<h3>如何存储多架构镜像到私有库</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 多架构镜像</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># quay.io/coreos/etcd:v3.5.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --platform=linux/amd64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> quay.io/coreos/etcd:v3.5.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> quay.io/coreos/etcd:v3.5.0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   registry.my.net/bingokube/etcd:v3.5.0-amd64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --platform=linux/arm64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> quay.io/coreos/etcd:v3.5.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> quay.io/coreos/etcd:v3.5.0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   registry.my.net/bingokube/etcd:v3.5.0-arm64</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0-amd64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0-arm64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 此时无法拉取镜像下面的无法执行</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 制作清单</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> manifest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --insecure</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   registry.my.net/bingokube/etcd:v3.5.0-amd64</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   registry.my.net/bingokube/etcd:v3.5.0-arm64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 推送清单</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> manifest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --insecure</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看清单</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> manifest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.my.net/bingokube/etcd:v3.5.0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   "schemaVersion"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 2,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   "mediaType"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "application/vnd.xxx.list.v2+json",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   "manifests"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "mediaType"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "application/vnd.xxx.v2+json",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "size"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 1783,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "digest"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "sha256:abc",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "platform"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            "architecture"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "amd64",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            "os"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "linux"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">         }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "mediaType"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "application/vnd.xxx.v2+json",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "size"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 1576,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "digest"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "sha256:abc",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">         "platform"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            "architecture"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "arm64",</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            "os"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "linux"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">         }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">   ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.53,words:160},t:"多架构镜像存储",i:"object-group",O:2,y:"a"}}],["/posts/docker/%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE.html",{loader:()=>n.e(4258).then(n.bind(n,3426)),meta:{c:["docker"],g:["docker"],e:'<h3>1.进入镜像</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /root/.docker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /root/.docker/config.json</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /etc/docker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /etc/docker/daemon.json</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.14,words:41},t:"私服配置",i:"object-group",O:2,y:"a"}}],["/posts/docker/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(631).then(n.bind(n,2739)),meta:{c:["docker"],g:["docker"],e:'<h3>1.本地创建私服镜像目录</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/test</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> auth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker-compose</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/test/docker-compose/docker-compose.yml</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建一个用户，执行完成后会生成文件 /home/auth/registry.password</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/test/auth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">htpasswd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -Bc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry.password</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> root</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.9,words:569},t:"镜像仓库搭建",i:"object-group",O:2,y:"a"}}],["/posts/docker/%E9%9B%86%E6%88%90gvisor.html",{loader:()=>n.e(9601).then(n.bind(n,7994)),meta:{c:["docker"],g:["docker"],e:'<h3>一、安装gvisor</h3>\n<p><a href="https://gvisor.dev/docs/user_guide/install/" target="_blank" rel="noopener noreferrer">gvisor.dev</a></p>\n<h3>二、运行容器验证</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看当前docker支持的运行时</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Runtime</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 基于runtime=runsc创建容器</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --runtime=runsc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --memory=1g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos-test3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos:centos7</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 进入容器查看</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos-test3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 比较和宿主机的内存</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> free</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -m</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 基于runc创建容器试试(验证后发现内存隔离并未生效)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --runtime=runc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --memory=1g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos-test5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos:centos7</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.46,words:137},t:"集成gvisor",i:"object-group",O:2,y:"a"}}],["/posts/docker/%E9%9B%86%E6%88%90kata.html",{loader:()=>n.e(4638).then(n.bind(n,5174)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>理解CRI标准</p>\n</blockquote>\n<h3>一、离线安装Docker</h3>\n<p><a href="https://weiqiangxu.github.io/2023/04/18/kubernetes/%E8%AF%AD%E9%9B%80k8s%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener noreferrer">离线安装docker</a></p>\n<blockquote>\n<p>https://download.docker.com/linux/static/stable/aarch64/docker-23.0.4.tgz</p>\n</blockquote>',r:{minutes:7.96,words:2388},t:"集成kata",i:"object-group",O:2,y:"a"}}],["/posts/elastic/10%E9%81%93%E4%B8%8D%E5%BE%97%E4%B8%8D%E4%BC%9A%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98.html",{loader:()=>n.e(1036).then(n.bind(n,1954)),meta:{e:'<p><a href="https://cloud.tencent.com/developer/article/1964271" target="_blank" rel="noopener noreferrer">10道不得不会的ElasticSearch面试题</a></p>\n<ol>\n<li>说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>设计调优</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>写入调优</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>查询调优</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.83,words:248},t:"",y:"a"}}],["/posts/elastic/Elastic%E9%9B%86%E7%BE%A4.html",{loader:()=>n.e(831).then(n.bind(n,1586)),meta:{e:'\n<ol>\n<li>\n<p>多节点 多分片 <a href="https://blog.csdn.net/qq_41167306/article/details/122967059" target="_blank" rel="noopener noreferrer">集群模式</a></p>\n</li>\n<li>\n<p>官方推荐的使用docker-compose搭建Elastic集群<a href="https://registry.hub.docker.com/r/bitnami/elasticsearch" target="_blank" rel="noopener noreferrer">bitnami/elasticsearch</a></p>\n</li>\n</ol>',r:{minutes:.13,words:39},t:"Elastic高可用方案",y:"a"}}],["/posts/elastic/",{loader:()=>n.e(1018).then(n.bind(n,2557)),meta:{e:"\n<ol>\n<li>基本使用相关</li>\n<li>高性能高可用</li>\n<li>底层原理</li>\n<li>调优</li>\n</ol>\n",r:{minutes:.08,words:25},t:"elastic",y:"a"}}],["/posts/gitlab/gitlab-ci%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99.html",{loader:()=>n.e(8350).then(n.bind(n,412)),meta:{e:'\n<p><a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noopener noreferrer">https://docs.gitlab.com/ee/ci/</a></p>\n<p><a href="https://docs.gitlab.com/ee/ci/pipelines/pipeline_architectures.html#basic-pipelines" target="_blank" rel="noopener noreferrer">基本管道</a></p>\n<p><a href="https://docs.gitlab.cn/jh/ci/yaml/gitlab_ci_yaml.html" target="_blank" rel="noopener noreferrer">gitlab_ci_yaml编写规则</a></p>',r:{minutes:.72,words:216},t:"CI",y:"a"}}],["/posts/gitlab/git%E5%AF%86%E9%92%A5%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE.html",{loader:()=>n.e(1831).then(n.bind(n,9972)),meta:{d:1489041612e3,l:"2017年3月9日",c:["git"],g:["git"],e:'<h3>1.本地生成密钥</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 默认密钥文件路径</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &amp;&amp; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用账号生成SSH密钥</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rsa</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "your@email.com"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 输入生成的文件前缀</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Enter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> which</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> save</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> key:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> github</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 生成文件列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">github(私钥</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) github.pub(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">公钥</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.53,words:158},t:"Git密钥相关配置",y:"a"}}],["/posts/gitlab/Linux%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html",{loader:()=>n.e(1670).then(n.bind(n,5730)),meta:{e:'\n<h3>Linux上安装gitlab</h3>\n<p><a href="https://gitlab.cn/install/" target="_blank" rel="noopener noreferrer">gitlab.cn/install中文安装手册</a></p>\n<ol>\n<li>install in CentOS [其他安装看相关文章的“官方install手册”]</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gitlab/gitlab-ee：完整的 GitLab 软件包，包含所有社区版功能以及 企业版功能</span></span>\n<span class="line"><span>gitlab/gitlab-ce：一个精简的包，仅包含社区版功能</span></span>\n<span class="line"><span>gitlab/unstable: 发布候选版本和其他不稳定版本</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.42,words:427},t:"如何安装gitlab",y:"a"}}],["/posts/gitlab/",{loader:()=>n.e(2872).then(n.bind(n,9344)),meta:{e:'\n<ol>\n<li>一个很简答的流水线</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>stages:</span></span>\n<span class="line"><span>  - build</span></span>\n<span class="line"><span>  - deploy</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>image: alpine</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>build:</span></span>\n<span class="line"><span>  stage: build</span></span>\n<span class="line"><span>  tags :</span></span>\n<span class="line"><span>    - test</span></span>\n<span class="line"><span>  script:</span></span>\n<span class="line"><span>    - echo "build success"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>deploy:</span></span>\n<span class="line"><span>  stage: deploy</span></span>\n<span class="line"><span>  tags :</span></span>\n<span class="line"><span>    - test</span></span>\n<span class="line"><span>  script:</span></span>\n<span class="line"><span>    - echo "deploy success"</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.12,words:36},t:"gitlab",y:"a"}}],["/posts/gitlab/runner%E5%9C%A8Docker%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(9968).then(n.bind(n,5371)),meta:{e:'\n<ol>\n<li>docker安装</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -fsSL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://get.docker.com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bash</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --mirror</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Aliyun</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.33,words:699},t:"runner 在docker中安装",y:"a"}}],["/posts/gitlab/runner%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C.html",{loader:()=>n.e(5539).then(n.bind(n,4126)),meta:{e:'\n<p><a href="https://www.runoob.com/docker/docker-dockerfile.html" target="_blank" rel="noopener noreferrer">docker镜像制作</a></p>\n<h3>制作 fmt &amp;&amp; lint 的go镜像</h3>\n<ol>\n<li>创建文件</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>touch Dockerfile</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.41,words:123},t:"runner 镜像制作",y:"a"}}],["/posts/gitlab/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%B5%81%E6%B0%B4%E7%BA%BFfmt__lint.html",{loader:()=>n.e(9700).then(n.bind(n,8742)),meta:{e:"\n<ol>\n<li>\n<p>安装gitlab-runner并注册</p>\n</li>\n<li>\n<p>制作docker镜像可以用于运行 make lint 和go环境</p>\n</li>\n<li>\n<p>编写gitlab-ci.yml 以tags用上 runner</p>\n</li>\n</ol>\n",r:{minutes:.16,words:47},t:"如何编写流水线fmt&&lint",y:"a"}}],["/posts/gitlab/%E6%90%AD%E5%BB%BAdocker%20hub%E7%A7%81%E6%9C%8D.html",{loader:()=>n.e(9576).then(n.bind(n,296)),meta:{e:"\n",r:{minutes:.03,words:8},t:"搭建docker hub私服",y:"a"}}],["/posts/gitlab/%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8.html",{loader:()=>n.e(5800).then(n.bind(n,131)),meta:{e:'\n<ol>\n<li>\n<p>runne安装在docker</p>\n</li>\n<li>\n<p>注册runner到gitlab</p>\n</li>\n<li>\n<p>编写ci文件流水线</p>\n</li>\n</ol>\n<h3>参考博客</h3>\n<p><a href="https://docs.gitlab.cn/runner/" target="_blank" rel="noopener noreferrer">runner概念</a></p>\n<p><a href="https://docs.gitlab.cn/jh/ci/index.html" target="_blank" rel="noopener noreferrer">官方手册CI概念</a></p>',r:{minutes:.2,words:59},t:"构建应用",y:"a"}}],["/posts/etcd/Docker%E5%AE%89%E8%A3%85Etcd.html",{loader:()=>n.e(6277).then(n.bind(n,7553)),meta:{c:["etcd"],g:["etcd"],e:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run --name etcd -d -p 2379:2379 -p 2380:2380 -e ALLOW_NONE_AUTHENTICATION=yes bitnami/etcd:3.3.11 etcd</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.12,words:37},t:"Docker安装Etcd",y:"a"}}],["/posts/etcd/Etcd%E5%BC%80%E5%90%AFSSL%E8%AE%A4%E8%AF%81.html",{loader:()=>n.e(9).then(n.bind(n,6218)),meta:{c:["etcd"],g:["etcd"],e:'<h3>1. docker生成证书</h3>\n<h3>2. 使用生成的证书和密钥启动客户端</h3>\n<h3>3. 使用证书和密钥连接服务端</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> $(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">pwd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">/etcd:/root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> centos:centos7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sh</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> wget</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssljson_1.6.4_linux_arm64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssl_1.6.4_linux_arm64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cfssl_1.6.4_linux_arm64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin/cfssl</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cfssljson_1.6.4_linux_arm64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin/cfssljson</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin/cfssl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin/cfssljson</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.04,words:612},t:"Etcd开启SSL认证",y:"a"}}],["/posts/etcd/Raft%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0.html",{loader:()=>n.e(7032).then(n.bind(n,1212)),meta:{c:["etcd"],g:["etcd"],e:'<p><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF%EF%BC%88%E5%AE%8C%EF%BC%89/09%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%20Raft%20%E5%92%8C%20Etcd%20%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.md" target="_blank" rel="noopener noreferrer">分布式一致性算法Raft和Etcd原理解析</a></p>',r:{minutes:2.46,words:739},t:"Golang和Etcd实现Raft算法",y:"a"}}],["/posts/etcd/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{loader:()=>n.e(2025).then(n.bind(n,9119)),meta:{c:["etcd"],g:["etcd"],e:'<h3>参考文章</h3>\n<p><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF%EF%BC%88%E5%AE%8C%EF%BC%89/10%20%E5%9F%BA%E4%BA%8E%20Etcd%20%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E6%96%B9%E6%A1%88.md" target="_blank" rel="noopener noreferrer">基于 Etcd 的分布式锁实现原理及方案</a></p>',r:{minutes:.4,words:120},t:"分布式锁",y:"a"}}],["/posts/etcd/%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0.html",{loader:()=>n.e(816).then(n.bind(n,2500)),meta:{c:["etcd"],g:["etcd"],e:'\n<p><a href="https://learnku.com/articles/37344" target="_blank" rel="noopener noreferrer">用 etcd 实现服务注册和发现</a>\n<a href="https://blog.lerzen.com/post/etcd%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0%E5%AE%9E%E4%BE%8B/" target="_blank" rel="noopener noreferrer">悟禅小书童Etcd服务注册发现实例</a></p>\n',r:{minutes:.25,words:75},t:"Etcd实现服务注册与发现",y:"a"}}],["/posts/infoq/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E8%89%BA%E6%9C%AF.html",{loader:()=>n.e(5829).then(n.bind(n,9621)),meta:{e:"<ol>\n<li>如何优雅的写单元测试</li>\n<li>为什么单元测试不止是验证，而是可以提升代码质量必备技能</li>\n</ol>\n",r:{minutes:.13,words:40},t:"",y:"a"}}],["/posts/infoq/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E5%85%B3%E5%BF%83%E7%9A%84kubernetes%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98.html",{loader:()=>n.e(6324).then(n.bind(n,8896)),meta:{d:1691682612e3,l:"2023年8月10日",c:["kubernetes"],g:["network"],u:1,e:"应用开发之中常见的网络问题",r:{minutes:.3,words:89},t:"后台开发关心的kubernetes网络问题",y:"a"}}],["/posts/go/2.GPM%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3.html",{loader:()=>n.e(8102).then(n.bind(n,9056)),meta:{c:["go"],g:["go"],e:"\n<blockquote>\n<p>这篇文章写的太细致了，amazing</p>\n</blockquote>\n<ol>\n<li>G goroutine</li>\n<li>P processor</li>\n<li>M thread</li>\n</ol>\n<h3>术语</h3>\n<ol>\n<li>全局队列 Global Queue</li>\n<li>P的本地队列 (max 256) (out of size move half to GP)</li>\n<li>P(runtime.GOMAXPROCS数量),程序启动时创建</li>\n<li>M 从P之中获取G运行,P本地队列空了从 [Global Queue] 放到P的本地队列或者从 [其他P的本地队列] 偷一半到自己P的本地队列</li>\n<li>M在不够用时可以新建M</li>\n</ol>",r:{minutes:.77,words:230},t:"GMP设计思想",y:"a"}}],["/posts/go/7.defer%E7%9F%A5%E8%AF%86%E7%82%B9.html",{loader:()=>n.e(8910).then(n.bind(n,2440)),meta:{c:["go"],g:["go"],e:'\n<ol>\n<li>执行顺序</li>\n<li>和return执行顺序</li>\n<li>函数返回值初始化（默认零值）</li>\n<li>有名函数返回值可被defer修改</li>\n<li>defer遇见panic (有recover则正常补获没有则defer链)</li>\n<li>defer中包含panic (defer之中的panic会覆盖原有的panic)</li>\n</ol>\n<p><a href="https://www.yuque.com/aceld/golang/ithv8f" target="_blank" rel="noopener noreferrer">GO修养之路</a></p>',r:{minutes:.3,words:90},t:"defer知识点",y:"a"}}],["/posts/go/8.GoModules.html",{loader:()=>n.e(3720).then(n.bind(n,2496)),meta:{c:["go"],g:["go"],e:'\n<blockquote>\n<p>淘汰现有的 GOPATH 使用模式</p>\n</blockquote>\n<h1>GO MOD 相关环境变量</h1>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ go env</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># Go modules 的开关</span></span>\n<span class="line"><span>GO111MODULE="auto"</span></span>\n<span class="line"><span># 镜像站点</span></span>\n<span class="line"><span>GOPROXY="https://proxy.golang.org,direct"</span></span>\n<span class="line"><span>GONOPROXY=""</span></span>\n<span class="line"><span># 用于保证拉取到的模块版本数据未经过篡改</span></span>\n<span class="line"><span>GOSUMDB="sum.golang.org"</span></span>\n<span class="line"><span>GONOSUMDB=""</span></span>\n<span class="line"><span>GOPRIVATE=""</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.27,words:81},t:"GoModules",y:"a"}}],["/posts/go/ApiGetway%E8%AE%BE%E8%AE%A1.html",{loader:()=>n.e(6459).then(n.bind(n,1534)),meta:{d:1681206012e3,l:"2023年4月11日",c:["golang"],g:["golang"],e:"理解golang的web服务之中api gatway扮演的角色，它的设计和应用",r:{minutes:1.23,words:369},t:"ApiGatway设计",y:"a"}}],["/posts/go/Channel.html",{loader:()=>n.e(8310).then(n.bind(n,6086)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["GO原理"],e:"<h3>channel的特性</h3>\n<ol>\n<li>分配在堆上</li>\n<li>管道的数据结构是 hchan</li>\n<li>缓冲区就是数组</li>\n<li>两个队列（发送、接收）</li>\n<li>关闭状态</li>\n<li>缓冲区buffer之中有sendx发送队列偏移和recevx接收偏移 - 环形缓冲区</li>\n</ol>\n<h3>channel发送过程做了什么</h3>\n<ol>\n<li>有没有goroutine在接收数据</li>\n<li>如果缓冲区已经满了，继续发送数据到channel的话会进入发送等待队列 sendq</li>\n<li>发送等待队列sendq (底层是sudog数据结构链表)</li>\n<li>sudog数据结构链表（记录拿个协程在等待、等待哪个channel）</li>\n<li>g2接受 ch1 的数据，此时缓冲区就空余出1个</li>\n<li>唤醒发送队列 ch1 的 sendq 之中的 g1 , g1 此时将数据发送给 ch1</li>\n</ol>",r:{minutes:1.39,words:417},t:"Channel",y:"a"}}],["/posts/go/chan%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>n.e(2655).then(n.bind(n,9101)),meta:{e:'\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.05,words:15},t:"chan",y:"a"}}],["/posts/go/cherry.html",{loader:()=>n.e(2996).then(n.bind(n,8701)),meta:{d:16416864e5,l:"2022年1月9日",c:["樱桃"],g:["红","小","圆"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.11,words:33},t:"樱桃",i:"pen-to-square",y:"a"}}],["/posts/go/Context%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html",{loader:()=>n.e(6078).then(n.bind(n,1298)),meta:{e:'\n<blockquote>\n<p>主要弄清楚 WithValue\\WithTimeout\\WithDeadline\\WithCancel 如何实现\n子上下文和父上下文如何相互通讯的</p>\n</blockquote>\n<ol>\n<li>跟上下文被子协程A添加了timeout会影响到同样适用跟上下文的协程B吗</li>\n</ol>\n<blockquote>\n<p>不会</p>\n</blockquote>\n<ol start="2">\n<li>background和todo有什么区别</li>\n</ol>\n<blockquote>\n<p>两个都是 emptyCtx int 都实现了接口 context.Context</p>\n</blockquote>',r:{minutes:1.66,words:499},t:"来刷一下context源码",y:"a"}}],["/posts/go/defer%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(9662).then(n.bind(n,2807)),meta:{e:"\n<ol>\n<li>特性(延迟调用、异常处理、运行时间点、后进先出、return执行顺序)</li>\n<li>源码(数据结构、deferproc、newdefer、deferreturn)</li>\n</ol>\n",r:{minutes:.13,words:38},t:"defer",y:"a"}}],["/posts/go/dragonfruit.html",{loader:()=>n.e(1038).then(n.bind(n,7560)),meta:{d:16417728e5,l:"2022年1月10日",c:["火龙果","水果"],g:["红","大"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"火龙果",i:"pen-to-square",y:"a"}}],["/posts/go/for%E5%92%8Crange%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83.html",{loader:()=>n.e(9078).then(n.bind(n,2444)),meta:{e:'\n<h3>range 对每一个迭代值都创建 1 个拷贝 而 For 不会</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>迭代值大小很小的话，性能上没有差异</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>如果迭代值占用内存很大，range 就会显得性能差一些</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.36,words:107},t:"FOR 和 Range 的性能比较",y:"a"}}],["/posts/go/GC.html",{loader:()=>n.e(6563).then(n.bind(n,1707)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["GO原理"],e:'<h3>进程虚拟地址空间</h3>\n<ol>\n<li>Code Segment 代码段（程序要执行的指令）</li>\n<li>Data Segment 数据段(全局变量、静态数据)</li>\n<li>Heap 堆（需要程序手动释放）（c\\c++ 手动垃圾回收容易出现 悬挂指针-释放早了、内存泄漏-忘了释放）</li>\n<li>Stack 栈（函数局部变量、参数和返回值）函数调用完成后销毁（随着函数调用栈的销毁而释放内存）</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>栈、Data Segment 数据段上的对象作为root</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>基于它们 2个追踪</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>能追踪到的数据就代表是存活有引用的数据</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.49,words:1047},t:"GC",y:"a"}}],["/posts/go/gin-pprof.html",{loader:()=>n.e(9425).then(n.bind(n,1688)),meta:{e:"\n<ol>\n<li>如何启用</li>\n<li>线上如何获取报告</li>\n<li>如何分析报告</li>\n</ol>\n",r:{minutes:.08,words:24},t:"pprof",y:"a"}}],["/posts/go/GMP-hello%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html",{loader:()=>n.e(2763).then(n.bind(n,6201)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["GO原理"],e:"<h3>关键术语</h3>\n<ol>\n<li>进程虚拟地址空间中的代码段</li>\n<li>程序执行入口 runtime.main 创建 main.goroutine （call main.main）</li>\n<li>协程对应的数据结构是runtime.g，工作线程对应的数据结构是runtime.m，处理器P对应的数据结构是 runtime.p (本地runq)</li>\n<li>全局runq 存储在 全局变量 sched （调度器，对应的数据结构是 runtime.schedt）</li>\n<li>P程序初始化过程之中进行调度器初始化，初始化固定数量的 P (GOMAXPROCS)</li>\n<li>start函数开启调度循环schedule()函数</li>\n<li>time.sleep 调用 gopark函数</li>\n</ol>",r:{minutes:1.27,words:382},t:"GMP-hello的执行过程",y:"a"}}],["/posts/go/GMP-%E5%8D%8F%E7%A8%8B%E8%AE%A9%E5%87%BA%E6%8A%A2%E5%8D%A0%E8%B0%83%E5%BA%A6%E7%9B%91%E6%8E%A7.html",{loader:()=>n.e(6820).then(n.bind(n,6192)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["GO原理"],e:'<h3>关键术语</h3>\n<ol>\n<li>time.sleep后 _Grunning 和 _Gwaiting，timer之中的回调函数将g变成Grunnable状态放回runq</li>\n<li>以上谁负责执行timer之中的回调函数呢 (schedule()-&gt;checkTimers)</li>\n<li>监控线程（重复执行某一个任务） - 不依赖GMP、main.goroutine创建 ， 监控timer可以创建线程执行</li>\n<li>IO时间监听队列 - 主动轮询netpoll</li>\n</ol>\n<p><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a></p>',r:{minutes:.4,words:120},t:"抢占式调度",y:"a"}}],["/posts/go/GMP-%E8%AE%A9%E5%87%BA%E6%81%A2%E5%A4%8D%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.html",{loader:()=>n.e(3559).then(n.bind(n,128)),meta:{d:1383720012e3,l:"2013年11月6日",c:["go","gmp"],g:["GMP","GO"],e:'<h3>关键术语</h3>\n<ol>\n<li>newproc函数</li>\n</ol>\n<h3>协程状态</h3>\n<ol>\n<li>running</li>\n<li>runable</li>\n<li>waiting</li>\n<li>syscall</li>\n<li>dead</li>\n</ol>\n<h3>备注</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> OS系统调用前，先调用runtime·entersyscall函数将自己的状态置为Gsyscall</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.26,words:78},t:"GMP的让出创建恢复",y:"a"}}],["/posts/go/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html",{loader:()=>n.e(2257).then(n.bind(n,2405)),meta:{e:'\n<p><a href="https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html" target="_blank" rel="noopener noreferrer">GMP 原理与调度</a></p>\n<ol>\n<li>M (thread)  G (goroutine) P (Processor)</li>\n<li>P在启动时创建，保存在数组之中，数量是GOMAXPROCS （决定同时执行的goroutine的最大数量）</li>\n<li>每个M代表1个内核线程 （runtime/debug 中的 SetMaxThreads 函数，设置 M 的最大数量）</li>\n</ol>',r:{minutes:2.22,words:666},t:"GMP 原理与调度",y:"a"}}],["/posts/go/goland%E5%BF%AB%E6%8D%B7%E9%94%AE.html",{loader:()=>n.e(9332).then(n.bind(n,9098)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang"],e:"如何发布开源包",r:{minutes:.57,words:172},t:"goland快捷键",y:"a"}}],["/posts/go/golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html",{loader:()=>n.e(6849).then(n.bind(n,8087)),meta:{e:'<h3>三个概念内核、架构和位</h3>\n<h5>内核</h5>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>内核是操作系统的核心，windows不必多说，Linux家族主流内核freebsd、netbsd、solaris等。Mac内核darwin，Darwin 是一种Unix-like（类Unix）操作系统。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.9,words:270},t:"交叉编译",y:"a"}}],["/posts/go/golang%E5%AF%BC%E5%87%BAdocker%E9%95%9C%E5%83%8F.html",{loader:()=>n.e(7356).then(n.bind(n,7735)),meta:{d:1682012592e3,l:"2023年4月21日",c:["golang"],g:["golang","docker"],e:"通过golang执行shell命令导出镜像到tar文件",r:{minutes:.58,words:174},t:"golang导出docker镜像",y:"a"}}],["/posts/go/golang%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%92%8C%E5%80%BC%E4%BC%A0%E9%80%92.html",{loader:()=>n.e(3586).then(n.bind(n,2466)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang"],e:"理解什么是值传递什么是引用传递吗，golang的结构体是值传递吗，切片是引用传递吗",r:{minutes:1.9,words:571},t:"golang引用传递和值传递",y:"a"}}],["/posts/go/golang%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(7446).then(n.bind(n,8699)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang"],e:"使用协程实现生产者消费者模式",r:{minutes:1.1,words:330},t:"golang生产者消费者模式",y:"a"}}],["/posts/go/golang%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html",{loader:()=>n.e(9969).then(n.bind(n,3355)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang"],e:"聊一下内存管理",r:{minutes:1.4,words:420},t:"goland的内存管理",y:"a"}}],["/posts/go/golang%E9%9D%99%E6%80%81%E6%89%AB%E6%8F%8F%E5%92%8C%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5.html",{loader:()=>n.e(621).then(n.bind(n,4864)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang","golangci-lint","fmt"],e:"mackefile静态扫描和格式检查",r:{minutes:.45,words:134},t:"golang静态扫描和格式检查",y:"a"}}],["/posts/go/GPM%E5%8E%9F%E7%90%86%E5%92%8C%E8%B0%83%E5%BA%A6.html",{loader:()=>n.e(5749).then(n.bind(n,51)),meta:{e:'\n<p><a href="https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html" target="_blank" rel="noopener noreferrer">GMP 原理与调度 - 简单易懂</a>\n<a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>',r:{minutes:.18,words:54},t:"GPM",y:"a"}}],["/posts/go/GRPC%E5%BA%95%E5%B1%82%E8%B0%83%E4%BC%98.html",{loader:()=>n.e(1149).then(n.bind(n,2741)),meta:{e:'\n<h3>场景题，client Dial一个8100端口，客户端持有了1个TCP连接，对吗，如果有多个请求，这几个请求是顺序执行的吗</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>是建立起一个连接，获取一个ClientConn(TCP连接建立、TLS握手等封装)</span></span>\n<span class="line"><span>多个请求的话都会使用这个连接，发送如果顺序在传输层也是顺序，但是server的响应不会是顺序的</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>比如GetUserInfo后执行ClientConnInterface.Invoke的实现之中</span></span>\n<span class="line"><span>SendMsg之后，阻塞到RecvMsg</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.93,words:878},t:"GRPC多路复用",y:"a"}}],["/posts/go/log%E6%BA%90%E7%A0%81.html",{loader:()=>n.e(4236).then(n.bind(n,8089)),meta:{e:"\n<ol>\n<li>抽象</li>\n<li>源码</li>\n</ol>\n",r:{minutes:.03,words:9},t:"log",y:"a"}}],["/posts/go/map.html",{loader:()=>n.e(3287).then(n.bind(n,1022)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["GO原理"],e:"<h3>术语</h3>\n<ol>\n<li>哈希表</li>\n<li>哈希桶</li>\n<li>取模法 \\ 与运算法</li>\n<li>哈希冲突（开放地址法、拉链法）</li>\n<li>哈希冲突影响效率（散列均匀的哈希函数减少哈希冲突的发生、哈希表扩容也可以有效保障哈希读写效率）</li>\n<li>存储键值对数目与哈希桶数目比值-负载因子</li>\n<li>扩容时候分配新桶，需要迁移旧桶到新桶 - 渐进式扩容</li>\n</ol>\n<h3>go</h3>\n<ol>\n<li>与运算</li>\n<li>负载因子6.5默认</li>\n<li>翻倍扩容\\等量扩容 （等量扩容用于很多键值对被删除时候让内存排列更加紧凑）</li>\n</ol>",r:{minutes:.82,words:245},t:"map原理解析",y:"a"}}],["/posts/go/map%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(64).then(n.bind(n,7508)),meta:{e:"\n<ol>\n<li>数据结构</li>\n<li>初始化</li>\n<li>访问</li>\n<li>赋值和扩容迁移</li>\n<li>为什么是无序的</li>\n</ol>\n",r:{minutes:.1,words:31},t:"map",y:"a"}}],["/posts/go/map%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>n.e(7853).then(n.bind(n,5793)),meta:{e:'\n<blockquote>\n<p>哈希表</p>\n</blockquote>\n<h3>哈希函数选择 &amp;&amp; 哈希冲突解决</h3>\n<h3>开放寻址法 &amp;&amp; 拉链法</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>多个写成对同一个map写数据，并且key不会重复，请问这个map此刻可以认为是并发安全的吗</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:1.03,words:310},t:"golang 底层数据结构",y:"a"}}],["/posts/go/middleware%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(7849).then(n.bind(n,1784)),meta:{d:1681206012e3,l:"2023年4月11日",c:["golang"],g:["gin"],e:"gin的中间件实现原理",r:{minutes:.52,words:155},t:"moddleware底层实现原理",y:"a"}}],["/posts/go/module%E5%86%B2%E7%AA%81.html",{loader:()=>n.e(6356).then(n.bind(n,6944)),meta:{d:1678614012e3,l:"2023年3月12日",c:["golang"],g:["golang"],e:"记录一次包版本不兼容导致的冲突和解决办法",r:{minutes:2.36,words:707},t:"module冲突",y:"a"}}],["/posts/go/mongodb%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F.html",{loader:()=>n.e(4895).then(n.bind(n,2915)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang","mongodb"],e:"指定排序",r:{minutes:.17,words:50},t:"mongodb自定义排序",y:"a"}}],["/posts/go/Mutex.html",{loader:()=>n.e(6174).then(n.bind(n,497)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["GO原理"],e:'<h3>goroutine 获得锁的逻辑</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>type mutex struct {</span></span>\n<span class="line"><span>    state int32 // 未加锁</span></span>\n<span class="line"><span>    sema uint32 // 信号量</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.54,words:161},t:"mutex包",y:"a"}}],["/posts/go/pprof%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",{loader:()=>n.e(6919).then(n.bind(n,6928)),meta:{e:"\n",r:{minutes:.01,words:3},t:"pprof",y:"a"}}],["/posts/go/",{loader:()=>n.e(1441).then(n.bind(n,8799)),meta:{e:'\n<p><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a></p>\n',r:{minutes:.04,words:12},t:"幼麟实验室",y:"a"}}],["/posts/go/reflect%E7%9A%84%E6%80%A7%E8%83%BD.html",{loader:()=>n.e(7182).then(n.bind(n,865)),meta:{e:'\n<h3>反射的用途</h3>\n<ol>\n<li>对象创建</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reflect.New(reflect.TypeOf(Config{})).Interface().(*Config)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.31,words:92},t:"Reflect 的性能比较",y:"a"}}],["/posts/go/runtime%E5%8C%85.html",{loader:()=>n.e(6334).then(n.bind(n,1117)),meta:{e:'\n<p><a href="https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/runtime%E5%8C%85.html" target="_blank" rel="noopener noreferrer">runtime</a></p>\n<h3>除了获取堆栈信息还可以干嘛</h3>\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>',r:{minutes:.15,words:46},t:"runtime",y:"a"}}],["/posts/go/Security%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(9722).then(n.bind(n,3774)),meta:{e:'\n<ol>\n<li>用户个人功能权限控制校验</li>\n<li>用户敏感数据</li>\n<li>SQL注入</li>\n<li>请求参数验证</li>\n<li>CSRF安全验证</li>\n<li>外部重定向白名单</li>\n<li>平台资源防重放机制</li>\n<li>文件上传</li>\n<li>配置文件密码</li>\n</ol>\n<h1>Alibaba p3c</h1>\n<p><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer">github p3c</a></p>\n<h3>我喜欢的适用于其他语言的</h3>',r:{minutes:.33,words:99},t:"安全",y:"a"}}],["/posts/go/slice%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>n.e(529).then(n.bind(n,89)),meta:{e:'\n<ol>\n<li>指针\\数组</li>\n<li>扩容逻辑</li>\n</ol>\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.1,words:31},t:"slice 底层数据结构",y:"a"}}],["/posts/go/Socket%E6%98%AF%E4%BB%80%E4%B9%88.html",{loader:()=>n.e(7435).then(n.bind(n,8025)),meta:{e:'\n<h3>复习一下TCP/IP</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pid是一个机器内标识2个进程的东西</span></span>\n<span class="line"><span>网络层IP协议的ip地址标识主机</span></span>\n<span class="line"><span>TCP是ip地址+协议+端口号标识网络中的一个进程</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.62,words:487},t:"socket",y:"a"}}],["/posts/go/string.html",{loader:()=>n.e(8160).then(n.bind(n,3734)),meta:{e:'<h3>术语</h3>\n<ol>\n<li>unicode</li>\n<li>ASCII</li>\n<li>1字节8bit</li>\n<li>UTF-8 二进制符号位</li>\n<li>字符集</li>\n</ol>\n<p><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a></p>\n',r:{minutes:.11,words:33},t:"string",y:"a"}}],["/posts/go/string%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>n.e(4282).then(n.bind(n,8576)),meta:{e:'<h3>string 底层数据结构</h3>\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.07,words:21},t:"",y:"a"}}],["/posts/go/struct%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>n.e(7466).then(n.bind(n,6375)),meta:{e:'\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.07,words:21},t:"struct 底层数据结构",y:"a"}}],["/posts/go/sync.Map%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(1089).then(n.bind(n,7805)),meta:{e:'\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.05,words:15},t:"sync.Map",y:"a"}}],["/posts/go/UnitTest%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(1370).then(n.bind(n,488)),meta:{c:["go"],g:["go"],e:'\n<ol>\n<li>AIR原则</li>\n<li>全自动非交互式的</li>\n<li>独立性</li>\n<li>可重复</li>\n<li>测试粒度足够小</li>\n<li>核心业务应用模块单测试要求</li>\n</ol>\n<h1>Alibaba p3c</h1>\n<p><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer">github p3c</a></p>\n<h3>我喜欢的适用于其他语言的</h3>\n<ol>\n<li>单元测试</li>\n<li>MySQL规范</li>\n</ol>',r:{minutes:.27,words:82},t:"UnitTest规范",y:"a"}}],["/posts/go/%E4%B8%AA%E4%BA%BA%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(3117).then(n.bind(n,1735)),meta:{c:["go"],g:["go"],e:"<ol>\n<li>\n<p>枚举值注释必须完善</p>\n</li>\n<li>\n<p>禁止出现硬编码</p>\n</li>\n<li>\n<p>有基本的单元测试验证（尽量使用断言而不是手动log人工判定单测是否通过）</p>\n</li>\n<li>\n<p>接口粒度应该细小、接口依赖应该明确、接口入参出参应该明确，对象化，最好可以做到依赖抽象而不是直接依赖具体的实现</p>\n</li>\n<li>\n<p>禁止在接口之中有隐藏的依赖条件（入参之中没有的参数比如环境变量，入参应该是决定输出的唯一条件）</p>\n</li>\n<li>\n<p>接口颗粒度要小一些（入参、出参尽可能简化易读），如果逻辑过于复杂应该对象化拆分，确保大接口拆出的小接口都走单元测试</p>\n</li>\n<li>\n<p>禁止IDE右侧出现notice黄色告警（单词拼写错误、命名不规范、公有方法没注释等）</p>\n</li>\n<li>\n<p>所有的指针访问都需要判定是否为nil</p>\n</li>\n<li>\n<p>所有的数组访问都需要判定length防止数组越界</p>\n</li>\n<li>\n<p>所有的除数都要判定被除数不是0</p>\n</li>\n<li>\n<p>关于同步转异步，取决于业务场景。如果是接口响应不强依赖执行结果的，比如用户关注频道后发送欢迎语，关注成功后异步发送欢迎语即可，不能阻塞主要流程，因为用户端不强依赖欢迎语，但是需要快速进入主页面。</p>\n</li>\n<li>\n<p>包命名规范</p>\n</li>\n<li>\n<p>禁止滥用init，个人建议整个项目不应该有init，main函数也是唯一的执行入口</p>\n</li>\n<li>\n<p>禁止滥用全局变量，应该保证依赖的关系足够清晰明了</p>\n</li>\n<li>\n<p>模块依赖管理，包与包之间的依赖关系清晰(按功能分块按业务水平分层，按数据流垂直分层，每一层之间尽可能解耦)，比如三层架构、领域驱动模型等都是追求分层，数据对象模型每一层之间都是解耦的，比如vo(view object视图)和持久化层对象po(数据库映射对象)肯定是转换过的，而不是直接将po往http对外接口抛。</p>\n</li>\n<li>\n<p>模块依赖管理，包的依赖应当尽可能放在私有属性(并且以选项模式注入依赖)。优点在于依赖会更加清晰容易管理，以及对于单元测试会友好很多。比如：</p>\n</li>\n</ol>",r:{minutes:5.28,words:1583},t:"个人编码规范",y:"a"}}],["/posts/go/%E4%BA%92%E6%96%A5%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(738).then(n.bind(n,1743)),meta:{c:["go"],g:["go"],e:'\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.08,words:23},t:"互斥锁",y:"a"}}],["/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFopenTracing.html",{loader:()=>n.e(7332).then(n.bind(n,6634)),meta:{e:'\n<ol>\n<li>什么是opentracing</li>\n<li>什么是jaeger</li>\n<li>如何实现服务可观测</li>\n</ol>\n<h3>启动jaeger</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -d -p 5775:5775/udp -p 16686:16686 jaegertracing/all-in-one:latest</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.55,words:165},t:"opentracing",y:"a"}}],["/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFstream.html",{loader:()=>n.e(3852).then(n.bind(n,3038)),meta:{e:'\n<h3>类型</h3>\n<blockquote>\n<p>服务端流式RPC、客户端流式RPC、双向流RPC</p>\n</blockquote>\n<p><a href="https://www.jishuchi.com/read/gin-practice/3798" target="_blank" rel="noopener noreferrer">gRPC Streaming, Client and Server</a></p>\n',r:{minutes:.1,words:29},t:"stream",y:"a"}}],["/posts/go/%E4%BB%80%E4%B9%88%E6%98%AFunary.html",{loader:()=>n.e(5701).then(n.bind(n,9388)),meta:{e:"\n",r:{minutes:.01,words:3},t:"unary",y:"a"}}],["/posts/go/%E4%BB%A3%E7%A0%81%E5%88%86%E5%B1%82%E5%AE%9E%E8%B7%B5.html",{loader:()=>n.e(7436).then(n.bind(n,8783)),meta:{c:["go"],g:["go"],e:'\n<h3>一、具体的go项目模块分层</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>├── application | 应用入口｜可以理解为三层架构之中的 UI 表示层</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── admin_service｜实现后台管理系统CRUD当前微服务数据需要用到的 RPC 接口</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── dto | 数据传输对象实体</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └── grpc | RPC接口实现</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── event | 内置事件 ｜ 比如定时器 ｜ 统一实现一个抽象 interface{ start stop } | 这里注意下就是这个包是不允许有init函数的，禁止自身调用自身，它的调用必须显式地写在 applicition.Init或者编译入口main函数之中</span></span>\n<span class="line"><span>│&nbsp;&nbsp; └── front_service</span></span>\n<span class="line"><span>│&nbsp;&nbsp;     ├── dtos | 数据传输对象对外的restful接口用到的对象</span></span>\n<span class="line"><span>│&nbsp;&nbsp;     └── http | controller层 ｜ 如果涉及2个领域比如用户中心领域和商户领域 ｜ 在这里将2个领域组装数据 | 这里获取到的各个domain object是一个复杂的对象转</span></span>\n<span class="line"><span>│&nbsp;&nbsp; └────── init.go | 有一个包变量App结构体 ｜ 首先初始化db\\kafka\\redis\\mongodb\\es、再初始化domain service对象，然后以选项模式注入DB对象到领域对象，这里的init也不是用go的init而是Init暴露的方法 ，我这里几乎是禁止用隐藏的init函数</span></span>\n<span class="line"><span>换为api 用的dto</span></span>\n<span class="line"><span>├── config</span></span>\n<span class="line"><span>│&nbsp;&nbsp; └── files ｜ 里面只有1个.toml文件 ｜ 目前已经弃用 ｜ 配置已经改用从nacos读取</span></span>\n<span class="line"><span>├── domain</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── common | 通用域 ｜ 通用域是被其他域依赖 | 依赖注入也是选项模式注入到其他领域的私有属性 ｜ 域之间是互相独立的互不访问的而通用域则可以注入进其他领域 ｜ 还有支撑域等我这里分的没有那么细致</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── entity | 域实体 domain.object 领域对象 | 当前的领域对外暴露的实体</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └── repository | 仓储层</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └──----------- po.go ｜ persistent object 持久化层对象</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └──----------- repository.go | 仓储层对外提供的接口的抽象</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └──----------- repository_realization1.go | 仓储层CRUD的实现一 ｜ 基于MySQL</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └──----------- repository_realization2.go | 仓储层CRUD的实现二 ｜ 基于Oracle ｜ 正常只有1个实现</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; service.go | 领域对外暴露的服务 - 同样需要抽象和实现 ｜ 这里有很多的 po 转 do 的操作</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── user</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── entity</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └── repository</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; service.go</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── good</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── entity</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; ├── enum</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; └── repository</span></span>\n<span class="line"><span>│&nbsp;&nbsp; │&nbsp;&nbsp; service.go</span></span>\n<span class="line"><span>├── global ｜ 全局的工具类 - 偏业务 ｜ 可以被domain\\event依赖的</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── cache | 缓存key管理</span></span>\n<span class="line"><span>│&nbsp;&nbsp; ├── enum ｜ 一些通用的枚举值</span></span>\n<span class="line"><span>│&nbsp;&nbsp; └── router ｜ 路由 ｜ restful </span></span>\n<span class="line"><span>├── cmd | 运行入口 main.go | 运行逻辑大致是 配置加载 &gt; application.Init &gt; rpc.server.register &gt; prometheus/event &gt; run</span></span>\n<span class="line"><span>├── interfaces</span></span>\n<span class="line"><span>└── tools ｜ 工具类 - 剥离业务 - 一小部分特有的 ｜ 大部分的util工具被封装到团队独立的git仓库 ｜ go.mod引用爱用哪个版本用哪个</span></span>\n<span class="line"><span>    └── utils</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:6.44,words:1932},t:"代码分层实践",y:"a"}}],["/posts/go/%E4%BC%98%E5%8C%96params%E6%98%AFany%E6%8E%A5%E5%8F%A3.html",{loader:()=>n.e(4888).then(n.bind(n,3843)),meta:{d:1682012592e3,l:"2023年4月21日",c:["golang"],g:["golang"],e:"如何优化参数为范型数据的接口",r:{minutes:.71,words:214},t:"优化params是any接口",y:"a"}}],["/posts/go/%E4%BD%BF%E7%94%A8range%E5%BF%85%E6%87%82%E7%9A%84%E7%82%B9.html",{loader:()=>n.e(5929).then(n.bind(n,6156)),meta:{d:1618134012e3,l:"2021年4月11日",c:["golang"],g:["golang"],e:"使用range时候容易遗漏的点，就是range list之中的item地址是不可用的",r:{minutes:.61,words:183},t:"使用range必懂的点",y:"a"}}],["/posts/go/%E4%BF%A1%E5%8F%B7%E9%87%8F.html",{loader:()=>n.e(7683).then(n.bind(n,1476)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["GO原理"],e:'<h3>假设有一个goroutine获取锁，获取不到的情况下有2种操作</h3>\n<ol>\n<li>自旋 （会空耗cpu）</li>\n<li>让出cpu进入等待队列等待调度器 （线程切换、唤醒、挂起有消耗）</li>\n</ol>\n<blockquote>\n<p>golang的是先自旋几次，超过次数就进入等待队列</p>\n</blockquote>\n<p><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a></p>\n',r:{minutes:.33,words:100},t:"信号量",y:"a"}}],["/posts/go/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88.html",{loader:()=>n.e(6995).then(n.bind(n,4893)),meta:{c:["go"],g:["go"],e:'<p><a href="https://www.bilibili.com/video/BV1hv411x7we" target="_blank" rel="noopener noreferrer">Golang合集</a></p>\n',r:{minutes:.05,words:15},t:"函数调用栈",y:"a"}}],["/posts/go/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA.html",{loader:()=>n.e(4501).then(n.bind(n,1366)),meta:{c:["go"],g:["go"],e:'<ol>\n<li>官方</li>\n</ol>\n<p><a href="https://opentracing.io/" target="_blank" rel="noopener noreferrer">https://opentracing.io/</a>\n<a href="https://www.jaegertracing.io/" target="_blank" rel="noopener noreferrer">https://www.jaegertracing.io/</a>\n<a href="https://github.com/apache/skywalking" target="_blank" rel="noopener noreferrer">https://github.com/apache/skywalking</a></p>',r:{minutes:.29,words:87},t:"分布式链路追踪",y:"a"}}],["/posts/go/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C.html",{loader:()=>n.e(6519).then(n.bind(n,9458)),meta:{e:'\n<ol>\n<li>内核态的上下文切换会比较耗时（读写锁和互斥锁涉及内核？）</li>\n<li>原子操作在用户态就可以完成，性能更高</li>\n</ol>\n<blockquote>\n<p>针对基本数据类型</p>\n</blockquote>\n<p><a href="https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%92%8Catomic%E5%8C%85.html" target="_blank" rel="noopener noreferrer">很细致的性能对比 &amp;&amp; 并发非安全引发错误示例</a></p>',r:{minutes:.4,words:121},t:"原子操作",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8errors.html",{loader:()=>n.e(9691).then(n.bind(n,1435)),meta:{e:'<p><a href="https://pkg.go.dev/github.com/pkg/errors" target="_blank" rel="noopener noreferrer">github.com/pkg/errors</a></p>\n<p><a href="https://pkg.go.dev/errors" target="_blank" rel="noopener noreferrer">pkg.go.dev/errors</a></p>\n<h3>差异</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>两者不同本质上在 fmt.Printf("%+v" ,err)时候 github.com 的多了堆栈信息</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:2.57,words:772},t:"golang推荐的包",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BE%9D%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%93%E6%8B%BC%E6%8E%A5URL.html",{loader:()=>n.e(8348).then(n.bind(n,2597)),meta:{d:1681206012e3,l:"2023年4月11日",c:["golang"],g:["golang"],e:"使用结构体拼接URL请求路径，优化写法，提升代码质量",r:{minutes:1.01,words:303},t:"如何优雅的依据结构体拼接URL",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E5%88%A4%E5%AE%9A%E9%9B%B6%E5%80%BC.html",{loader:()=>n.e(5604).then(n.bind(n,2295)),meta:{e:'\n<blockquote>\n<p>reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())</p>\n</blockquote>\n<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.09,words:26},t:"如何优雅判定",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0pkg.html",{loader:()=>n.e(1799).then(n.bind(n,2106)),meta:{d:1597945392e3,l:"2020年8月21日",c:["golang"],g:["golang"],e:"如何发布开源包",r:{minutes:.27,words:81},t:"如何发布包到pkg",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",{loader:()=>n.e(7510).then(n.bind(n,348)),meta:{d:1622918412e3,l:"2021年6月6日",c:["golang"],g:["golang","单元测试"],u:1,e:"命令行执行单元测试",r:{minutes:.84,words:251},t:"如何命令行执行单元测试",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E6%B1%A0%E5%8C%96%E8%BF%9E%E6%8E%A5.html",{loader:()=>n.e(1099).then(n.bind(n,1972)),meta:{e:"\n<ol>\n<li>实现原理</li>\n<li>具体抽象</li>\n<li>扩缩容机制</li>\n<li>超时与保活</li>\n<li>池满策略</li>\n</ol>\n<h3>GRPC调优</h3>\n<h3>GRPC特性</h3>\n<ol>\n<li>多路复用。HTTP/2作为应用层的传输协议。HTTP/2会复用传输层的TCP连接，但是Client有些条件些会新建连接（server发送GOAWAY Frame也会强制让client新建连接）</li>\n<li>一次GRPC调用就产生一个Stream（Stream包含多个Frame,Frame也是HTTP/2最小传输单位）</li>\n<li>一条GRPC连接允许并发的发送和接收多个Stream（服务端默认100个）控制参数MaxConcurrentStreams</li>\n<li>超时重连。创建连接后有一个goroutine负责重连机制,自带的</li>\n</ol>",r:{minutes:.79,words:236},t:"如何池化连接",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E9%80%80%E5%87%BA%E5%8D%8F%E7%A8%8B.html",{loader:()=>n.e(4788).then(n.bind(n,7229)),meta:{e:'\n<h3>超时场景</h3>\n<ol>\n<li>模拟一个Goroutine泄漏的场景</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>父协程创建chan(无缓冲且只有父协程有接收的位置)且在子协程运行完成之前退出</span></span>\n<span class="line"><span>子协程(阻塞在 chan &lt;- true)(因为唯一接收的地方父协程关闭了)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>当父协程close了，子协程继续 chan &lt;- true 也会出错</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.73,words:220},t:"如何退出协程",y:"a"}}],["/posts/go/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEgo%E7%A7%81%E6%9C%89%E5%BA%93.html",{loader:()=>n.e(6878).then(n.bind(n,1861)),meta:{d:1622918412e3,l:"2021年6月6日",c:["golang"],g:["golang"],u:1,e:"配置git和go env",r:{minutes:1.38,words:415},t:"如何配置go私有库",y:"a"}}],["/posts/go/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD%E5%8F%8A%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(1928).then(n.bind(n,7268)),meta:{e:'\n<h3>常见5种字符串拼接</h3>\n<ol>\n<li>使用 +</li>\n<li>fmt.Sprintf</li>\n<li>strings.Builder</li>\n<li>bytes.Buffer</li>\n<li>[]byte 或者 []rune</li>\n</ol>\n<h3>性能测试方式</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>benchmark</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.75,words:225},t:"字符串拼接性能及原理",y:"a"}}],["/posts/go/%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1GoModules.html",{loader:()=>n.e(7121).then(n.bind(n,4397)),meta:{c:["go"],g:["go"],e:'\n<p><a href="https://www.jishuchi.com/read/gin-practice/3794#8c7ywi" target="_blank" rel="noopener noreferrer">go-modules 干货满满的 Go Modules 和 goproxy.cn</a>\n<a href="https://golangbyexample.com/go-mod-sum-module/" target="_blank" rel="noopener noreferrer">理解Go中的go.sum和go.mod文件</a>\n<a href="https://www.jishuchi.com/read/gin-practice/3795" target="_blank" rel="noopener noreferrer">终极入门</a></p>',r:{minutes:1.64,words:493},t:"干货满满的GoModules",y:"a"}}],["/posts/go/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8EDDD.html",{loader:()=>n.e(7607).then(n.bind(n,5814)),meta:{e:'<h3>微服务与领域驱动模型</h3>\n<blockquote>\n<p>单体架构太复杂，即使已经拆分为多个模块但是还是会部署为单体应用，分而治之，就有了微服务</p>\n</blockquote>\n<h3>SOA</h3>\n<h3>微服务定义</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>原子</span></span>\n<span class="line"><span>独立</span></span>\n<span class="line"><span>去中心化 (数据、治理、技术)</span></span>\n<span class="line"><span>隔离</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>复杂度高</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.42,words:126},t:"",y:"a"}}],["/posts/go/%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6.html",{loader:()=>n.e(5279).then(n.bind(n,307)),meta:{e:'<h3>runtime 对 G 进行异步抢占</h3>\n<blockquote>\n<p>go 1.13 \\ go 1.14</p>\n</blockquote>\n<h3>Linux上真正的抢占式调度是基于信号来实现的 "异步抢占"</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>调用操作系统中信号相关的系统调用</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>发送指定信号给目标线程</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>线程接收到信号之后</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.3,words:90},t:"抢占式调度",y:"a"}}],["/posts/go/%E6%8F%AD%E7%A7%98Build%E7%BA%A6%E6%9D%9F.html",{loader:()=>n.e(5277).then(n.bind(n,2297)),meta:{e:'\n<p><a href="https://pkg.go.dev/go/build#hdr-Build_Constraints" target="_blank" rel="noopener noreferrer">pkg.go.dev/go/build</a></p>\n<ol>\n<li>Go Path 源程序跟路径</li>\n<li>Build Constraints 构建约束</li>\n<li>Binary-Only Packages 二进制包</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GOARCH 目标架构</span></span>\n<span class="line"><span>GOOS 目标操作系统</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.2,words:59},t:"go build 约束",y:"a"}}],["/posts/go/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91.html",{loader:()=>n.e(7935).then(n.bind(n,5133)),meta:{e:'<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">//go:build</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> linux</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.02,words:6},t:"",y:"a"}}],["/posts/go/%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B.html",{loader:()=>n.e(5420).then(n.bind(n,9173)),meta:{c:["go"],g:["go"],e:"\n<h3>微服务划分</h3>\n<ol>\n<li>user center 用户中心(用户关系)</li>\n<li>Distributed File System 文件服务中心</li>\n<li>Activity 活动中心</li>\n<li>AD 广告中心</li>\n<li>Wiki 百科中心</li>\n<li>Moment 热帖话题</li>\n<li>Search Center 搜索中心</li>\n<li>IM Logic 通讯消息中心</li>\n<li>CMS 后台管理系统</li>\n<li>User Logic\\Register 用户注册登陆中心</li>\n</ol>\n<h3>具体实施</h3>",r:{minutes:1.1,words:331},t:"架构搭建相关",y:"a"}}],["/posts/go/%E7%9B%91%E5%90%AC%E4%BF%A1%E5%8F%B7.html",{loader:()=>n.e(1824).then(n.bind(n,8387)),meta:{c:["go"],g:["go"],e:'<h3>监听系统信号</h3>\n<div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package main</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import (</span></span>\n<span class="line"><span>\t"context"</span></span>\n<span class="line"><span>\t"log"</span></span>\n<span class="line"><span>\t"os"</span></span>\n<span class="line"><span>\t"os/signal"</span></span>\n<span class="line"><span>\t"syscall"</span></span>\n<span class="line"><span>\t"time"</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func main() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tctx, cancel := context.WithCancel(context.Background())</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tch := make(chan os.Signal, 1)</span></span>\n<span class="line"><span>\tsignal.Notify(ch, os.Interrupt, syscall.SIGTERM)</span></span>\n<span class="line"><span>\tgo func() {</span></span>\n<span class="line"><span>\t\t&lt;-ch</span></span>\n<span class="line"><span>\t\tlog.Println("Received termination, signaling shutdown")</span></span>\n<span class="line"><span>\t\tcancel()</span></span>\n<span class="line"><span>\t}()</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tgo func(ctx context.Context) {</span></span>\n<span class="line"><span>\t\t&lt;-ctx.Done()</span></span>\n<span class="line"><span>\t\tlog.Println("context done")</span></span>\n<span class="line"><span>\t\tos.Exit(0)</span></span>\n<span class="line"><span>\t}(ctx)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\ttime.Sleep(time.Minute)</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.21,words:62},t:"信号监听",y:"a"}}],["/posts/go/%E8%85%BE%E8%AE%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(3799).then(n.bind(n,4797)),meta:{d:1681206012e3,l:"2023年4月11日",c:["golang"],g:["golang"],e:"腾讯内部的代码风格要求",r:{minutes:17.11,words:5132},t:"腾讯代码规范",y:"a"}}],["/posts/go/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91.html",{loader:()=>n.e(5087).then(n.bind(n,7639)),meta:{d:1680936012e3,l:"2023年4月8日",c:["go"],g:["net"],e:"转发请求数据包、反向代理",r:{minutes:.32,words:95},t:"请求转发",y:"a"}}],["/posts/go/%E8%AF%BB%E5%86%99%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(3397).then(n.bind(n,4451)),meta:{c:["go"],g:["go"],e:'<p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>\n',r:{minutes:.07,words:22},t:"读写锁原理",y:"a"}}],["/posts/go/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.html",{loader:()=>n.e(3441).then(n.bind(n,6673)),meta:{c:["go"],g:["go"],e:"<h3>Code</h3>\n<ul>\n<li>步过: 逐行（不进入函数）</li>\n<li>步入: 逐行（会跳进函数内部逐行）</li>\n<li>步出: 跳出当前函数</li>\n<li>恢复程序: 继续运行程序直至断点</li>\n<li>暂停程序|停止|查看断点|静音断点|运行到光标: 故名思义</li>\n</ul>\n",r:{minutes:.26,words:77},t:"调试工具",y:"a"}}],["/posts/go/%E9%9D%A2%E8%AF%95%E9%A2%98.html",{loader:()=>n.e(9566).then(n.bind(n,7252)),meta:{e:"<h3>华润云三面</h3>\n<ol>\n<li>golang之中的结构体的内存对齐</li>\n<li>sync.Cond原理</li>\n<li>sync.Map设计（空间换时间、缓存穿透计数等，表达不够清晰）</li>\n<li>fmt是如何做到不会让堆内存爆满的</li>\n<li>如何通过os.Signal实现go程序平滑重启</li>\n<li>同时读取和写入map会有问题吗，底层实现是怎么样的，平时使用要注意什么(幼麟实验室的map讲解说了以后面试官仍然认为理解太粗浅)</li>\n<li>goroutine在time.Sleep后状态流转是什么样子的</li>\n<li>goroutine的唤醒是如何实现的</li>\n<li>net/http/pprof和runtime/pprof的区别是什么，底层实现它们是什么关系</li>\n<li>MySQL优化器索引选取是如何实现的(唯一性、B+树查找逻辑、回表、主键索引、辅助索引这些都不是关键的还有啥，面试官认为理解太粗浅)</li>\n<li>什么是云原生，说说对它的理解</li>\n<li>如果k8s里面pod调度很不均匀如何排查问题</li>\n<li>k8s的svc负载均衡设计，优化空间</li>\n</ol>",r:{minutes:3.15,words:946},t:"",y:"a"}}],["/posts/java/docker%E5%AE%89%E8%A3%85maven%E4%BB%93%E5%BA%93.html",{loader:()=>n.e(7836).then(n.bind(n,5834)),meta:{c:["java"],g:["java"],e:'<h3>1. maven仓库安装</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 8081:8081</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sonatype/nexus3</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:1.39,words:418},t:"docker安装maven仓库",y:"a"}}],["/posts/java/Java%E7%89%88%E6%9C%AC.html",{loader:()=>n.e(3279).then(n.bind(n,7034)),meta:{c:["java"],g:["java"],e:'<p>在 Mac 上更改 Java 版本通常涉及更新 <code>JAVA_HOME</code> 和 <code>PATH</code> 环境变量。以下是在 Mac 上更改 Java 版本的一般步骤：</p>\n<ol>\n<li>首先，检查系统中已安装的 Java 版本。在终端中运行以下命令：</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/usr/libexec/java_home -V</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.83,words:250},t:"Java版本",y:"a"}}],["/posts/java/%E5%88%B6%E4%BD%9Cmaven%E5%8C%85.html",{loader:()=>n.e(1127).then(n.bind(n,1244)),meta:{c:["java"],g:["java"],e:'<h3>1.IDEA创建一个Maven工具包</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">IDEA</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> New</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Project</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Archetype</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> maven-archetype-quickstart</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.93,words:1179},t:"Maven包制作与使用",y:"a"}}],["/posts/kafka/group.html",{loader:()=>n.e(2856).then(n.bind(n,7040)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka原理"],e:'<h3>相关概念</h3>\n<ol>\n<li>自动提交</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>如果enable.auto.commit为true</span></span>\n<span class="line"><span>则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.24,words:373},t:"kafka的组",y:"a"}}],["/posts/kafka/kafka%E5%9F%BA%E7%A1%80.html",{loader:()=>n.e(7759).then(n.bind(n,1601)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka原理"],e:"<h3>基础问题</h3>\n<ol>\n<li>kafka的zookeeper是干嘛的，Coordinator 和 Controller 和 Leader/Follower</li>\n<li>说说消息队列模型 (点对点\\发布订阅)</li>\n<li>通信过程原理</li>\n<li>发送消息时候如何选择分区，分区有什么用</li>\n<li>Rebalance重平衡</li>\n<li>分区分配策略</li>\n<li>如何保证消息可靠性</li>\n<li>AR（Assigned Replicas）副本的集合</li>\n<li>和Leader副本保持同步的副本集合称为ISR（InSyncReplicas）(所有follower)</li>\n</ol>",r:{minutes:.68,words:203},t:"kafka高可用相关问题",y:"a"}}],["/posts/kafka/kafka%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html",{loader:()=>n.e(8166).then(n.bind(n,4253)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka原理"],e:'<h3>博客园-详细基础入门</h3>\n<blockquote>\n<p>高性能，低延迟提交日志存储，复制和传播的专用分布式文件系统</p>\n</blockquote>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>注意是一个分布式文件系统</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:12.6,words:3779},t:"kafka基础入门",y:"a"}}],["/posts/kafka/",{loader:()=>n.e(3763).then(n.bind(n,2988)),meta:{e:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>使用kafka关注：</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1. 消费可靠（提交offset和消费动作次序、重复消费还是消息丢失、消息堆积）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2. 生产可靠（ack、批量发送还是单个发送）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>3. kafka可靠（落盘机制、副本机制）</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.22,words:65},t:"kafka",y:"a"}}],["/posts/kafka/Rebalance%E6%9C%BA%E5%88%B6.html",{loader:()=>n.e(332).then(n.bind(n,3002)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka原理"],e:'<h3>什么是重平衡</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>如果消费组里的消费者数量有变化或消费的分区数有变化</span></span>\n<span class="line"><span>kafka会重新分配消费者消费分区的关系</span></span>\n<span class="line"><span>如某个消费者挂了，此时会自动把分配给他的分区交给其他的消费者</span></span>\n<span class="line"><span>如果他又重启了，那么又会把一些分区重新交还给他</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.08,words:325},t:"kafka Rebalance机制",y:"a"}}],["/posts/kafka/%E5%88%86%E5%8C%BA%E5%92%8C%E5%89%AF%E6%9C%AC%E6%9C%BA%E5%88%B6.html",{loader:()=>n.e(9856).then(n.bind(n,7238)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka原理"],e:'<h3>Leader &amp;&amp; Follower</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>leader : 读写</span></span>\n<span class="line"><span>follewer : 副本数据同步</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.45,words:134},t:"分区和副本机制",y:"a"}}],["/posts/kafka/%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3.html",{loader:()=>n.e(5266).then(n.bind(n,4529)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka"],e:"<h3>参数列表</h3>\n<ol>\n<li>auto.offset.reset [none\\earliest\\latest]</li>\n<li>group.id</li>\n<li>session.timeout.ms</li>\n<li>auto.offset.reset</li>\n<li>enable.auto.commit</li>\n<li>sasl.mechanism\\username\\password</li>\n<li>kafka.session.timeout</li>\n<li>kafka.auto.commit.interval</li>\n<li>heartbeat.interval.ms</li>\n<li>log.retention.hours</li>\n<li>log.cleanup.policy</li>\n<li>max.poll.interval.ms 和 session.timeout.ms</li>\n</ol>",r:{minutes:.33,words:98},t:"kafka参数详解",y:"a"}}],["/posts/kafka/%E5%90%8C%E6%AD%A5%E5%8F%91%E9%80%81%E5%92%8C%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81.html",{loader:()=>n.e(2471).then(n.bind(n,406)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka原理"],e:'<h3>逐个发送</h3>\n<p><a href="https://zhuanlan.zhihu.com/p/451678059" target="_blank" rel="noopener noreferrer">华为云开发者联盟​-带你认识三种kafka消息发送模式</a></p>\n<ol>\n<li>Fire-and-forget (不关心可靠性)</li>\n<li>Synchronous send (关心次序)</li>\n<li>Asynchronous send (不关心次序)</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>逐条发送</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>请求队列InFlightRequest中永远最多有一条数据</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>批量发送参数：max.in.flight.requests.per.connection=1 &amp; batch.size=1 效果也是逐条发送</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.46,words:439},t:"同步和异步发送",y:"a"}}],["/posts/kafka/%E5%90%8C%E6%AD%A5%E6%8F%90%E4%BA%A4%E5%92%8C%E5%BC%82%E6%AD%A5%E6%8F%90%E4%BA%A4.html",{loader:()=>n.e(4839).then(n.bind(n,1595)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka原理"],e:'<h3>自动提交</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>enable.auto.commit=true</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>消费者会在poll方法调用后每隔五秒(auto.commit.interval.ms指定)提交一次offset</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.31,words:394},t:"同步提交和异步提交",y:"a"}}],["/posts/kafka/%E5%A6%82%E4%BD%95%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E5%8F%88%E4%B8%8D%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE.html",{loader:()=>n.e(1170).then(n.bind(n,5299)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kafka"],g:["kafka原理"],e:'<h3>问题罗列</h3>\n<ol>\n<li>Producer发消息至Broker的时候，就有可能会丢消息 | producer -&gt; broker</li>\n<li>把消息发送到Broker以后，也有可能丢消息 | broker-&gt;磁盘 | broker-&gt;broker之间同步</li>\n<li>client消费数据时候丢失数据或者重复消费 | 常见场景</li>\n</ol>\n<h3>1和2的问题如何解决</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>callback的api</span></span>\n<span class="line"><span>acks</span></span>\n<span class="line"><span>retries</span></span>\n<span class="line"><span>factor</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.04,words:311},t:"如何保证不重复消费又不丢失数据",y:"a"}}],["/posts/kubernetes/Chart.html",{loader:()=>n.e(4047).then(n.bind(n,318)),meta:{e:'\n<h3>创建Chart</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>helm create mychart</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>ls -la mychart/templates/</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.17,words:51},t:"chart",y:"a"}}],["/posts/kubernetes/CI%E5%88%B6%E4%BD%9C%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F.html",{loader:()=>n.e(7448).then(n.bind(n,6189)),meta:{c:["docker"],g:["cicd","dockerfile"],e:'<h3>一、总览</h3>\n<ol>\n<li>制作镜像支持编译SDN以及上传helm包和images</li>\n</ol>\n<ul>\n<li>docker in docker</li>\n<li>go version 1.8</li>\n<li>registry.company.net</li>\n<li>buildx</li>\n</ul>\n<ol start="2">\n<li>\n<p>注册runner到gitlab</p>\n</li>\n<li>\n<p>编写gitlab-ci.yml文件设置CI流水线</p>\n</li>\n</ol>\n<h3>一、镜像构建源文件</h3>\n<ol>\n<li>目录树</li>\n</ol>',r:{minutes:3.29,words:988},t:"CI制作多架构镜像",y:"a"}}],["/posts/kubernetes/containerd%E4%B8%AD%E9%9B%86%E6%88%90kata.html",{loader:()=>n.e(6794).then(n.bind(n,7635)),meta:{d:1682358012e3,l:"2023年4月25日",c:["kubernetes"],g:["docker","kata"],u:1,e:"如何在containerd之中集成kata",r:{minutes:.18,words:54},t:"containerd之中集成kata",y:"a"}}],["/posts/kubernetes/containerd%E5%92%8Ckata_firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(3576).then(n.bind(n,8756)),meta:{d:1682275212e3,l:"2023年4月24日",c:["kubernetes"],g:["kubernetes"],u:1,e:"安装containerd和kata，测试kata-qemu和kata-firecracker",r:{minutes:4.32,words:1295},t:"containerd和kata&firecracker环境搭建",y:"a"}}],["/posts/kubernetes/containerd%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(2020).then(n.bind(n,9425)),meta:{d:1683398412e3,l:"2023年5月7日",c:["kubernetes"],g:["kubernetes"],u:1,e:"安装containerd和扩展",r:{minutes:1.98,words:593},t:"containerd安装",y:"a"}}],["/posts/kubernetes/CRD%E6%8E%A7%E5%88%B6%E5%99%A8.html",{loader:()=>n.e(8053).then(n.bind(n,1869)),meta:{d:1682275212e3,l:"2023年4月24日",c:["kubernetes"],g:["kubernetes"],u:1,e:"来个CRD控制器的QuickStart，从code gender代码生成到编译控制器，运行控制器查看监听事件，以及informer设计",r:{minutes:2.23,words:670},t:"CRD控制器",y:"a"}}],["/posts/kubernetes/eBPF_cilium%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html",{loader:()=>n.e(155).then(n.bind(n,364)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>搭建集群使用cilium作为网络解决方案，理解eBPF在其中充当的角色、传统flannel下的集群的优缺点</p>\n</blockquote>\n<h3>一、概念</h3>\n<p>eBPF（extended Berkeley Packet Filter）是一种在Linux内核中实现的虚拟机技术</p>\n<h3>二、尝试cilium</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 安装Cilium CLI</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">CILIUM_CLI_VERSION</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://raw.githubusercontent.com/cilium/cilium-cli/master/stable.txt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">CLI_ARCH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">amd64</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">)"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "aarch64"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">then</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> CLI_ARCH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">arm64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">fi</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -L</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --fail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --remote-name-all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://github.com/cilium/cilium-cli/releases/download/</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">CILIUM_CLI_VERSION</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">/cilium-linux-</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">CLI_ARCH</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">.tar.gz{,.sha256sum}</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sha256sum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cilium-linux-</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">CLI_ARCH</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">.tar.gz.sha256sum</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> xzvfC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cilium-linux-</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">CLI_ARCH</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">.tar.gz</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/local/bin</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cilium-linux-</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">CLI_ARCH</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">.tar.gz{,.sha256sum}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.95,words:886},t:"eBPF&cilium快速入门",y:"a"}}],["/posts/kubernetes/eBPF%E5%B7%A5%E5%85%B7%E5%BA%93.html",{loader:()=>n.e(8633).then(n.bind(n,6072)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<ol>\n<li>工具库</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> github.com/cilium/ebpf</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:1.9,words:570},t:"eBPF工具库",y:"a"}}],["/posts/kubernetes/endpoints.html",{loader:()=>n.e(3465).then(n.bind(n,6874)),meta:{e:'\n<p><a href="https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/service-resources/endpoints-v1/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/service-resources/endpoints-v1/</a></p>\n',r:{minutes:.05,words:15},t:"endpoints",y:"a"}}],["/posts/kubernetes/flanne%E6%8E%A5%E5%85%A5k8s.html",{loader:()=>n.e(4365).then(n.bind(n,9047)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>kubernetes网络解决方案flannel如何使用，拓扑图理解</p>\n</blockquote>\n<h3>1.kubernetes如何接入flannale</h3>\n<p><a href="https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/" target="_blank" rel="noopener noreferrer">k8s/概念/扩展/网络插件</a>\n<a href="https://github.com/containerd/containerd/blob/main/script/setup/install-cni" target="_blank" rel="noopener noreferrer">k8s/概念/扩展/网络插件/containerd安装网络插件</a>\n<a href="https://github.com/cri-o/cri-o/blob/main/contrib/cni/README.md" target="_blank" rel="noopener noreferrer">k8s/概念/扩展/网络插件/CRI-O安装网络插件</a>\n<a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/#networking-and-network-policy" target="_blank" rel="noopener noreferrer">k8s/概念/集群管理/安装扩展</a>\n<a href="https://github.com/flannel-io/flannel#deploying-flannel-with-kubectl" target="_blank" rel="noopener noreferrer">deploying-flannel-with-kubectl</a>\n<a href="https://github.com/flannel-io/flannel#deploying-flannel-with-helm" target="_blank" rel="noopener noreferrer">deploying-flannel-with-helm</a></p>',r:{minutes:8.84,words:2651},t:"flannel接入k8s",y:"a"}}],["/posts/kubernetes/harbor%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html",{loader:()=>n.e(9928).then(n.bind(n,6938)),meta:{e:'\n<p><a href="https://goharbor.io/docs/2.7.0/install-config/" target="_blank" rel="noopener noreferrer">goharbor.io</a></p>\n<ol>\n<li>\n<p>下载 harbor 安装程序 <a href="https://github.com/goharbor/harbor/tags" target="_blank" rel="noopener noreferrer">下载地址</a> harbor-offline-installer-v2.5.6.tgz</p>\n</li>\n<li>\n<p>修改配置文件 cp harbor.yml.tmpl harbor.yml</p>\n</li>\n</ol>',r:{minutes:.64,words:193},t:"harbor install && usage",y:"a"}}],["/posts/kubernetes/iperf%E7%94%A8%E6%B3%95.html",{loader:()=>n.e(1872).then(n.bind(n,8182)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>iperf压测网速</p>\n</blockquote>\n<h3>一、工具用途</h3>\n<p>测试带宽工具，具备类似功能的工具还有scp、wget。</p>\n<h3>二、开始带宽测试</h3>\n<ol>\n<li>\n<p>直接容器启动一个iperf3的server和client测试带宽，来一个<a href="https://github.com/nerdalert/iperf3/blob/master/README.md" target="_blank" rel="noopener noreferrer">quickstart</a></p>\n</li>\n<li>\n<p>服务器之间带宽测试</p>\n</li>\n</ol>',r:{minutes:2.9,words:869},t:"iperf用法",y:"a"}}],["/posts/kubernetes/k8s%E4%B8%8A%E6%90%AD%E5%BB%BAMySQL%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4.html",{loader:()=>n.e(4045).then(n.bind(n,1112)),meta:{e:'<h3>开源安装包</h3>\n<p><a href="https://artifacthub.io/packages/helm/bitnami/mysql" target="_blank" rel="noopener noreferrer">artifacthub.io/packages/helm/bitnami/mysql</a></p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># global.storageClass 存储类</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># secondary.replicaCount 从节点数量</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># MySQL的架构可以是独立的（standalone）或者是复制（replication）</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">helm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mysql-cluster</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    oci://registry-1.docker.io/bitnamicharts/mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    --set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> global.storageClass=nfs-client</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    --set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> architecture=replication</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    --set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> secondary.replicaCount=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.34,words:101},t:"",y:"a"}}],["/posts/kubernetes/k8s%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(7012).then(n.bind(n,3018)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kubernetes"],g:["runc","containerd"],e:'<h3>containerd 二进制安装</h3>\n<p><a href="https://github.com/containerd/containerd/blob/main/docs/getting-started.md" target="_blank" rel="noopener noreferrer">github.com/containerd/containerd/blob/main/docs/getting-started.md</a></p>\n<p><a href="https://github.com/containerd/containerd/releases" target="_blank" rel="noopener noreferrer">github.com/containerd/containerd/releases</a></p>',r:{minutes:1.39,words:418},t:"k8s的一些插件安装",y:"a"}}],["/posts/kubernetes/k8s%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86.html",{loader:()=>n.e(6116).then(n.bind(n,9665)),meta:{e:'\n<h3>Pod是什么</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>最小执行单元</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.9,words:270},t:"k8s的资源管理",y:"a"}}],["/posts/kubernetes/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6.html",{loader:()=>n.e(9562).then(n.bind(n,1426)),meta:{e:'<ol>\n<li>初始化集群后的宿主机的目录</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-C5B261D3 kubernetes]# pwd</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/kubernetes</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-C5B261D3 kubernetes]# tree </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">.</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> admin.conf</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> controller-manager.conf</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubelet.conf</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> manifests</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> etcd.yaml</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kube-apiserver.yaml</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kube-controller-manager.yaml</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kube-scheduler.yaml</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pki</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apiserver.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apiserver-etcd-client.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apiserver-etcd-client.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apiserver.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apiserver-kubelet-client.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apiserver-kubelet-client.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ca.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ca.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> etcd</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ca.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ca.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> healthcheck-client.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> healthcheck-client.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> peer.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> peer.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> server.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> server.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> front-proxy-ca.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> front-proxy-ca.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> front-proxy-client.crt</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> front-proxy-client.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sa.key</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sa.pub</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> scheduler.conf</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.8,words:541},t:"",y:"a"}}],["/posts/kubernetes/kube-proxy%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",{loader:()=>n.e(6764).then(n.bind(n,6997)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>理解kube-proxy在Flannel网络之中充当什么角色，底层的负载均衡算法是如何实现，相关的Service如何使用该插件的。</p>\n</blockquote>\n<h3>相关文档</h3>\n<p><a href="https://zhuanlan.zhihu.com/p/337806843" target="_blank" rel="noopener noreferrer">一文看懂 Kube-proxy</a></p>\n',r:{minutes:.22,words:66},t:"kube-proxy设计与实现",y:"a"}}],["/posts/kubernetes/kubeadm.html",{loader:()=>n.e(3100).then(n.bind(n,3394)),meta:{e:'\n<p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/" target="_blank" rel="noopener noreferrer">kubeadm quickstart</a></p>\n<p><a href="https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-ubuntu-server-16.04-with-kubeadm.html" target="_blank" rel="noopener noreferrer">kubeam create cluster</a></p>',r:{minutes:.49,words:148},t:"kubeadm",y:"a"}}],["/posts/kubernetes/kubeadm%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0.html",{loader:()=>n.e(1715).then(n.bind(n,7845)),meta:{e:"\n",r:{minutes:.02,words:5},t:"kubeadm 命令",y:"a"}}],["/posts/kubernetes/kubectl.html",{loader:()=>n.e(1977).then(n.bind(n,1611)),meta:{e:'\n<blockquote>\n<p>$HOME/.kube/config</p>\n</blockquote>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir -p $HOME/.kube</span></span>\n<span class="line"><span>cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span>\n<span class="line"><span>chown $(id -u):$(id -g) $HOME/.kube/config</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.2,words:61},t:"kubectl",y:"a"}}],["/posts/kubernetes/kubectl_command.html",{loader:()=>n.e(5679).then(n.bind(n,7463)),meta:{d:1680936012e3,l:"2023年4月8日",c:["kubernetes"],g:["kubectl"],e:'<h3>命令式对象管理</h3>\n<ol>\n<li>查看所有的pod</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pods</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:5.13,words:1539},t:"kubectl一些常用的命令",y:"a"}}],["/posts/kubernetes/kubernetes%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98.html",{loader:()=>n.e(4455).then(n.bind(n,9505)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>常见的k8s问题汇总巩固基础</p>\n</blockquote>\n<ol>\n<li>\n<p>集群的cluser ip 可以直接访问吗</p>\n</li>\n<li>\n<p>network policy</p>\n</li>\n<li>\n<p>describe svc的时候endpoint可以直接访问吗</p>\n</li>\n<li>\n<p>host network模式</p>\n</li>\n<li>\n<p>cluster级别和namespace级别</p>\n</li>\n<li>\n<p>pod的ip和service的cluster ip关系</p>\n</li>\n<li>\n<p>cluster ip 可以访问吗 pod的ip可以访问吗</p>\n</li>\n<li>\n<p>metadata\\selector\\label\\annotations分别是干嘛的他们之间的关系是什么</p>\n</li>\n<li>\n<p>k8s的cert-manager下的pod是干嘛的（证书的更新、颁发、管理）</p>\n</li>\n<li>\n<p>k8s运行起来需要哪些组件（Mater组件、Node组件）</p>\n<div class="language-s line-numbers-mode" data-highlighter="shiki" data-ext="s" data-title="s" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>要在Kubernetes上成功运行应用程序，需要部署以下组件：</span></span>\n<span class="line"><span>1. Kubernetes Master组件：</span></span>\n<span class="line"><span>  - kube-apiserver：提供Kubernetes API，并处理集群管理的核心功能。</span></span>\n<span class="line"><span>  - kube-controller-manager：负责运行控制器，监控集群状态并处理集群级别的任务。</span></span>\n<span class="line"><span>  - kube-scheduler：负责为Pod选择合适的节点进行调度。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2. Kubernetes Node组件：</span></span>\n<span class="line"><span>  - kubelet：在每个节点上运行，负责管理和执行Pod的生命周期。</span></span>\n<span class="line"><span>  - kube-proxy：负责实现Kubernetes服务的网络代理和负载均衡功能。</span></span>\n<span class="line"><span>  - 容器运行时：如Docker、containerd等，负责在节点上启动和管理容器。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>3. etcd：分布式键值存储系统，用于保存Kubernetes集群的状态和配置。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>4. Kubernetes网络插件：用于实现Pod之间和Pod与外部网络的通信，常见的插件有Calico、Flannel、Weave等。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>5. 可选组件：</span></span>\n<span class="line"><span>  - kube-dns/coredns：为集群中的服务提供DNS解析。</span></span>\n<span class="line"><span>  - Kubernetes Dashboard：提供Web界面用于管理和监控集群。</span></span>\n<span class="line"><span>  - Ingress Controller：用于处理集群中的入口流量，并将流量路由到相应的服务。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>除了以上核心组件，还可以根据需要添加其他组件和功能，如日志收集器、监控系统等。总之，以上组件是构成一个基本的Kubernetes集群所必需的组件，它们共同协作来实现容器编排和应用程序管理。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>k8s的权限管理是怎么样的</p>\n</li>\n<li>\n<p>kube-proxy是干嘛的</p>\n</li>\n<li>\n<p>kube-proxy的源码我应该怎么读，分哪几块理解，kube-proxy的设计是怎么样的</p>\n</li>\n<li>\n<p>k8s初始运行多少个pod</p>\n<div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cert-manager</span></span>\n<span class="line"><span>kube-system\\csi-cephfsplugin  存储标准</span></span>\n<span class="line"><span>kube-system\\elastic-autoscaler-manager</span></span>\n<span class="line"><span>kube-systeme\\etcd</span></span>\n<span class="line"><span>kube-system\\kube-apiserver</span></span>\n<span class="line"><span>kube-system\\kube-controller-manager</span></span>\n<span class="line"><span>kube-system\\kube-flannel</span></span>\n<span class="line"><span>kube-system\\traefik</span></span>\n<span class="line"><span>kube-system\\web-kubectl</span></span>\n<span class="line"><span>kube-system\\resourcequota-webhook-manage</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>运行一个k8s，需要安装在宿主机的软件有哪些，比如cni插件二进制脚本需要安装在宿主机上</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">在宿主机上安装和运行Kubernetes（k8s）集群，需要以下软件和工具：</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 容器运行时（Container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Runtime）：Kubernetes支持多个容器运行时，如Docker、containerd、CRI-O等。你需要在宿主机上安装所选容器运行时，并确保其能与Kubernetes集成。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubeadm：这是一个用于部署和管理Kubernetes集群的命令行工具，需要在宿主机上进行安装。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubelet：这是Kubernetes集群中每个节点上的主要组件，负责管理容器的生命周期和运行状态。kubeadm会自动安装和配置kubelet。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubectl：这是Kubernetes的命令行工具，用于与集群进行交互、管理和监控。你需要在宿主机上安装kubectl。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> CNI插件：CNI（Container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Interface）是Kubernetes网络模型的一部分，它定义了容器网络如何与宿主机和其他容器进行通信。你需要选择一个CNI插件，如Flannel、Calico、Weave等，并将其二进制脚本安装在宿主机上。每个节点上的CNI插件负责为容器提供网络连接。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">此外，如果你使用的是容器运行时Docker，那么你还需要在宿主机上安装Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Engine。注意，Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Engine与Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> CLI是两个不同的组件，你只需要安装Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Engine。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>k8s的kubelet是一个常驻进程吗，它会和集群的哪些组件通讯，通讯的方式有哪些</p>\n</li>\n<li>\n<p>k8s之中除了<code>/etc/kubernetes</code>文件夹还有哪些关于k8s的配置文件</p>\n</li>\n<li>\n<p>宿主机上k8s相关的配置文件有哪些，比如/etc/kubernetes</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Kubernetes的配置文件在宿主机上主要包括以下几个目录和文件：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">：这个目录包含了Kubernetes主要的配置文件，其中一些重要的文件包括：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/kubernetes/kubelet.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">：kubelet的配置文件，用于指定kubelet与Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Server通信的参数和证书信息。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/kubernetes/admin.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/kubernetes/kubeconfig</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">：Kubernetes管理员用户的配置文件，用于和Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Server进行认证和授权。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/kubernetes/bootstrap-kubelet.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">：kubelet在启动时使用的配置文件，用于节点加入集群时的认证和授权。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/kubernetes/pki</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">：存放集群的证书和密钥文件，用于内部通信的加密和身份验证。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/cni/net.d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">：此目录包含了容器网络接口（CNI）插件的配置文件，用于设置容器的网络连接和路由。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/containerd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">：这个目录包含了containerd的配置文件，containerd是Kubernetes默认的容器运行时。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/etc/docker/daemon.json</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">：如果使用Docker作为容器运行时，这个文件是Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Daemon的配置文件，可以包含Docker相关的配置参数。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">上述目录中的配置文件对于Kubernetes的正常运行和配置非常重要。在配置Kubernetes集群时，这些文件需要正确配置和管理，以确保集群的稳定性和功能的正常实现。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>k8s的权限管理是怎么样的,和cluster级别namespace级别是什么关系</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Kubernetes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (k8s) 的权限管理是通过访问控制模型来实现的，主要涉及以下两个层级的权限控制：</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 级别：在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> k8s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 中，集群级别的权限是指对整个集群资源的访问权限。这包括对节点、命名空间、存储卷等集群级别对象的管理权限。集群管理员负责分配和管理这些权限，并可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Role-Based</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Access</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Control</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (RBAC) 来定义集群级别的角色和角色绑定，以控制用户或服务账号对集群资源的访问权限。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 级别：命名空间是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> k8s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 中用于隔离不同工作负载和资源的逻辑分区。Namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 级别的权限是指对特定命名空间内资源的访问权限。每个命名空间都可以有自己的角色和角色绑定，并且可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> RBAC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 来定义和管理这些权限。命名空间管理员可以控制用户或服务账号的访问权限，并限制它们只能在特定命名空间内进行操作。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">总结来说，Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 级别的权限控制集中管理对整个集群资源的访问权限，而</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 级别的权限控制更加细粒度，可以根据特定命名空间的需求对资源的访问进行限制。实际上，Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 级别的权限是作为一个基础权限，而命名空间级别的权限则是在基础权限之上进行的补充和限制。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>如何查看k8s的资源cluster级别还是namespace级别</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">要查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 中资源的级别，可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 命令行工具，并结合资源的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 对象来查询。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 级别资源：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看集群中的所有节点：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get nodes`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看集群中的所有命名空间：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get namespaces`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看集群中的所有存储卷：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get pv`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看集群中的所有角色：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get roles </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">--all-namespaces</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看集群中的所有角色绑定：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get rolebindings </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">--all-namespaces</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 级别资源：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看指定命名空间中的所有资源：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get all </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">（例如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get pods </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> default`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看指定命名空间中的所有角色：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get roles </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看指定命名空间中的所有角色绑定：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get rolebindings </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">运行以上命令后，将根据资源的级别和命名空间的范围返回相应的结果。如果查询结果为空，则表示该级别或命名空间中没有对应的资源。****</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>k8s之中node  namespace是集群级别资源，pod是namespace级别资源是吗</p>\n</li>\n<li>\n<p>crd如何定义集群级别资源</p>\n</li>\n<li>\n<p>k8s之中cluster级别的资源是不是无法为其分配在某一个namespace下面</p>\n</li>\n<li>\n<p>ClusterRole、ClusterRoleBinding是什么，和k8s的权限有什么关系</p>\n</li>\n<li>\n<p>解释一下<code>kubectl get ClusterRole</code>的结果是什么</p>\n</li>\n<li>\n<p>ClusterRole指的是角色是吗，ClusterRoleBinding表示哪些对象拥有哪些角色是吗</p>\n</li>\n<li>\n<p>如何更改CluserRole更改角色权限</p>\n</li>\n<li>\n<p>ClusterRole指的是角色是吗，ClusterRoleBinding表示哪些对象拥有哪些角色是吗</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ClusterRole（集群角色）指的是一组权限，用于定义在整个集群中可以执行的操作.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ClusterRoleBinding（集群角色绑定）则用于将角色绑定给特定的用户、服务账号或组，并指定它们具有的权限.</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>k8s的kube-proxy是常驻的吗，是必须的吗</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kube-proxy是Kubernetes中的一个核心组件，它负责处理集群内部的网络通信。kube-proxy通过实现服务发现和负载均衡来将请求转发到集群中的正确Pod。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kube-proxy通常是作为一个常驻进程运行在每个节点上的。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">它通过监视Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> API服务器中的Service和Endpoints对象的变化情况，并相应地更新本地的iptables规则或IPVS规则来实现负载均衡。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">因此，kube-proxy运行的状态对于集群的正常运行是必要的。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">总结：kube-proxy是常驻的，并且是Kubernetes集群正常运行所必需的。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>kube-proxy是以pod的形式运行还是在宿主机上常驻进程的形式运行</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">简单来说kube-proxy是监听svc和endpoint的变更，维护相关ipvs或者iptables的规则</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kube-proxy可以以pod的形式运行，也可以在宿主机上作为常驻进程运行。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">在较早的Kubernetes版本中，kube-proxy是以常驻进程的形式运行在宿主机上的。它监视Kubernetes集群中的服务和端口，并将流量转发到正确的目标。这种方式需要在每个节点上单独启动和管理kube-proxy进程。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">从Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> v1.14版本开始，kube-proxy可以以pod的形式运行。这个pod通常与kubelet一起运行在每个节点上，作为DaemonSet的一部分。以pod的形式运行kube-proxy可以更好地与Kubernetes的整体架构和生命周期管理集成，而且可以由Kubernetes自动进行调度和管理。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>k8s的coredns如何安装使用，是必须的吗，如何可以将baidu.com指向某一个特定的ip</p>\n</li>\n<li>\n<p>ingress controller是干嘛的如何使用，跟Traefik什么关系 和<a href="https://kubernetes.github.io/ingress-nginx/deploy/" target="_blank" rel="noopener noreferrer">ingress-nginx</a>有什么关系</p>\n</li>\n<li>\n<p>k8s的selector只认pod的metadata.labels是吗</p>\n</li>\n<li>\n<p>k8s 的高可用如何实现的\nMaster 节点的高可用：包括 Kubernetes API Server、etcd 存储、Controller Manager 和 Scheduler.\nNode 节点的高可用：多个节点上运行相同的工作负载来实现冗余\n容器的高可用：副本集 (ReplicaSet) 和水平自动扩缩容 (Horizontal Pod Autoscaling) 来确保容器的高可用性</p>\n</li>\n<li>\n<p>k8s的集群的Master节点高可用是如何实现的</p>\n</li>\n<li>\n<p>k8s的有状态应用有哪些，有状态指的是哪些状态\nK8s（Kubernetes）的有状态应用指的是可以存储和维护数据状态的应用。与无状态应用不同，有状态应用需要保存一些持久化的数据，例如数据库中的数据、文件系统中的文件等。K8s中常见的有状态应用包括：\n1. 数据库：如MySQL、PostgreSQL、MongoDB等。\n2. 缓存系统：如Redis、Memcached等。\n3. 文件存储系统：如Ceph、GlusterFS等。\n4. 消息队列：如Kafka、RabbitMQ等。\n5. 日志系统：如ELK（Elasticsearch、Logstash、Kibana）等。\n6. 分布式文件系统：如HDFS（Hadoop Distributed File System）等。</p>\n<pre><code>这些有状态应用需要在容器中持久化存储数据，以便在容器重启或迁移时能够保留数据状态。K8s提供了一些机制来支持有状态应用的持久化存储需求，例如通过持久卷（Persistent Volume）和持久卷声明（Persistent Volume Claim）来实现数据的持久化存储和动态分配。\n</code></pre>\n</li>\n<li>\n<p>k8s的Controller Manager 和 Scheduler分别是干嘛的，底层逻辑是什么\nKubernetes (k8s)的Controller Manager和Scheduler是Kubernetes的两个核心组件，负责集群的自动化管理和任务调度。</p>\n<pre><code>- Controller Manager（控制器管理器）：Kubernetes的Controller Manager负责运行各种控制器来监控集群的状态，并确保集群中期望的状态与实际状态保持一致。控制器包括Replication Controller、Deployment Controller、StatefulSet Controller、DaemonSet Controller等。Controller Manager通过定期与API服务器进行通信来获取集群状态，并根据需要创建、更新或删除相应的资源对象。\n\n- Scheduler（调度器）：Kubernetes的Scheduler负责将新的Pod（容器组）分配到集群中的节点上。调度器基于一组配置策略以及集群资源的可用性信息，选择最合适的节点来运行新的Pod。调度器将Pod绑定到目标节点，并将任务分配给相关的工作节点上的Kubelet进行处理。Scheduler会考虑节点资源利用率、节点亲和性、Pod的资源需求等因素来进行调度决策。\n\n底层逻辑如下：\n- Controller Manager的底层逻辑通过监听API服务器上的事件，根据事件触发的规则，在集群中创建、更新或删除相应的资源对象，以确保集群状态保持一致。它还通过与API服务器进行定期通信来获取集群状态，并监控资源对象的健康状态。\n- Scheduler的底层逻辑基于一组预先定义的策略，通过与API服务器进行通信获取集群状态以及每个节点的资源信息。Scheduler会评估Pod的资源需求和节点的可用资源情况，根据策略选择最合适的节点，并将Pod绑定到目标节点上。\n\n总之，Controller Manager和Scheduler是Kubernetes核心组件，负责集群的自动化管理和任务调度，保证集群状态一致性和高效资源利用。\n</code></pre>\n</li>\n<li>\n<p>k8s node的状态no-ready的时候如何解决问题，如何快速刷新这个node状态</p>\n</li>\n<li>\n<p>k8s的节点异常出现NodeHasSufficientMemory怎么解决</p>\n</li>\n</ol>',r:{minutes:12.28,words:3684},t:"kubernetes基础问题",y:"a"}}],["/posts/kubernetes/kubernetes%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(2061).then(n.bind(n,2308)),meta:{d:1684867212e3,l:"2023年5月24日",c:["kubernetes"],g:["kubernetes"],u:1,e:"介绍审计日志相关配置项，示例如何开启并且如何将审计日志打到标准输出",r:{minutes:3.17,words:952},t:"kubernetes审计日志",y:"a"}}],["/posts/kubernetes/kubernetes%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8.html",{loader:()=>n.e(7603).then(n.bind(n,7849)),meta:{d:1682275212e3,l:"2023年4月24日",c:["kubernetes"],g:["kubernetes"],u:1,e:"介绍k8s操作系统底层资源分割逻辑",r:{minutes:9.33,words:2798},t:"kubernetes容器安全",y:"a"}}],["/posts/kubernetes/kubernetes%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html",{loader:()=>n.e(3832).then(n.bind(n,5385)),meta:{d:1682275212e3,l:"2023年4月24日",c:["kubernetes"],g:["kubernetes"],u:1,e:"架构图解",r:{minutes:.55,words:165},t:"kubernetes架构设计",y:"a"}}],["/posts/kubernetes/kubernetes%E7%9A%84ingress-nginx%E9%85%8D%E7%BD%AE%E4%BC%9A%E8%AF%9D%E7%B2%98%E6%80%A7.html",{loader:()=>n.e(1022).then(n.bind(n,7392)),meta:{c:["kubernetes"],g:["kubernetes"],e:"<blockquote>\n<p>安装ingress-nginx并且配置会话粘性指向服务，比如内部镜像服务registry在拉取镜像的时候需要保持粘性</p>\n</blockquote>\n<ol>\n<li>安装ingress-nginx</li>\n</ol>\n",r:{minutes:.2,words:59},t:"kubernetes的ingress-nginx配置会话粘性",y:"a"}}],["/posts/kubernetes/kubernetes%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2.html",{loader:()=>n.e(736).then(n.bind(n,1872)),meta:{d:1681843212e3,l:"2023年4月19日",c:["kubernetes"],g:["kubernetes"],u:1,e:"离线安装k8s",r:{minutes:.17,words:50},t:"如何离线安装kubernetes",y:"a"}}],["/posts/kubernetes/Kubernetes%E7%BB%84%E4%BB%B6.html",{loader:()=>n.e(2761).then(n.bind(n,5122)),meta:{c:["docker"],g:["docker"],e:"\n<h3>一、控制节点</h3>\n<ol>\n<li>API Server 集群操作入口</li>\n<li>Scheduler 集群资源调度</li>\n<li>ControllerManager 维护集群状态</li>\n<li>ETCD 存储资源对象</li>\n</ol>\n<h3>二、工作节点</h3>\n<ol>\n<li>Kubelet 维护容器生命周期</li>\n<li>KubeProxy 集群内部服务发现和负载均衡</li>\n<li>Docker 节点上容器操作</li>\n</ol>\n<h3>何谓高可用的k8s</h3>\n<h3>k8s的相关术语</h3>\n<ol>\n<li>Master</li>\n<li>Node</li>\n<li>Pod</li>\n<li>Controller</li>\n<li>Service</li>\n<li>Label</li>\n<li>NameSpace</li>\n</ol>",r:{minutes:.78,words:235},t:"Kubernetes组件",i:"object-group",O:2,y:"a"}}],["/posts/kubernetes/linux%E4%B8%8A%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.html",{loader:()=>n.e(5931).then(n.bind(n,6638)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>熟悉常用的指令比如ip\\route\\ping\\telnet\\netestat等</p>\n</blockquote>\n<h3>一、什么是静态路由</h3>\n<p>通过手动配置路由表的方式，在网络中设置<code>固定的路由路径</code>以实现数据包的转发和路由选择的方法；</p>\n<h3>二、使用route配置静态路由</h3>\n<ol>\n<li>将 169.254.0.0/16 网络的数据包转发到 10.16.200.0/21 子网中：</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将目标网络为169.254.0.0，子网掩码为255.255.0.0的数据包通过网关10.16.200.1进行路由转发</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 当本机需要访问169.254.0.0/16网络的时候，会直接通过10.16.200.1这个网关进行路由转发</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># -net 169.254.0.0：指定要添加路由的网络地址。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># netmask 255.255.0.0：指定网络掩码。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># gw 10.16.200.1：指定网关 IP 地址。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> route</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -net</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 169.254.0.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netmask</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 255.255.0.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> gw</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10.16.200.1</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.96,words:889},t:"如何配置静态路由",y:"a"}}],["/posts/kubernetes/Nginx-Ingress%E5%AE%89%E8%A3%85.html",{loader:()=>n.e(6751).then(n.bind(n,8216)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>1. nginx pod</h3>\n<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Pod</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx-pod</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> containers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx-container</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx:latest</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">---</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Service</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx-service</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">TCP</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">80</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   targetPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">80</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   nodePort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">30089</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">NodePort</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.59,words:177},t:"Nginx-Ingress安装",y:"a"}}],["/posts/kubernetes/pod%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(4652).then(n.bind(n,4321)),meta:{e:"如何查看集群级别日志，如何通过kubectl查看，并且kubelet更改存档配置，轮转配置是什么，存储路径是什么",r:{minutes:2.78,words:835},t:"集群级日志",y:"a"}}],["/posts/kubernetes/",{loader:()=>n.e(6607).then(n.bind(n,5988)),meta:{e:'\n<p><a href="https://jimmysong.io/kubernetes-handbook/" target="_blank" rel="noopener noreferrer">Kubernetes 中文指南/云原生应用架构实战手册</a></p>\n<p><a href="https://kubernetes.io/zh-cn/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/zh-cn/</a></p>\n<p><a href="https://cit965.com/docs/category/k8s%E6%BA%90%E7%A0%81%E5%A4%A7%E5%AD%A6%E4%BB%8E%E5%A4%B4%E5%AD%A6" target="_blank" rel="noopener noreferrer">k8s源码大学</a></p>',r:{minutes:.24,words:73},t:"官方手册",y:"a"}}],["/posts/kubernetes/S3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.html",{loader:()=>n.e(3012).then(n.bind(n,2128)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>1.安装s3软件</h3>\n<h3>2.安装s3的CSI插件</h3>\n<h3>3.配置PVC使用存储</h3>\n<p><a href="http://www.lishuai.fun/2021/12/31/k8s-pv-s3/#/%E8%A6%81%E6%B1%82" target="_blank" rel="noopener noreferrer">使用s3(minio)为kubernetes提供pv存储</a></p>\n<p><a href="https://github.com/ctrox/csi-s3" target="_blank" rel="noopener noreferrer">ctrox/csi-s3</a></p>',r:{minutes:.23,words:69},t:"S3对象存储",y:"a"}}],["/posts/kubernetes/systemctl.html",{loader:()=>n.e(5861).then(n.bind(n,8542)),meta:{e:"\n",r:{minutes:.01,words:3},t:"systemctl",y:"a"}}],["/posts/kubernetes/traefik%E9%85%8D%E7%BD%AEingress%E6%9C%8D%E5%8A%A1.html",{loader:()=>n.e(5233).then(n.bind(n,1791)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>在docker或者k8s集群内部安装traefik并且配置ingress访问内部服务</p>\n</blockquote>\n<h3>一、docker配置traefik访问Nginx服务</h3>\n<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'3\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  reverse-proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # The official v2 Traefik docker image</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">traefik:v2.10</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # Enables the web UI and tells Traefik to listen to docker</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">--api.insecure=true --providers.docker</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # The HTTP port</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"80:80"</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # The Web UI (enabled by --api.insecure=true)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"8080:8080"</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # So that Traefik can listen to the Docker events</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">/var/run/docker.sock:/var/run/docker.sock</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  nginx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">     - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"traefik.http.routers.nginx.rule=Host(`yourdomain.com`)"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">     - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"traefik.http.services.nginx.loadbalancer.server.port=80"</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">   restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">always</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.14,words:343},t:"配置traefik的ingress服务",y:"a"}}],["/posts/kubernetes/veth-pair%E5%92%8Chost%E7%BD%91%E6%A1%A5%E9%80%9A%E4%BF%A1.html",{loader:()=>n.e(7270).then(n.bind(n,3960)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>使用 host bridge 和 veth pair 实现两个网络命名空间下的网卡通信</p>\n</blockquote>\n<h3>1.网络命名空间创建</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> list</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.52,words:457},t:"veth-pair和host网桥通信",y:"a"}}],["/posts/kubernetes/veth-pair%E5%92%8Covs-bridge%E9%80%9A%E8%AE%AF.html",{loader:()=>n.e(2228).then(n.bind(n,3507)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>使用 openvswitch bridge 和 veth pair 实现两个网络命名空间下的网卡通信</p>\n</blockquote>\n<h3>创建 veth-pair 和 ovs-br</h3>\n<blockquote>\n<p>OVS 是第三方开源的 Bridge，功能比 Linux Bridge 要更强大，对于同样的实验，我们用 OVS 来看看是什么效果</p>\n</blockquote>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用 ovs 提供的命令创建一个 ovs bridge</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-vsctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add-br</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-br</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看 ovs bridge</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-vsctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> show</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建两对 veth-pair</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用于创建一个虚拟以太网接口ovs-veth-a，并生成一个与之相连的对等接口ovs-veth-b</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用于连接Open vSwitch网络交换机</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> veth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> peer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-b</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> veth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> peer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-d</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将 veth-pair 两端分别加入到 ns 和 ovs bridge 中</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-vsctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add-port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-br</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-b</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ifconfig</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-b</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-vsctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add-port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-br</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-d</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 给 ns 中的 veth 配置 IP 并启用</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.1.1.2/24</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.1.1.3/24</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-c</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ovs-veth-c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># veth0 ping veth1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ping</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10.1.1.3</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">PING</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10.1.1.3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (10.1.1.3) 56(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">84</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) bytes of data.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.1.1.3:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.586</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ms</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.1.1.3:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.066</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ms</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.55,words:465},t:"veth-pair和ovs-bridge通讯",y:"a"}}],["/posts/kubernetes/%E5%88%9B%E5%BB%BAinformer.html",{loader:()=>n.e(1936).then(n.bind(n,4179)),meta:{e:'<h3>lease infomer</h3>\n<div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package main</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import (</span></span>\n<span class="line"><span>\t"context"</span></span>\n<span class="line"><span>\tapiCoordinationV1 "k8s.io/api/coordination/v1"</span></span>\n<span class="line"><span>\tcoordinationV1 "k8s.io/client-go/informers/coordination/v1"</span></span>\n<span class="line"><span>\t"k8s.io/client-go/kubernetes"</span></span>\n<span class="line"><span>\t"k8s.io/client-go/tools/cache"</span></span>\n<span class="line"><span>\t"k8s.io/client-go/tools/clientcmd"</span></span>\n<span class="line"><span>\t"k8s.io/client-go/util/homedir"</span></span>\n<span class="line"><span>\t"log"</span></span>\n<span class="line"><span>\t"path/filepath"</span></span>\n<span class="line"><span>\t"time"</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func buildConfig() (*kubernetes.Clientset, error) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tvar kubeConfigFile string</span></span>\n<span class="line"><span>\tif home := homedir.HomeDir(); home != "" {</span></span>\n<span class="line"><span>\t\tkubeConfigFile = filepath.Join(home, ".kube", "config")</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\trestConfig, err := clientcmd.BuildConfigFromFlags("", kubeConfigFile)</span></span>\n<span class="line"><span>\tif err != nil {</span></span>\n<span class="line"><span>\t\treturn nil, err</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tclientSet, err := kubernetes.NewForConfig(restConfig)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\treturn clientSet, nil</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func main() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tclient, err := buildConfig()</span></span>\n<span class="line"><span>\tif err != nil {</span></span>\n<span class="line"><span>\t\tlog.Fatal(err)</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tindexer := cache.Indexers{"name": func(obj interface{}) ([]string, error) {</span></span>\n<span class="line"><span>\t\tlease, ok := obj.(*apiCoordinationV1.Lease)</span></span>\n<span class="line"><span>\t\tif !ok {</span></span>\n<span class="line"><span>\t\t\treturn nil, nil</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t\treturn []string{lease.Name}, nil</span></span>\n<span class="line"><span>\t}}</span></span>\n<span class="line"><span>\tinformer := coordinationV1.NewLeaseInformer(client, "kube-system", 0, indexer)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tgo informer.Run(context.Background().Done())</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\ttime.Sleep(time.Second * 5)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tlist := informer.GetStore().List()</span></span>\n<span class="line"><span>\tlog.Println(len(list))</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tleaseObj, err := informer.GetIndexer().ByIndex("name", "my-lease")</span></span>\n<span class="line"><span>\tif err != nil {</span></span>\n<span class="line"><span>\t\tlog.Fatal(err)</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tz := *leaseObj[0].(*apiCoordinationV1.Lease)</span></span>\n<span class="line"><span>\tlog.Println(z.Spec.HolderIdentity)</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.83,words:550},t:"",y:"a"}}],["/posts/kubernetes/%E5%88%9B%E5%BB%BAservice%E6%8C%87%E5%90%91%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1.html",{loader:()=>n.e(1203).then(n.bind(n,8120)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>声明一个elasticsearch-1的服务，它映射到一个外部的地址192.168.11.13的9200端口</h3>\n<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Service</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">elasticsearch-1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">ClusterIP</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">80</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #cluster端口，集群内部访问</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    targetPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9200</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #pod端口</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">---</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Endpoints</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">v1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">elasticsearch-1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">subsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">addresses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">192.168.11.13</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9200</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.49,words:147},t:"创建service和endpoints指向外部服务",i:"object-group",O:2,y:"a"}}],["/posts/kubernetes/%E5%88%9D%E8%AF%86CRD.html",{loader:()=>n.e(3653).then(n.bind(n,6052)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<h3>1.创建自定义资源</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> resourcedefinition.yaml</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:3.49,words:1048},t:"初识CRD",i:"object-group",O:2,y:"a"}}],["/posts/kubernetes/%E5%88%B6%E4%BD%9Chelm%E5%8C%85%E5%92%8C%E8%87%AA%E5%BB%BAChart%E4%BB%93%E5%BA%93.html",{loader:()=>n.e(8472).then(n.bind(n,7928)),meta:{c:["kubernetes"],g:["helm"],e:"<h3>一、Helm相关概念</h3>\n<p>Helm是一个kubernetes的包管理工具，软件包管理器 (类似ubuntu.apt centos.yum python.pip)，主要解决Kubernetes原生资源文件如deployment、replicationcontroller、service或pod等资源过于分散不好管理的问题。</p>\n<ul>\n<li>helm 命令行管理工具，kubernetes应用chart（创建、打包、发布和管理）</li>\n<li>chart 应用描述（kubernetes资源相关文件的集合），相当于是k8s的Yum RPM</li>\n<li>release 基于chart的部署实体，chart被Helm运行后生成一个release,比如MySQL chart可以有很多个实例（每一次安装有它自己的 release &amp;&amp; release name）</li>\n<li>Repository 存放和共享 charts 的地方</li>\n</ul>",r:{minutes:3.11,words:933},t:"制作helm包和自建Chart仓库",y:"a"}}],["/posts/kubernetes/%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91kata.html",{loader:()=>n.e(526).then(n.bind(n,8919)),meta:{g:["golang","cicd"],e:'<h3>一、编写Dockerfile</h3>\n<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> centos:centos7</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> GOROOT=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/usr/local/go"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GOPROXY=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https://goproxy.cn,direct"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GOINSECURE=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"gitlab.my-company.net"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GOPRIVATE=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"*.corp.com,gitlab.my-company.net"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GONOPROXY=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"gitlab.my-company.net"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    GONOSUMDB=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"gitlab.my-company.net"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    PATH=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"$PATH:/usr/local/go/bin"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    TZ=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Asia/Shanghai"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># repo</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> curl https://sh.rustup.rs -sSf | sh -s -- -y &amp;&amp; export PATH=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"$HOME/.cargo/bin:$PATH"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  yum-config-manager --add-repo  https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  yum -y install wget &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  cd /home &amp;&amp; wget https://go.dev/dl/go1.19.8.linux-arm64.tar.gz &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  tar -C /usr/local -xzf go1.19.8.linux-arm64.tar.gz &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  export PATH=$PATH:/usr/local/go/bin &amp;&amp; source /etc/profile &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  echo </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'export PATH=$PATH:/usr/local/go/bin\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | tee -a /etc/profile &gt; /etc/profile &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  source /etc/profile &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  yum install -y automake autoconf libtool make gcc gcc-c++ rsync git &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  cp /usr/share/zoneinfo/${TZ} /etc/localtime &amp;&amp; echo ${TZ} &gt; /etc/timezone &amp;&amp; \\</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.06,words:317},t:"制作镜像编译kata",y:"a"}}],["/posts/kubernetes/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85kubernetes.html",{loader:()=>n.e(6028).then(n.bind(n,366)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>使用kubeadm搭建kubenertes环境</p>\n</blockquote>\n<h3>一、环境准备</h3>\n<p>CentOS 7.6 64bit 2核 2G * 2 ( 操作系统的版本至少在7.5以上 )</p>\n<p><a href="https://v1-26.docs.kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener noreferrer">1.环境准备之 kubernetes v1.26 CRI</a>\n<a href="https://v1-26.docs.kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/" target="_blank" rel="noopener noreferrer">2.使用部署工具kubeadm安装 kubernetes v1.26</a></p>',r:{minutes:19.49,words:5848},t:"如何安装kubernetes",i:"object-group",O:2,y:"a"}}],["/posts/kubernetes/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0node%E8%8A%82%E7%82%B9.html",{loader:()=>n.e(7596).then(n.bind(n,24)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>如何使用kubeadm在master节点，然后在裸机centos安装节点环境(containerd\\runc\\cni)，使用kubeadm加入节点，并且配置kubectl环境</p>\n</blockquote>\n<h3>1.master节点生成token</h3>\n<p><a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-token/" target="_blank" rel="noopener noreferrer">setup-tools/kubeadm/kubeadm-token/</a>\n<a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-join/" target="_blank" rel="noopener noreferrer">setup-tools/kubeadm/kubeadm-join/</a></p>',r:{minutes:.65,words:195},t:"如何添加node节点",y:"a"}}],["/posts/kubernetes/%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8.html",{loader:()=>n.e(9939).then(n.bind(n,4702)),meta:{c:["kubernetes"],g:["kubernetes"],e:"<h3>一、什么是安全容器</h3>\n<h4>1.概念</h4>\n<p>安全容器是一种为应用程序提供高度隔离和安全性的技术，它可以控制应用程序访问系统资源和数据的权限，并提供虚拟化，使应用程序能够在隔离的环境中运行。安全容器的概念最早是由 FreeBSD 操作系统的开发者 Jails 提出的，他们在 2000 年左右将这一概念引入 FreeBSD 操作系统。后来，Linux 容器技术发展起来后，安全容器概念也逐渐被引入其中。</p>\n<h4>2.kubenertes</h4>\n<p>目前k8s或者docker底层容器，通常是依赖于runc，而runc的资源隔离方案底层是 Linux 容器技术。它利用 Linux 内核提供的一些隔离机制，如 namespace、cgroup、seccomp等。具体来说，namespace 用于隔离应用程序的进程空间、网络、文件系统等，cgroup 用于限制应用程序的资源使用，seccomp 用于限制应用程序对系统调用的访问。runc 利用这些机制，将应用程序运行在一个隔离的环境中，从而提高应用程序的安全性和可靠性。但在实际运行中，仍是由宿主机向容器直接提供网络、存储、计算等资源，然而容器的安全性可以概括为两点： a.不会对主机造成影响。b.不会对其他容器造成影响。Docker的不安全表现在共用内核问题、Namespace还不够完善。具体表现：</p>",r:{minutes:12.31,words:3693},t:"安全容器",i:"object-group",O:2,y:"a"}}],["/posts/kubernetes/%E7%94%A8CNI%E7%BB%99docker%E5%AE%B9%E5%99%A8%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C.html",{loader:()=>n.e(8769).then(n.bind(n,8288)),meta:{c:["kubernetes"],g:["kubernetes"],e:'<blockquote>\n<p>使用docker创建无网络的容器，然后使用CNI插件手动分配网卡和网桥等</p>\n</blockquote>\n<h3>1.安装docker和cni plugins</h3>\n<ul>\n<li>docker</li>\n<li>cni plugins</li>\n</ul>\n<p><a href="https://github.com/containernetworking/cni/blob/main/README.md" target="_blank" rel="noopener noreferrer">本文参考手册CNI README.md</a></p>\n<h3>2.脚本创建网络命名空间并分配网络quickStart</h3>',r:{minutes:4.23,words:1268},t:"用CNI给docker容器分配网络",y:"a"}}],["/posts/kubernetes/%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4.html",{loader:()=>n.e(1365).then(n.bind(n,7144)),meta:{c:["docker"],g:["docker"],e:'<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># ip link add &lt;interface_name&gt; type &lt;interface_type&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> eth0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> vlan</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.3,words:91},t:"网络常用命令",y:"a"}}],["/posts/kubernetes/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7telepresence.html",{loader:()=>n.e(2214).then(n.bind(n,2934)),meta:{c:["kubernetes"],g:["telepresence"],e:'<h3>1.常用命令</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>telepresence version</span></span>\n<span class="line"><span>telepresence connect</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.71,words:212},t:"调试工具telepresence",y:"a"}}],["/posts/linux/cpu%E6%9E%B6%E6%9E%84.html",{loader:()=>n.e(9503).then(n.bind(n,2267)),meta:{c:["linux"],g:["Linux"],e:'<h3>CPU两大派系</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. X86、AMD64、X86-64</span></span>\n<span class="line"><span>2. ARM、ARM-V8、AArch64</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.67,words:200},t:"CPU架构",i:"object-group",O:2,y:"a"}}],["/posts/linux/float%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6.html",{loader:()=>n.e(3902).then(n.bind(n,4887)),meta:{c:["linux"],g:["Linux"],e:'<p><a href="https://zhuanlan.zhihu.com/p/375156201" target="_blank" rel="noopener noreferrer">float浮点数精度丢失问题分析</a></p>\n<blockquote>\n<p>整型是用的二进制存储数据，保留一个符号位(unsigned就没有)</p>\n</blockquote>\n<blockquote>\n<p>浮点数则用的是科学计数法存储数据</p>\n</blockquote>\n<h3>float同样也使用4字节存储，但除了整数外还能够存储小数位，并且表示的范围比int还要更大，怎么做到的？</h3>',r:{minutes:.54,words:163},t:"float浮点精度",i:"object-group",O:2,y:"a"}}],["/posts/linux/linux%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E5%AF%86%E9%92%A5.html",{loader:()=>n.e(6200).then(n.bind(n,7901)),meta:{e:'\n<h3>一、本地机器（创建公钥私钥）</h3>\n<ol>\n<li>进入密钥存储路径</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo mkdir -p ~/.ssh</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>cd ~/.ssh</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 输入执行后指定文件名为 my_linux 然后一路回车</span></span>\n<span class="line"><span>ssh-keygen -t rsa</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.11,words:333},t:"Linux服务器SSH密钥",y:"a"}}],["/posts/linux/Linux%E7%BB%93%E6%9E%84%E7%BB%84%E6%88%90.html",{loader:()=>n.e(9958).then(n.bind(n,8926)),meta:{e:'\n<blockquote>\n<p>Linux的文件系统目录结构理解，从内核到应用程序大致组成</p>\n</blockquote>\n<h3>一、操作系统结构图</h3>\n<ol>\n<li>Linux系统一般有四个主要部分：内核、shell、文件系统、应用程序。</li>\n</ol>\n<blockquote>\n<p>shell是系统的用户界面，提供了用户与内核进行交互操作的接口，它接收用户输入的命令并将它送到内核去执行。</p>\n</blockquote>\n<figure><img src="/images/linux系统结构.jpeg" alt="系统结构" tabindex="0" loading="lazy"><figcaption>系统结构</figcaption></figure>',r:{minutes:1.46,words:437},t:"结构组成",y:"a"}}],["/posts/linux/lsof%E5%91%BD%E4%BB%A4.html",{loader:()=>n.e(7882).then(n.bind(n,7332)),meta:{e:'\n<blockquote>\n<p>lsof 查看进程打开了多少个文件或者网络套接字</p>\n</blockquote>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> aux</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> openvswitch</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查询进程ID为65191的进程打开的文件或网络套接字的命令</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lsof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 65191</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看进程打开了多少个文件或者网络套接字</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lsof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 21764</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">COMMAND(进程名称</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) PID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">进程号</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) USER(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">进程拥有者</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)   FD(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件描述符</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)    TYPE(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件类型</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) DEVICE(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">设备或者文件系统的信息</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) SIZE/OFF(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件的大小</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)  NODE(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件的节点编号</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) NAME(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">文件的路径和名称</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              cwd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">当前工作目录</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">     4096</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              rtd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">根目录</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)       </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">     4096</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              txt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 16136816</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   1820044</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/sbin/ovs-vswitchd</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  1531880</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2546</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/libc-2.28.so</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   724008</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2550</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/libm-2.28.so</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    68152</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2562</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/librt-2.28.so</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   136544</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2558</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/libpthread-2.28.so</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    67640</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    332375</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/libatomic.so.1.2.0</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ovs-vswit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       21764</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              mem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">              253,3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   204088</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      2539</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /usr/lib64/ld-2.28.so</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.38,words:713},t:"lsof",y:"a"}}],["/posts/linux/rpm.html",{loader:()=>n.e(9642).then(n.bind(n,20)),meta:{e:'\n<ol>\n<li>如何安装rpm包</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 其中，-i 表示安装（install），-v 表示显示详细信息，-h 表示显示进度条。包名可以是绝对路径或相对路径，可以自动补全</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -ivh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 包名.rpm</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 卸载</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 包名</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.38,words:115},t:"RPM",y:"a"}}],["/posts/linux/uname.html",{loader:()=>n.e(9119).then(n.bind(n,4678)),meta:{e:'\n<h3>一、实例</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-33D71DFC home]# uname -a</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Linux</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> k8s-master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 4.19.90-23.4.v2101.ky10.aarch64</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #1 SMP Wed Mar 3 15:41:26 CST 2021 aarch64 aarch64 aarch64 GNU/Linux</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">操作系统内核版本号:4.19.90-23.4.v2101.ky10.aarch64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">处理器架构:aarch64</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.54,words:163},t:"uname",y:"a"}}],["/posts/linux/%E4%BA%8C%E8%BF%9B%E5%88%B6.html",{loader:()=>n.e(3746).then(n.bind(n,8906)),meta:{c:["linux"],g:["Linux"],e:'\n<h3>整数A和B如何通过移位运算判定大小</h3>\n<div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 通过符号位</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func compare(a, b int) string {</span></span>\n<span class="line"><span>\tc := a - b</span></span>\n<span class="line"><span>\tz := (unsafe.Sizeof(c)-1)*8 + 7</span></span>\n<span class="line"><span>\td := c &gt;&gt; z</span></span>\n<span class="line"><span>\tl := []string{"b大", "a大"}</span></span>\n<span class="line"><span>\treturn l[d+1]</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.91,words:573},t:"二进制",i:"object-group",O:2,y:"a"}}],["/posts/linux/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html",{loader:()=>n.e(9143).then(n.bind(n,1889)),meta:{c:["linux"],g:["Linux"],e:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>编译器的“管辖范围”</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.09,words:26},t:"内存对齐",i:"object-group",O:2,y:"a"}}],["/posts/linux/%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87.html",{loader:()=>n.e(7073).then(n.bind(n,8716)),meta:{c:["linux"],g:["Linux"],e:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>储存分配过程</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>产生</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>不能供 用户 使用的 内存小分区</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.13,words:40},t:"内存碎片",i:"object-group",O:2,y:"a"}}],["/posts/linux/%E5%8F%91%E8%A1%8C%E7%89%88%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html",{loader:()=>n.e(4180).then(n.bind(n,9074)),meta:{e:'\n<blockquote>\n<p>Linux的各个发行版本和各种包管理工具有什么区别和联系</p>\n</blockquote>\n<h3>一、发行版本关系图</h3>\n<figure><img src="/images/linux发行版.png" alt="linux发行版" tabindex="0" loading="lazy"><figcaption>linux发行版</figcaption></figure>\n<h3>二、 包管理工具</h3>\n<ol>\n<li>dpkg (Ubuntu、Debian)</li>\n<li>apt (Ubuntu、Debian)</li>\n<li>rpm (RHEL、CentOS)</li>\n<li>yum (CentOS6、CentOS7)</li>\n<li>dnf (RHEL8、CentOS8)</li>\n<li>apt-get,apt的旧版本</li>\n</ol>',r:{minutes:.41,words:123},t:"发行版和包管理工具",y:"a"}}],["/posts/linux/%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB.html",{loader:()=>n.e(6934).then(n.bind(n,3940)),meta:{e:'<p><a href="https://cloud.tencent.com/developer/article/1688327" target="_blank" rel="noopener noreferrer">堆和栈的区别</a></p>\n<h3>关键词</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>栈区(stack)</span></span>\n<span class="line"><span>堆区(heap)</span></span>\n<span class="line"><span>全局区(静态区)(static)</span></span>\n<span class="line"><span>文字常量区</span></span>\n<span class="line"><span>程序代码区</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.43,words:130},t:"堆和栈的区别",y:"a"}}],["/posts/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",{loader:()=>n.e(5822).then(n.bind(n,5821)),meta:{c:["linux"],g:["Linux"],e:'\n<h3>1.端口的TCP连接</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 可以看到端口的访问情况</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netstat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -an</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \':19201\'</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> :::19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                :::</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">*</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                    LISTEN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">     </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.201.62.65:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      10.201.62.63:42062</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      TIME_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.201.62.65:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      10.201.62.63:42036</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      TIME_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51340</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51344</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51350</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 10.201.62.65:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      10.201.62.63:42082</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      TIME_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51342</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51346</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51348</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tcp6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">       1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">      0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:51356</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         127.0.0.1:19201</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">         CLOSE_WAIT</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.65,words:494},t:"常用命令",i:"object-group",O:2,y:"a"}}],["/posts/linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html",{loader:()=>n.e(815).then(n.bind(n,9133)),meta:{c:["linux"],g:["Linux"],e:'\n<h3>mac 设置环境变量</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>export KUBE_GIT_VERSION=1.1.1</span></span>\n<span class="line"><span>export KUBE_GIT_VERSION=$KUBE_GIT_VERSION:1.1.1</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 查看当前环境变量</span></span>\n<span class="line"><span>echo $KUBE_GIT_VERSION</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 查看所有环境变量</span></span>\n<span class="line"><span>env</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.99,words:296},t:"环境变量",i:"object-group",O:2,y:"a"}}],["/posts/linux/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA.html",{loader:()=>n.e(8594).then(n.bind(n,1973)),meta:{c:["linux"],g:["Linux"],e:'\n<blockquote>\n<p>简单学习磁盘分区是什么，如何使用，常用的命令有哪些</p>\n</blockquote>\n<h5>1. lsblk (List Block Devices) 命令解释：</h5>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. NAME：块设备名称。</span></span>\n<span class="line"><span>2. SIZE：块设备的容量大小。</span></span>\n<span class="line"><span>3. TYPE：块设备类型，如磁盘（disk）或分区（part）。</span></span>\n<span class="line"><span>4. MOUNTPOINT：设备被挂载的挂载点。</span></span>\n<span class="line"><span>5. MODEL：硬件设备的制造商及型号。</span></span>\n<span class="line"><span>6. FSTYPE：文件系统类型，比如ext4或NTFS。</span></span>\n<span class="line"><span>7. UUID：块设备的唯一标识符。</span></span>\n<span class="line"><span>8. LABEL：块设备的卷标或文件系统标签。</span></span>\n<span class="line"><span>9. RO：块设备是否为只读。</span></span>\n<span class="line"><span>10. RM：块设备是否可以通过软件进行移除。</span></span>\n<span class="line"><span>11. PARTTYPE：如果块设备是分区，则该字段会显示分区类型。</span></span>\n<span class="line"><span>12. PARTLABEL：如果块设备是分区，则该字段会显示分区卷标或文件系统标签。</span></span>\n<span class="line"><span>13. PARTUUID：如果块设备是分区，则该字段会显示分区的唯一标识符。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>这些指标可以帮助用户了解系统上的块设备，包括设备名称、容量、挂载点、文件系统类型等，从而更好地管理和使用系统。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>[root@k8s-master network-scripts]# lsblk</span></span>\n<span class="line"><span>NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span></span>\n<span class="line"><span>sr0     11:0    1 203.6M  0 rom  </span></span>\n<span class="line"><span>vda    253:0    0    60G  0 disk </span></span>\n<span class="line"><span>└─vda1 253:1    0    60G  0 part /</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:9.21,words:2763},t:"磁盘分区",i:"object-group",O:2,y:"a"}}],["/posts/linux/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9.html",{loader:()=>n.e(7476).then(n.bind(n,3705)),meta:{d:1684435212e3,l:"2023年5月19日",c:["linux"],g:["linux"],e:"磁盘内存空间不足，但是磁盘的大小是足够的，需要重新分区并且挂载",r:{minutes:4.16,words:1247},t:"磁盘扩容",y:"a"}}],["/posts/linux/%E7%BD%91%E5%8D%A1.html",{loader:()=>n.e(9397).then(n.bind(n,5708)),meta:{e:'\n<h3>一、实例</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># ifconfig只能查看本机的网络配置和IP地址</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-33D71DFC ~]# ifconfig</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 网卡名称或者叫网络接口名称: enp1s0</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 后面的&lt;&gt;必须要有UP才表示启用状态 如果没有启用可以使用 ip link set xxx up</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">enp1s0:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> flags=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4163</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">UP,BROADCAST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 支持广播,RUNNING</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ,MULTICAST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 支持多播</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &gt;  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">mtu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1500</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 最大传输单元为1500字节（网络接口能够传输的最大数据大小）</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # IP 地址           # 子网掩码              # 当前网络接口的广播地址</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        inet</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10.16.123.39</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  netmask</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 255.255.248.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  broadcast</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10.16.207.255</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # ipv6地址</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        inet6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> fe80::ca83:3404:d922:1960</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  prefixlen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  scopeid</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0x20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">lin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">k&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # ether查看 MAC 地址</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        ether</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> d0:0d:33:d7:1d:fc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  txqueuelen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  (Ethernet)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 接受和发送的数据包数量和字节数</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        RX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> packets</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 34122</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  bytes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 612851235</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (584.4 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">MiB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        RX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> errors</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  dropped</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  overruns</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  frame</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        TX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> packets</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 31682</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  bytes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5632014</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (5.3 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">MiB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        TX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> errors</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  dropped</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> overruns</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  carrier</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  collisions</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">lo:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> flags=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">73</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">UP,LOOPBACK,RUNNIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">G&gt;  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">mtu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 65536</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        inet</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 127.0.0.1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  netmask</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 255.0.0.0</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        inet6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ::1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  prefixlen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  scopeid</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0x10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">hos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">t&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        loop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  txqueuelen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  (Local </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Loopback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        RX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> packets</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 311</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  bytes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 27368</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (26.7 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">KiB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        RX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> errors</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  dropped</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  overruns</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  frame</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        TX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> packets</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 311</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  bytes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 27368</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (26.7 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">KiB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        TX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> errors</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  dropped</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> overruns</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  carrier</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  collisions</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">virbr0:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> flags=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4099</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">UP,BROADCAST,MULTICAS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">T&gt;  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">mtu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1500</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        inet</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 192.168.122.1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  netmask</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 255.255.255.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  broadcast</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 192.168.122.255</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        ether</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 52:54:00:0a:e9:3a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  txqueuelen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  (Ethernet)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        RX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> packets</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  bytes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (0.0 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        RX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> errors</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  dropped</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  overruns</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  frame</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        TX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> packets</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  bytes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (0.0 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        TX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> errors</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  dropped</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> overruns</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  carrier</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  collisions</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.93,words:879},t:"网卡",y:"a"}}],["/posts/linux/%E7%BD%91%E7%BB%9C.html",{loader:()=>n.e(1090).then(n.bind(n,2156)),meta:{d:1684435212e3,l:"2023年5月19日",c:["linux"],g:["linux"],e:"网络相关的一些知识",r:{minutes:4.26,words:1279},t:"linux与网络",y:"a"}}],["/posts/loki/docker%E5%AE%89%E8%A3%85loki%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(594).then(n.bind(n,146)),meta:{d:1686595212e3,l:"2023年6月13日",c:["docker"],g:["loki","promtail"],u:1,e:"使用docker compose搭建loki和promtail服务，支持自定义采集目标，并且通过 loki http API查看日志数据",r:{minutes:1.37,words:410},t:"docker搭建loki && promtail服务",y:"a"}}],["/posts/loki/loki.html",{loader:()=>n.e(1942).then(n.bind(n,162)),meta:{d:1684435212e3,l:"2023年5月19日",c:["linux"],g:["linux"],e:"使用loki存储日志数据",r:{minutes:.39,words:117},t:"loki",y:"a"}}],["/posts/loki/%E5%9C%A8k8s%E5%88%9B%E5%BB%BAloki%E6%9C%8D%E5%8A%A1%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(2539).then(n.bind(n,4336)),meta:{d:1685785212e3,l:"2023年6月3日",c:["kubernetes"],g:["loki","promtail"],u:1,e:"如何使用loki helm包搭建日志服务，并且自定义采集目标，搭建的架构是 loki && promtail",r:{minutes:2.83,words:848},t:"在k8s之中部署loki服务存储日志",y:"a"}}],["/posts/loki/%E5%9F%BA%E4%BA%8Eloki%E6%90%AD%E5%BB%BAk8s%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(2310).then(n.bind(n,4404)),meta:{d:1686562812e3,l:"2023年6月12日",c:["kubernetes"],g:["loki","promtail","audit"],u:1,e:"如何开启k8s的审计日志以及如何配置审计日志记录策略、解读k8s的apiserver关于审计日志的源码逻辑，了解loki如何采集日志并且http API接口查看日志",r:{minutes:3.71,words:1114},t:"k8s之中使用loki存档审计日志",y:"a"}}],["/posts/makefile/awk%E4%BD%BF%E7%94%A8.html",{loader:()=>n.e(8949).then(n.bind(n,9050)),meta:{e:'\n<p><a href="https://zhuanlan.zhihu.com/p/419494231" target="_blank" rel="noopener noreferrer">linux三剑客之三（awk）(最强大）</a></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>案例1：把/Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk -F: \'/test/\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>案例2：把/Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk -F: \'/^test/\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>案例3：/Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt ??</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk -F: \'{print $1,$2}\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>案例1：输出/Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk -F: \'{print NR,$0}\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>案例2：要求把第7行之后的内容输出出来，包括行号</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk -F: \'NR &gt; 7{print NR,$0}\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>案例3：要求输出第3行之后的内容且第5行之前的内容输出出来，包含行号</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk -F: \'NR &gt; 3 &amp;&amp; NR &lt; 5{print NR,$0}\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>案例5：要求输出倒数第3列 ???</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk -F: \'{print $(NF-2)}\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>案例6：要求不使用-F参数，以：分割，并输出第1列和第3列</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk \'BEGIN{FS=":"}{print $1,$3}\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>案例7: 输出第123列</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>awk \'{print $1,$2,$3}\' /Users/xuweiqiang/Documents/code/book/makefile/awk_file.txt</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.42,words:427},t:"linux awk",y:"a"}}],["/posts/makefile/docker.html",{loader:()=>n.e(6131).then(n.bind(n,5326)),meta:{e:'<h3>基本使用</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -itdp</span></span>\n<span class="line"><span>docker pull</span></span>\n<span class="line"><span>docker ps -a</span></span>\n<span class="line"><span>docker start</span></span>\n<span class="line"><span>docker stop</span></span>\n<span class="line"><span>docker restart</span></span>\n<span class="line"><span>docker exec</span></span>\n<span class="line"><span>docker export</span></span>\n<span class="line"><span>docker import</span></span>\n<span class="line"><span>docker rm</span></span>\n<span class="line"><span>docker logs -f</span></span>\n<span class="line"><span>docker images</span></span>\n<span class="line"><span>docker rmi</span></span>\n<span class="line"><span>docker build</span></span>\n<span class="line"><span>docker tag</span></span>\n<span class="line"><span>docker port</span></span>\n<span class="line"><span>docker network</span></span>\n<span class="line"><span>docker login</span></span>\n<span class="line"><span>docker logout</span></span>\n<span class="line"><span>docker search</span></span>\n<span class="line"><span>docker pull</span></span>\n<span class="line"><span>docker push</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.3,words:89},t:"",y:"a"}}],["/posts/makefile/",{loader:()=>n.e(4763).then(n.bind(n,9530)),meta:{e:'\n<p><a href="https://seisman.github.io/how-to-write-makefile/overview.html" target="_blank" rel="noopener noreferrer">github.io/how-to-write-makefile</a></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$(notdir 文件列表)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>notdir用于去掉文件的绝对路径，只保留文件名</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.12,words:35},t:"makefile",y:"a"}}],["/posts/makefile/%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD.html",{loader:()=>n.e(1282).then(n.bind(n,671)),meta:{e:"\n<ol>\n<li>@ 命令隐藏不显示</li>\n<li>PHONY 伪目标\\命令组合\\别名</li>\n<li>$ makefile的变量定义</li>\n<li>; 多行命令依赖</li>\n</ol>\n",r:{minutes:.13,words:40},t:"专业术语",y:"a"}}],["/posts/makefile/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",{loader:()=>n.e(9986).then(n.bind(n,6066)),meta:{e:'\n<ol>\n<li>文件结构</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>touch Makefile</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:1.46,words:437},t:"基本使用",y:"a"}}],["/posts/mongodb/mongo_single.html",{loader:()=>n.e(1842).then(n.bind(n,3810)),meta:{e:"\n",r:{minutes:.01,words:4},t:"mongo single",y:"a"}}],["/posts/mongodb/Mongo%E9%9B%86%E7%BE%A4.html",{loader:()=>n.e(981).then(n.bind(n,1407)),meta:{e:"\n<h1>mongo集群模式</h1>\n<p>MongoDB 有三种集群部署模式，分别为主从复制（Master-Slaver）、副本集（Replica Set）和分片（Sharding）模式。</p>\n<p>Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。</p>\n<p>Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。</p>\n<p>Sharding模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。</p>",r:{minutes:3.62,words:1086},t:"mongodb集群",y:"a"}}],["/posts/mysql/MVCC%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html",{loader:()=>n.e(9188).then(n.bind(n,9323)),meta:{e:'\n<h3>InnoDB的RC和RR的快照读有什么不同</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Read View的生成时机不同导致的</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>RC 每次快照读都会新生成一个快照和Read View</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>RR 事务开始后在第一次快照读创建Read View后面所有的快照读都是同一个</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.46,words:138},t:"MVCC实现机制",y:"a"}}],["/posts/mysql/MySQL%E5%88%86%E5%B1%82.html",{loader:()=>n.e(6746).then(n.bind(n,1768)),meta:{e:'\n<p><a href="https://www.cnblogs.com/mululu/p/14457394.html" target="_blank" rel="noopener noreferrer">西瓜汁拌面-mysql分层、存储引擎、解析原理</a></p>\n<h3>分层四层</h3>\n<ol>\n<li>连接（服务器与客户端建立连接）</li>\n<li>服务（提供select\\insert等接口、提供SQL优化器）</li>\n<li>引擎</li>\n<li>存储</li>\n</ol>\n<p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',r:{minutes:.22,words:66},t:"MySQL分层",y:"a"}}],["/posts/mysql/MySQL%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(8812).then(n.bind(n,7113)),meta:{e:"\n<h2>一、建表</h2>\n<h3>强制</h3>\n<ol>\n<li>是与否字段</li>\n<li>表名、字段名</li>\n<li>表名不使用复数</li>\n<li>禁用保留字</li>\n<li>索引名</li>\n<li>小数类型</li>\n<li>字符串类型。</li>\n<li>varchar length &lt; 5000</li>\n<li>表必备三字段 (要记录时区信息，那么类型设置为 timestamp)</li>\n<li>物理\\逻辑删除</li>\n</ol>\n<h2>二、索引</h2>\n<h3>强制</h3>\n<ol>\n<li>唯一特性字段</li>\n<li>三表join &amp;&amp; 字段类型</li>\n<li>varchar索引长度</li>\n<li>左/全模糊匹配</li>\n</ol>",r:{minutes:.72,words:216},t:"MySQL规范",y:"a"}}],["/posts/mysql/MySQL%E9%9B%86%E7%BE%A4.html",{loader:()=>n.e(4171).then(n.bind(n,2885)),meta:{e:'\n<ol>\n<li>\n<p>一主多从，主库更新和写入，从库只负责读。 <a href="https://blog.51cto.com/u_15127571/2715035" target="_blank" rel="noopener noreferrer">博客</a></p>\n</li>\n<li>\n<p>官方推荐 Docker Compose 一键搭建一主多从 <a href="https://registry.hub.docker.com/r/bitnami/mysql" target="_blank" rel="noopener noreferrer">bitnami/mysql</a></p>\n</li>\n<li>\n<p>kubernetes集群搭建MySQL集群</p>\n</li>\n</ol>',r:{minutes:.57,words:170},t:"MySQL集群方案",y:"a"}}],["/posts/mysql/SQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3.html",{loader:()=>n.e(53).then(n.bind(n,7145)),meta:{e:'\n<ol>\n<li>MySQL驱动 [GO]</li>\n<li>数据库连接池 [MySQL自身架构体系的连接池]</li>\n<li>SQL接口</li>\n<li>查询解析器 [SQL 已经被解析成 MySQL 认识的样子]</li>\n<li>MySQL查询优化器</li>\n<li>存储引擎</li>\n<li>Buffer Pool</li>\n<li>日志undo log\\redo log\\bin log</li>\n</ol>\n<p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',r:{minutes:.27,words:81},t:"执行过程详解",y:"a"}}],["/posts/mysql/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",{loader:()=>n.e(5401).then(n.bind(n,3211)),meta:{e:'\n<h3>Explain性能分析看哪些字段</h3>\n<h3>MySQL分层有哪些，各个有什么作用</h3>\n<h3>如何优化</h3>\n<ol>\n<li>数据请求量(limit限制行数和限制字段数量)</li>\n<li>减少服务端扫描的行数(explain rows)</li>\n<li>切分大查询(同一个process阻塞其他操作)（普通的select是不会加行级锁的）<a href="https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E8%A1%8C%E7%BA%A7%E9%94%81" target="_blank" rel="noopener noreferrer">xiaolincoding行锁</a></li>\n<li>分解大连接查询</li>\n</ol>',r:{minutes:.39,words:117},t:"性能优化",y:"a"}}],["/posts/nacos/docker%E5%AE%89%E8%A3%85nacos.html",{loader:()=>n.e(8675).then(n.bind(n,6204)),meta:{e:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run --name nacos-quick -e MODE=standalone -p 8849:8848 -d nacos/nacos-server:v2.1.2-slim</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.14,words:42},t:"Docker 安装学习",y:"a"}}],["/posts/nacos/nacos.html",{loader:()=>n.e(4925).then(n.bind(n,4388)),meta:{e:"\n",r:{minutes:.01,words:3},t:"nacos",y:"a"}}],["/posts/nacos/",{loader:()=>n.e(1633).then(n.bind(n,6753)),meta:{e:'\n<p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener noreferrer">nacos.io/zh-cn/docs</a></p>\n<p><a href="https://nacos.io/zh-cn/docs/use-nacos-with-kubernetes.html" target="_blank" rel="noopener noreferrer">nacos-with-kubernetes</a></p>\n<p><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener noreferrer">alibaba/nacos</a></p>',r:{minutes:.07,words:22},t:"nacos",y:"a"}}],["/posts/network/DNS%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%9C%89%E5%93%AA%E4%BA%9B.html",{loader:()=>n.e(1817).then(n.bind(n,1546)),meta:{c:["network"],g:["network"],e:'<h3>一、什么是DNS</h3>\n<ol>\n<li>DNS（Domain Name System）是一个用于将域名转换为与之关联的IP地址的分布式系统。</li>\n</ol>\n<p>在Linux上，有几个与DNS相关的配置：</p>\n<h3>二、Linux与DNS相关命令</h3>\n<ol>\n<li><code>/etc/resolv.conf</code>文件：这个文件包含了DNS服务器的配置信息，如名称服务器的IP地址、搜索域等。</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 未配置DNS Server的</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-62BEC048 ~]# cat /etc/resolv.conf</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Generated by NetworkManager</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 已经配置了DNS Server的</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@i-62BEC048 ~]# cat /etc/resolv.conf</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Generated by NetworkManager</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nameserver</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 114.114.114.114</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.7,words:509},t:"DNS",y:"a"}}],["/posts/network/ipip%E9%9A%A7%E9%81%93%E9%80%9A%E8%AE%AF.html",{loader:()=>n.e(5762).then(n.bind(n,1541)),meta:{c:["network"],g:["network"],e:'<h3>一、概念</h3>\n<ol>\n<li>IP 隧道</li>\n</ol>\n<p>Linux 原生支持多种三层隧道，其底层实现原理都是基于 tun 设备。</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看tunnel操作指引</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tunnel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> help</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[ mode { ipip | gre | sit | isatap | vti } ] [ remote ADDR ] [ local ADDR ]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.13,words:638},t:"ipip隧道通讯",y:"a"}}],["/posts/network/NAT%E9%85%8D%E7%BD%AE%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE.html",{loader:()=>n.e(5189).then(n.bind(n,7886)),meta:{c:["network"],g:["network"],e:"<blockquote>\n<p>使用NAT实现数据转发其中包括DNAT和SNAT实验实现公网访问后转发到局域网的服务以及从内部网络命名空间配置SNAT访问公网服务</p>\n</blockquote>\n<h3>一、概念</h3>\n<h5>1.NAT</h5>\n<p>NAT（网络地址转换）是一种网络技术，一般用于局域网和公网之间IP地址转换，常用iptables实现。</p>\n<h5>2.DNAT</h5>\n<p>DNAT（目标网络地址转换）是NAT的一种形式，它将目标IP地址和端口转换为不同的IP地址和端口，通常用于将外部请求转发到内部网络中的特定服务器上。一般通过公网IP进来公网网卡的数据包更改目的ip或端口访问到内部服务。</p>",r:{minutes:9.37,words:2811},t:"NAT配置公网访问",y:"a"}}],["/posts/network/tcp%E7%B2%98%E5%8C%85.html",{loader:()=>n.e(1395).then(n.bind(n,9401)),meta:{c:["network"],g:["network"],e:'<blockquote>\n<p>理解什么是tcp粘包以及如何解决粘包的问题</p>\n</blockquote>\n<h1>tcp 粘包</h1>\n<p><a href="https://www.topgoer.com/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/socket%E7%BC%96%E7%A8%8B/TCP%E9%BB%8F%E5%8C%85.html" target="_blank" rel="noopener noreferrer">TCP黏包</a></p>\n<h3>什么是粘包</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>多次 net.Conn.Write 数据在服务端被当成同一份数据解析</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.63,words:188},t:"tcp粘包",y:"a"}}],["/posts/network/tcp%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%8A%93%E5%8C%85.html",{loader:()=>n.e(8043).then(n.bind(n,2902)),meta:{c:["network"],g:["network"],e:'\n<ol>\n<li>使用golang做tcp网络编程创建client &amp;&amp; server</li>\n<li>使用tcpdump监听客户端和服务端的连接情况</li>\n</ol>\n<h3>tcpdump</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># client</span></span>\n<span class="line"><span>sudo tcpdump -i lo0 host localhost and dst port 9292 -n</span></span>\n<span class="line"><span># server</span></span>\n<span class="line"><span>sudo tcpdump -i lo0 host localhost and src port 9292 -n</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.96,words:1187},t:"TCP连接与抓包",y:"a"}}],["/posts/network/tcp%E8%BF%9E%E6%8E%A5%E5%8F%AF%E4%BB%A5%E4%B8%80%E7%9B%B4%E4%BF%9D%E6%8C%81%E5%90%97.html",{loader:()=>n.e(726).then(n.bind(n,4930)),meta:{c:["network"],g:["network"],e:"<ol>\n<li>建立连接后双方持有socket，在linux文件系统上的表现是什么</li>\n<li>如果一直保持连接，中间的路由器离线了会怎么样</li>\n<li>kubernetes的controller的watch机制，http2.0协议下保持连接，有没有保活机制</li>\n<li>服务端的连接已经释放了，客户端还是established继续发送数据会怎么样</li>\n</ol>\n",r:{minutes:.37,words:112},t:"TCP连接可以一直保持吗",y:"a"}}],["/posts/network/websocket.html",{loader:()=>n.e(3916).then(n.bind(n,2301)),meta:{c:["network"],g:["network"],e:'<blockquote>\n<p>理解什么是websocket，使用场景以及如何使用</p>\n</blockquote>\n<h1>websocket</h1>\n<p><a href="github.com/gorilla/websocket">github.com/gorilla/websocket</a></p>\n<p><a href="https://www.topgoer.com/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/WebSocket%E7%BC%96%E7%A8%8B.html" target="_blank" rel="noopener noreferrer">WebSocket编程</a></p>',r:{minutes:.21,words:63},t:"websocket",y:"a"}}],["/posts/network/write_broken_pipe.html",{loader:()=>n.e(1617).then(n.bind(n,3180)),meta:{c:["network"],g:["network"],e:'\n<p><a href="https://blog.csdn.net/cljdsc/article/details/124134531" target="_blank" rel="noopener noreferrer">golang服务报错: write: broken pipe</a></p>\n<p><a href="https://piaohua.github.io/post/golang/20220731-connection-broken-pipe/" target="_blank" rel="noopener noreferrer">重现broken pipe: 讲解很清晰</a></p>',r:{minutes:3.85,words:1154},t:"broken pipe异常解析",y:"a"}}],["/posts/network/%E4%BB%80%E4%B9%88%E6%98%AFCNI.html",{loader:()=>n.e(8188).then(n.bind(n,7304)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>理解什么是CNI，k8s的网络模型是什么，实现的插件有哪些，相关的openvswitch又是什么</p>\n</blockquote>\n<h3>一、简短描述</h3>\n<ol>\n<li>CNCF项目;</li>\n<li>标准化的网络接口规范;</li>\n<li>CNI规范定义了"容器运行时"如何与"网络插件"进行通信，并且规定了插件必须实现的功能和接口;</li>\n<li>第三方插件:\n<a href="https://github.com/projectcalico/calico" target="_blank" rel="noopener noreferrer">calico</a>\n<a href="https://github.com/cilium/cilium" target="_blank" rel="noopener noreferrer">cilium</a></li>\n</ol>',r:{minutes:14.15,words:4245},t:"什么是CNI",y:"a"}}],["/posts/network/%E4%BB%80%E4%B9%88%E6%98%AFDHCP.html",{loader:()=>n.e(9181).then(n.bind(n,5769)),meta:{c:["network"],g:["network"],e:'<h3>DHCP概念</h3>\n<p>DHCP（Dynamic Host Configuration Protocol）是一种网络协议，用于自动分配IP地址和其他网络配置参数给计算机设备。静态IP地址是由管理员手动分配给设备的固定IP地址，不通过DHCP协议进行动态分配。</p>\n<h3>静态IP</h3>\n<h5>1.更新网卡配置文件</h5>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 系统信息</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> hostnamectl</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        Virtualization:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kvm</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    Operating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> System:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> openEuler</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 22.03</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (LTS-SP1)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    Kernel:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Linux</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 5.10.0-136.12.0.86.oe2203sp1.x86_64</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        Architecture:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> x86-64</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 网卡配置</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">vi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /etc/sysconfig/network-scripts/ifcfg-ens8</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.55,words:164},t:"DHCP",y:"a"}}],["/posts/network/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BD%91%E6%A1%A5.html",{loader:()=>n.e(2532).then(n.bind(n,4854)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>理解什么是网桥、路由，如何应用，了解docker的网络模型</p>\n</blockquote>\n<h3>1.网桥的创建</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 安装 bridge-utils 包，它包含了配置网桥所需的工具</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bridge-utils</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建网桥</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo brctl addbr &lt;bridge-name&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> brctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addbr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> my-net</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将物理接口添加到网桥中</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo brctl addif &lt;bridge-name&gt; &lt;physical-interface&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> brctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addif</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> my-net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lo</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将名为 "my-net" 的网络接口（network interface）启用（up）</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo ip link set dev &lt;bridge-name&gt; up</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> my-net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># ifconfig 可以查看到 my-net 网桥</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看网桥的状态以及连接到网桥上的接口</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> brctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> show</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:9.9,words:2969},t:"什么是网桥",y:"a"}}],["/posts/network/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BD%91%E7%BB%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html",{loader:()=>n.e(3439).then(n.bind(n,2877)),meta:{c:["docker"],g:["docker"],e:'<blockquote>\n<p>来个network namespace和veth pair的QuickStart</p>\n</blockquote>\n<h3>一、什么是 Network Namespace</h3>\n<ol>\n<li>Network Namespace 是用于在Linux系统中创建虚拟网络的一种机制；</li>\n<li>可将物理主机划分为多个逻辑上独立的网络空间(独立的网络设备、IP地址、路由表、防火墙等)；</li>\n<li>常用于虚拟机、容器等技术；</li>\n</ol>\n<h3>二、如何创建和使用 Network Namespace</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 对于每个 Network Namespace 来说，它会有自己独立的网卡、路由表、ARP 表、iptables 等和网络相关的资源</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 安装iproute</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> iproute</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看当前网络命名空间</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> list</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建一个新的网络名称空间</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /var/run/netns/</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Network Namespace 中执行命令使用 `ip netns exec` 子命令</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 新创建的 Network Namespace 中会默认创建一个 lo 回环网卡，此时网卡处于关闭状态</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addr</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">1:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lo:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">LOOPBAC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">K&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">mtu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 65536</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> qdisc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> noop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> state</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> DOWN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> group</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> default</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> qlen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1000</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    link/loopback</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 00:00:00:00:00:00</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> brd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 00:00:00:00:00:00</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 由于lo环回网卡关闭状态</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ping</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 127.0.0.1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ping:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> connect:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 网络不可达</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 启用lo环回网卡</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 启用后可以ping通</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> netns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ns0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ping</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 127.0.0.1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">PING</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 127.0.0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (127.0.0.1) 56(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">84</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) bytes of data.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.039</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ms</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 127.0.0.1:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> icmp_seq=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ttl=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> time=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.038</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ms</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.33,words:700},t:"什么是网络命名空间",y:"a"}}],["/posts/network/%E4%BB%80%E4%B9%88%E6%98%AF%E9%82%BB%E5%B1%85%E8%A1%A8.html",{loader:()=>n.e(2080).then(n.bind(n,9124)),meta:{c:["network"],g:["network"],e:'<ol>\n<li>用途</li>\n</ol>\n<p>查看本地节点直接相连的邻居节点的信息</p>\n<ol start="2">\n<li>linux上如何查看邻居表</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">arp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -a</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">10.244.0.13</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> c6:e5:e0:ff:70:e1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ether] on cni0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">10.244.0.20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">at</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">incomplet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">e&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cni0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">10.244.0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> c2:9f:76:a6:1f:6b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ether] on cni0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">10.244.0.14</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 52:8e:1f:86:41:c4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ether] on cni0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">10.202.41.113</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> d0:0d:58:94:26:ab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ether] on ens3</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.47,words:142},t:"邻居表",y:"a"}}],["/posts/network/%E4%BD%BF%E7%94%A8tun%E8%AE%BE%E5%A4%87%E5%AE%9E%E7%8E%B0VPN%E9%80%9A%E4%BF%A1.html",{loader:()=>n.e(2939).then(n.bind(n,29)),meta:{c:["network"],g:["network"],e:"<h3>一、概念</h3>\n<h5>1.什么是TUN设备</h5>\n<p>在计算机网络中，TUN 与 TAP 是操作系统内核中的虚拟网络设备。</p>\n<ul>\n<li>\n<p>tun是网络层的虚拟网络设备，可以收发第三层数据报文包，如IP封包，因此常用于一些点对点IP隧道等。</p>\n</li>\n<li>\n<p>tap是链路层的虚拟网络设备，等同于一个以太网设备，它可以收发第二层数据报文包，如以太网数据帧。Tap最常见的用途就是做为虚拟机的网卡，因为它和普通的物理网卡更加相近，也经常用作普通机器的虚拟网卡。</p>\n</li>\n</ul>\n<p>用户空间的程序可以通过 TUN/TAP 设备发送数据。常见于基于TUN/TAP设备实现的VPN。比如VPN软件在用户空间创建一个TUN/TAP设备，并将其配置为将网络流量导入到VPN隧道中。然后，VPN软件可以通过TUN/TAP设备读取和写入数据，将它们加密并通过隧道发送到VPN服务器。在服务器端，VPN软件将收到的数据解密并通过TUN/TAP设备发送到网络接口，从而实现了VPN连接。</p>",r:{minutes:5.91,words:1772},t:"使用tun设备隧道通信",y:"a"}}],["/posts/network/%E5%9B%BE%E8%A7%A3%E6%B3%9B%E6%B4%AA%E4%B8%8E%E5%B9%BF%E6%92%AD%E9%A3%8E%E6%9A%B4.html",{loader:()=>n.e(4489).then(n.bind(n,1640)),meta:{c:["network"],g:["network"],e:'<h3>参考文章</h3>\n<p><a href="https://mp.weixin.qq.com/s/Mpng0TAAK2st9v2N1RxNdA" target="_blank" rel="noopener noreferrer">图解STP之你可能不用但是不能不懂</a>\n<a href="https://feisky.gitbooks.io/sdn/content/basic/tcpip.html" target="_blank" rel="noopener noreferrer">SDN指南</a></p>\n',r:{minutes:.13,words:40},t:"图解泛洪与广播风暴",y:"a"}}],["/posts/network/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GRE%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1.html",{loader:()=>n.e(1534).then(n.bind(n,7597)),meta:{c:["network"],g:["network"],e:'<h3>一、概念</h3>\n<ol>\n<li>什么是VXLAN</li>\n</ol>\n<p>一种网络虚拟化技术</p>\n<ol start="2">\n<li>GRE隧道是什么</li>\n</ol>\n<p>一种隧道协议。（将原始的数据包封装在一个新的IP头中实现跨越多个网络端口传输）</p>\n<ol start="3">\n<li>两者之间的关系是什么</li>\n</ol>\n<p>在VXLAN网络中，通过使用GRE隧道技术可以实现虚拟网络之间的隔离。</p>\n<ol start="4">\n<li>原理</li>\n</ol>\n<p>GRE协议将原始的数据包封装在一个新的IP头中，使得数据包能够跨越多个网络端口传输。（借助IP协议中的IP数据报文来传输数据）</p>',r:{minutes:2.11,words:633},t:"如何使用GRE隧道通信",y:"a"}}],["/posts/network/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BAvxlan%E7%BD%91%E7%BB%9C.html",{loader:()=>n.e(8098).then(n.bind(n,4577)),meta:{c:["network"],g:["network"],e:'<h3>一、概念</h3>\n<ol>\n<li>什么是VXLAN</li>\n</ol>\n<p>一种网络虚拟化技术。</p>\n<ol start="2">\n<li>GRE隧道是什么</li>\n</ol>\n<p>一种隧道协议，将原始的数据包封装在一个新的IP头中实现跨越多个网络端口传输。</p>\n<ol start="3">\n<li>两者之间的关系是什么</li>\n</ol>\n<p>在VXLAN网络中，通过使用GRE隧道技术可以实现虚拟网络之间的隔离。</p>\n<ol start="4">\n<li>原理</li>\n</ol>\n<p>GRE协议将原始的数据包封装在一个新的IP头中，使得数据包能够跨越多个网络端口传输，借助IP协议中的IP数据报文来传输数据。要实现VXLAN网络隔离，需要使用Linux中的网络命名空间来创建多个隔离的虚拟网络环境，并将VXLAN设备连接到相应的命名空间。</p>',r:{minutes:3.54,words:1063},t:"如何构建vxlan网络",y:"a"}}],["/posts/network/%E6%9E%84%E5%BB%BAVPN%E9%80%9A%E8%AE%AF.html",{loader:()=>n.e(1374).then(n.bind(n,1991)),meta:{c:["network"],g:["network"],e:'<h3>一、VPN通讯原理</h3>\n<ol>\n<li>远程和本地如何连接转发流量</li>\n<li>本地机器如何接管流量</li>\n<li>如何实现匹配规则的访问流量接管</li>\n</ol>\n<p><a href="https://gost.run/getting-started/quick-start/" target="_blank" rel="noopener noreferrer">https://gost.run/getting-started/quick-start/</a></p>\n',r:{minutes:.22,words:65},t:"构建VPN通讯",y:"a"}}],["/posts/network/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80.html",{loader:()=>n.e(4212).then(n.bind(n,5790)),meta:{c:["network"],g:["network"],e:"<h3>一、CNI</h3>\n<h3>二、网络相关术语</h3>\n<ol>\n<li>ingrees egress</li>\n<li>attach</li>\n<li>tc</li>\n<li>ifup &amp;&amp; ifdown</li>\n<li>command <code>ip route</code></li>\n<li>command <code>route -n</code></li>\n</ol>\n<h3>Q&amp;A</h3>\n<ul>\n<li>\n<p>VPC</p>\n</li>\n<li>\n<p>overlay</p>\n</li>\n<li>\n<p>VXLAN和VLAN</p>\n</li>\n<li>\n<p>CIDR地址是什么意思</p>\n</li>\n<li>\n<p>NAT</p>\n</li>\n<li>\n<p>iptable和NAT是什么关系</p>\n</li>\n<li>\n<p>如何查看linux的NAT规则</p>\n</li>\n</ul>",r:{minutes:16.01,words:4803},t:"网络基础",y:"a"}}],["/posts/nginx/%E4%BC%9A%E8%AF%9D%E7%B2%98%E6%80%A7.html",{loader:()=>n.e(9989).then(n.bind(n,6396)),meta:{c:["Nginx"],g:["Nginx"],e:'<blockquote>\n<p>配置Nginx实现负载均衡转发请求和保持会话粘性</p>\n</blockquote>\n<h3>一、如何配置负载均衡同一个域名均衡给多个服务</h3>\n<h5>1.开启多个服务端</h5>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx-test</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx-test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  --network-alias</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> one</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  435861851/gin:v0.0.1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx-test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -itd</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  --network-alias</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> two</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  hashicorp/http-echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -text=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello world"</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.95,words:886},t:"会话粘性",y:"a"}}],["/posts/nginx/%E5%9F%9F%E5%90%8D%E6%8C%87%E5%90%91%E9%85%8D%E7%BD%AE.html",{loader:()=>n.e(5534).then(n.bind(n,9647)),meta:{c:["Nginx"],g:["Nginx"],e:'<blockquote>\n<p>通过Nginx使用不同的域名指向不同的服务</p>\n</blockquote>\n<h3>1.配置和启动Nginx</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx-test</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.86,words:259},t:"域名指向配置",y:"a"}}],["/posts/nginx/%E5%BC%80%E5%90%AFSSL%E9%AA%8C%E8%AF%81.html",{loader:()=>n.e(4931).then(n.bind(n,6012)),meta:{c:["Nginx"],g:["Nginx"],e:'<blockquote>\n<p>如何生成SSL证书并且应用于Nginx服务开启https</p>\n</blockquote>\n<h3>1.创建证书</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cert</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:2.52,words:757},t:"开启SSL验证",y:"a"}}],["/posts/prometheus/alertmanager%E7%9A%84%E5%8E%86%E5%8F%B2%E5%91%8A%E8%AD%A6.html",{loader:()=>n.e(4660).then(n.bind(n,9948)),meta:{d:1659003181e3,l:"2022年7月28日",c:["prometheus"],g:["alertmanager","告警","高可用"],u:1,e:'<h3>一、历史告警存档方案</h3>\n<p><a href="https://prometheus.io/docs/operating/integrations/#alertmanager-webhook-receiver" target="_blank" rel="noopener noreferrer">官方webhook集成的方法</a></p>\n<ol>\n<li>alertsnitch + MySQL</li>\n<li>alertmanager-webhook-logger</li>\n</ol>\n<h3>二、Alertmanager的本地存储</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 本地存储格式和查看方式</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">alertmanager没有本地存储（持久化通过webhook适配）</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.93,words:880},t:"alertmanager的历史告警",y:"a"}}],["/posts/prometheus/alertmanager%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%BA%E5%88%B6.html",{loader:()=>n.e(735).then(n.bind(n,3851)),meta:{d:1681324812e3,l:"2023年4月13日",c:["prometheus"],g:["alertmanager","告警","高可用"],u:1,e:"Alertmanager使用Gossip机制来解决消息在多台Alertmanager之间的传递问题，使用docker搭建集群验证告警滤重功能",r:{minutes:9.23,words:2768},t:"alertmanager高可用机制",y:"a"}}],["/posts/prometheus/golang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%8C%87%E6%A0%87exporter.html",{loader:()=>n.e(3057).then(n.bind(n,5338)),meta:{d:1681108812e3,l:"2023年4月10日",c:["prometheus"],g:["prometheus"],u:1,e:"使用go实现简单的指标用于测试prometheus",r:{minutes:.39,words:116},t:"golang实现简单的指标exporter",y:"a"}}],["/posts/prometheus/mongodb%E6%8C%87%E6%A0%87%E9%87%87%E9%9B%86.html",{loader:()=>n.e(4610).then(n.bind(n,9399)),meta:{d:1649788812e3,l:"2022年4月13日",c:["prometheus"],g:["mongodb","prometheus","golang"],u:1,e:"采集golang/mongodb-driver的查询数据相关的性能指标",r:{minutes:1.62,words:486},t:"mongodb的指标采集",y:"a"}}],["/posts/prometheus/mybatis%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87.html",{loader:()=>n.e(2588).then(n.bind(n,1)),meta:{d:1658857501e3,l:"2022年7月27日",c:["prometheus"],g:["mongodb","prometheus","java","mybatis"],u:1,e:'<h3>一、定义各个prometheus指标</h3>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MybatisMetrics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] labelNames </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"class"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "command"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "status"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Counter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> QUERY_COUNT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Counter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mybatis_requests_total"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"total sql command."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">labelNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(labelNames).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Gauge</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> QUERY_MAX </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Gauge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mybatis_requests_max"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"run sql command latency in seconds."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">labelNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(labelNames).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Summary</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> QUERY_SUMMARY </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Summary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mybatis_latency_seconds"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Request latency in seconds."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">labelNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(labelNames)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.24,words:372},t:"mybatis监控指标",y:"a"}}],["/posts/prometheus/node_exporter%E6%8C%87%E6%A0%87%E8%A7%A3%E6%9E%90.html",{loader:()=>n.e(8674).then(n.bind(n,4929)),meta:{d:1681108812e3,l:"2023年4月10日",c:["prometheus"],g:["prometheus","api","监控"],u:1,e:"使用docker搭建prometheus和node exporter，解释本机cpu、内存等指标查看方式，以及如何通过http api接口查看监控数据",r:{minutes:4.76,words:1429},t:"node_exporter指标解析",y:"a"}}],["/posts/prometheus/prometheus%E7%9A%84%E8%B5%84%E6%BA%90%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90.html",{loader:()=>n.e(9093).then(n.bind(n,4211)),meta:{d:1681402512e3,l:"2023年4月14日",c:["prometheus"],g:["prometheus","api","监控","内存分析"],u:1,e:"理解prometheus的内存消耗波动曲线、磁盘占用大小计算规则等",r:{minutes:6.66,words:1997},t:"prometheus的资源占用分析",y:"a"}}],["/posts/prometheus/prometheus%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90.html",{loader:()=>n.e(4307).then(n.bind(n,3844)),meta:{d:1680936012e3,l:"2023年4月8日",c:["prometheus"],g:["prometheus"],u:1,e:'<h3>一、默认配置</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>global:</span></span>\n<span class="line"><span>  scrape_interval: 15s # 将刮擦间隔设置为每15秒。默认为1分钟一次</span></span>\n<span class="line"><span>  evaluation_interval: 15s # 每15秒评估一次规则。默认为1分钟。</span></span>\n<span class="line"><span>  # Scrape_timeout被设置为全局默认值(10秒)。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 告警配置</span></span>\n<span class="line"><span>alerting:</span></span>\n<span class="line"><span>  alertmanagers:</span></span>\n<span class="line"><span>    - static_configs:</span></span>\n<span class="line"><span>        - targets:</span></span>\n<span class="line"><span>          # - alertmanager:9093</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 加载规则一次，并定期根据全局的“evaluation_interval”计算它们</span></span>\n<span class="line"><span>rule_files:</span></span>\n<span class="line"><span>  # - "first_rules.yml"</span></span>\n<span class="line"><span>  # - "second_rules.yml"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 一个抓取配置，只包含一个要抓取的端点:这里是Prometheus本身</span></span>\n<span class="line"><span>scrape_configs:</span></span>\n<span class="line"><span>  # 作业名称作为标签\' job=&lt;job_name&gt; \'添加到从此配置中提取的任何时间序列中</span></span>\n<span class="line"><span>  - job_name: "prometheus"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    # Metrics_path默认为“/metrics”</span></span>\n<span class="line"><span>    # scheme defaults to \'http\'.</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    static_configs:</span></span>\n<span class="line"><span>      - targets: ["localhost:9090"]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.9,words:269},t:"prometheus配置解析",y:"a"}}],["/posts/prometheus/prometheus%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88%E9%A2%84%E7%A0%94.html",{loader:()=>n.e(7525).then(n.bind(n,6339)),meta:{d:1680936012e3,l:"2023年4月8日",c:["prometheus"],g:["prometheus"],u:1,e:'<h3>一、应用场景</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>HCI超融合的监控，我们的应用程序将会和主机一起打包销售，给到客户的时候启动主机，这个主机有可能是1台也有可能是3台。</span></span>\n<span class="line"><span>那么主机启动之后，监控服务随之启动;</span></span>\n<span class="line"><span>业务会暴露指标给prometheus采集</span></span>\n<span class="line"><span>这里的prometheus如果有1台主机那么就只有1个监控服务，如果有3台主机那么就会有3个监控服务，</span></span>\n<span class="line"><span>这3台机器上面的3个prometheus的实例各自的存储是独立的。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:13.72,words:4117},t:"prometheus高可用方案预研",y:"a"}}],["/posts/prometheus/snapshot%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE.html",{loader:()=>n.e(9073).then(n.bind(n,6383)),meta:{d:1681800012e3,l:"2023年4月18日",c:["prometheus"],g:["prometheus"],u:1,e:'<h3>一、主库搭建</h3>\n<ol>\n<li>创建配置文件</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Desktop/master.yml</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Desktop/tmp</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.14,words:942},t:"snapshot备份数据",y:"a"}}],["/posts/prometheus/springboot%E7%9A%84mongodb%E6%8C%87%E6%A0%87.html",{loader:()=>n.e(6318).then(n.bind(n,8943)),meta:{d:1658830381e3,l:"2022年7月26日",c:["prometheus"],g:["springboot","mongodb","prometheus","java"],u:1,e:'<h3>一、定义mongo监听器指标采集</h3>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> com.mongodb.event.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> io.micrometer.core.annotation.Incubating</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> io.micrometer.core.instrument.MeterRegistry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> io.micrometer.core.instrument.Timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> io.micrometer.core.lang.NonNullApi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> io.micrometer.core.lang.NonNullFields</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.time.Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.util.concurrent.TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * todo {这里必须加注释}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@author</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> xuweiqiang</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@version</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 2.0.0</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * @date 2022/7/25 9:50</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">NonNullApi</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">NonNullFields</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Incubating</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">since</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "1.2.0"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyMongoMetricsCommandListener</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> CommandListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> database</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Timer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Builder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> timerBuilder </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mongo.operations.duration"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">description</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Timer of mongodb commands"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MeterRegistry</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> MyMongoMetricsCommandListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">MeterRegistry</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> database</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">registry</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> registry;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">database</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> database;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> commandStarted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">CommandStartedEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> commandStartedEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> d</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> commandStartedEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDatabaseName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        MongoRequestIdShareHolder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">commandStartedEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getRequestId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()),d);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> commandSucceeded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">CommandSucceededEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        timeCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(event, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"SUCCESS"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getElapsedTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">NANOSECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> commandFailed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">CommandFailedEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        timeCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(event, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"FAILED"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getElapsedTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">NANOSECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> timeCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">CommandEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> elapsedTimeInNanoseconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> d</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ""</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (event </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> CommandSucceededEvent </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> event </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> CommandFailedEvent){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            d </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> MongoRequestIdShareHolder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getRequestId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()));</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            MongoRequestIdShareHolder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getRequestId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        timerBuilder</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">publishPercentileHistogram</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">minimumExpectedValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ofSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">maximumExpectedValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ofSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">serviceLevelObjectives</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                        Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ofMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                        Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ofMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                        Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ofMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                        Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ofMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                        Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ofSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                        Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ofSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                )</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"database"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,d)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"request_id"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getRequestId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"command"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getCommandName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">())</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                //.tag("cluster.id", event.getConnectionDescription().getConnectionId().getServerId().getClusterId().getValue())</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"server.address"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getConnectionDescription</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getServerAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">())</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"status"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, status)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(registry)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">record</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(elapsedTimeInNanoseconds, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">NANOSECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.1,words:331},t:"springboot的mongodb指标",y:"a"}}],["/posts/prometheus/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BA%E8%81%94%E9%82%A6%E6%9C%BA%E5%88%B6%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.html",{loader:()=>n.e(5188).then(n.bind(n,5394)),meta:{d:1680936012e3,l:"2023年4月8日",c:["prometheus"],g:["prometheus"],u:1,e:"<h3>一、配置热重载</h3>\n<ol>\n<li>main.main函数启动时候更改 config.LoadFile(cfg.configFile 为 config.LoadConfigFromEtcd(cfg.configFile,</li>\n<li>在 &lt;-hub (chan os.Signal) 监听的select之中添加 &lt;-etcd.Listen() 监听，有配置更改时候调用 reladConfig 函数</li>\n</ol>\n<h3>二、federation</h3>\n<ol>\n<li>docker install两个prometheus</li>\n<li>本地mac启动一个exporter暴露系统指标</li>\n<li>指定一个prometheus采集指标</li>\n<li>federation机制让另一个prometheus也采集到一样的指标</li>\n</ol>",r:{minutes:2.47,words:740},t:"基于docker搭建联邦机制主从同步",y:"a"}}],["/posts/prometheus/%E5%9F%BA%E4%BA%8E%E8%BF%9C%E7%A8%8B%E5%86%99%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AEprometheus%E9%9B%86%E7%BE%A4.html",{loader:()=>n.e(3952).then(n.bind(n,9983)),meta:{d:1680936012e3,l:"2023年4月8日",c:["prometheus"],g:["prometheus"],u:1,e:'<h3>一、从库搭建</h3>\n<ol>\n<li>创建写主机配置</li>\n</ol>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/prometheus/slave.yml</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.68,words:205},t:"基于远程写同步数据prometheus集群",y:"a"}}],["/posts/prometheus/%E6%90%AD%E5%BB%BAalertmanager%E5%91%8A%E8%AD%A6%E6%9C%8D%E5%8A%A1.html",{loader:()=>n.e(6279).then(n.bind(n,4235)),meta:{d:1681152012e3,l:"2023年4月11日",c:["prometheus"],g:["prometheus","告警"],u:1,e:"使用docker和自定义指标搭建promethus服务、alertmanager服务，试用邮件告警功能",r:{minutes:4.95,words:1486},t:"搭建alertmanager告警服务",y:"a"}}],["/posts/prometheus/%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8prometheus%E6%9C%8D%E5%8A%A1.html",{loader:()=>n.e(9794).then(n.bind(n,8022)),meta:{c:["prometheus"],g:["prometheus"],e:'<h3>本地存储</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /Users/xuweiqiang/Documents/data</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.26,words:78},t:"本地启动prometheus服务",y:"a"}}],["/posts/prometheus/%E6%9F%A5%E7%9C%8Bprometheus%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98.html",{loader:()=>n.e(1442).then(n.bind(n,5976)),meta:{d:1681324812e3,l:"2023年4月13日",c:["prometheus"],g:["prometheus","linux"],u:1,e:"通过top命令和prometheus的metrics端点查看内存占用",r:{minutes:.54,words:161},t:"查看prometheus的占用内存大小",y:"a"}}],["/posts/prometheus/%E7%AE%80%E5%8D%95%E7%9A%84webhook.html",{loader:()=>n.e(4457).then(n.bind(n,4676)),meta:{d:1681152012e3,l:"2023年4月11日",c:["prometheus"],g:["prometheus","告警","alertmanager"],u:1,e:"编写简单的webhook程序验证alertmanager告警服务",r:{minutes:.7,words:209},t:"简单的webhook",y:"a"}}],["/posts/redis/bitmap%E4%BD%8D%E5%9B%BE.html",{loader:()=>n.e(3388).then(n.bind(n,2385)),meta:{e:'\n<p>(bitmap)[http://c.biancheng.net/redis/bitmap.html]</p>\n<h3>内存占用</h3>\n<blockquote>\n<p>位图（bitmap）同样属于 string 数据类型；512 MB 最大；</p>\n</blockquote>\n<h3>经典场景之记录签到情况</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SETBIT key offset value</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SETBIT userID(用户ID) 1(具体日期) bool(是否签到)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>一个用户一个位图</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.22,words:66},t:"bitmap位图",y:"a"}}],["/posts/redis/Blogs.html",{loader:()=>n.e(6783).then(n.bind(n,5653)),meta:{e:"\n<ol>\n<li>\n<p>存储文章内容k-v形式存储字符串(序列化内容)</p>\n</li>\n<li>\n<p>文章访问量自增 INCRBY</p>\n</li>\n<li>\n<p>文章内容访问或更改属性麻烦更换为散列 HSET key field value</p>\n</li>\n<li>\n<p>获取文章列表使用列表类型list LPUSH RPUSH LPOP RPOP</p>\n</li>\n<li>\n<p>文章的标签tags存储使用集合类型 SCARD key</p>\n</li>\n<li>\n<p>文章按照访问量排序 - 有序集合 ZCOUNT key min max</p>\n</li>\n</ol>",r:{minutes:1.53,words:459},t:"使用Redis搭建博客",y:"a"}}],["/posts/redis/cluster.html",{loader:()=>n.e(9948).then(n.bind(n,5356)),meta:{e:'\n<ol>\n<li>简介</li>\n<li>如何安装使用（linux、docker、k8s）</li>\n<li>底层原理</li>\n<li>高可用、高性能优化配置</li>\n</ol>\n<h3>go的redis客户端需要连接池吗，不是说redis是单线程的？</h3>\n<h3>参考博客</h3>\n<p><a href="https://segmentfault.com/a/1190000038771812" target="_blank" rel="noopener noreferrer">深入学习Redis之Redis Cluster</a></p>\n<h1>Full_stack_knowledge_system</h1>',r:{minutes:.24,words:72},t:"目录",y:"a"}}],["/posts/redis/Hash.html",{loader:()=>n.e(2864).then(n.bind(n,8725)),meta:{e:"\n<ol>\n<li>\n<p>获取哈希表之中所有的字段和值</p>\n</li>\n<li>\n<p>查看哈希表之中指定的Key是否存在</p>\n</li>\n<li>\n<p>删除哈希表字段Key</p>\n</li>\n<li>\n<p>哈希表的指定Key的指定字段field设置增量increment</p>\n</li>\n<li>\n<p>获取哈希表中所有字段</p>\n</li>\n<li>\n<p>设置哈希表之中Key的指定的字段field值</p>\n</li>\n</ol>\n",r:{minutes:.31,words:93},t:"Redis 哈希(hash)",y:"a"}}],["/posts/redis/Key.html",{loader:()=>n.e(8841).then(n.bind(n,6411)),meta:{e:"\n<ol>\n<li>\n<p>删除Key</p>\n</li>\n<li>\n<p>检查Key是否存在</p>\n</li>\n<li>\n<p>设置Key过期时间</p>\n</li>\n<li>\n<p>查找所有符合给定模式( pattern)的Key</p>\n</li>\n<li>\n<p>获取Key的过期时间(ms/s)</p>\n</li>\n<li>\n<p>修改Key的名称</p>\n</li>\n<li>\n<p>返回Key存储的值的类型</p>\n</li>\n</ol>\n",r:{minutes:.22,words:67},t:"Reids 键 Key",y:"a"}}],["/posts/redis/List.html",{loader:()=>n.e(4400).then(n.bind(n,281)),meta:{e:"\n<ol>\n<li>\n<p>往Key列表PUSH指定元素(头部\\尾部)</p>\n</li>\n<li>\n<p>移出并获取列表Key的第一个元素\\最后一个元素</p>\n</li>\n<li>\n<p>获取列表指定返回的元素</p>\n</li>\n<li>\n<p>获取列表指定索引的元素</p>\n</li>\n</ol>\n",r:{minutes:.21,words:64},t:"List 列表",y:"a"}}],["/posts/redis/plan.html",{loader:()=>n.e(4731).then(n.bind(n,441)),meta:{e:"<ol>\n<li>\n<p>redis 01-28  xiaolincoding\\java全栈\\Redis入门指南</p>\n</li>\n<li>\n<p>mysql 01-29 xiaolincoding</p>\n</li>\n<li>\n<p>golang 01-30\\01-31</p>\n</li>\n<li>\n<p>tcp/ip</p>\n</li>\n<li>\n<p>mongodb</p>\n</li>\n<li>\n<p>kafka</p>\n</li>\n<li>\n<p>elastic</p>\n</li>\n<li>\n<p>k8s</p>\n</li>\n<li>\n<p>个人优势</p>\n</li>\n<li>\n<p>项目经验</p>\n</li>\n</ol>",r:{minutes:.17,words:50},t:"Full_stack_knowledge_system",y:"a"}}],["/posts/redis/",{loader:()=>n.e(2110).then(n.bind(n,3672)),meta:{e:'\n<p>Redis入门指南</p>\n<h3>优秀站点</h3>\n<p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">Java全栈知识体系</a></p>\n<p><a href="https://xiaolincoding.com/" target="_blank" rel="noopener noreferrer">小林coding</a></p>\n<p><a href="https://www.cnblogs.com/rerise/p/16203438.html" target="_blank" rel="noopener noreferrer">熔断/降级/限流</a></p>',r:{minutes:.12,words:36},t:"Redis_Getting_Started_Guide",y:"a"}}],["/posts/redis/Redis%E4%B8%BB%E4%BB%8E%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html",{loader:()=>n.e(1702).then(n.bind(n,5)),meta:{e:"<h3>reids的集群的脑裂是什么（双主或多主）</h3>\n<pre><code>主从集群中，同时存在两个或多个主节点，它们都能接收写请求。\n客户端不知道应该往哪个主节点写入数据，导致数据不一致或者数据丢失。\n</code></pre>\n<h3>产生的原因</h3>\n<ol>\n<li>网络问题：leader无法通信，哨兵将从节点升级为主节点，</li>\n<li>哨兵配置异常。（导致将多个从节点提升为主节点）</li>\n</ol>\n<h3>如何避免脑裂</h3>\n<ol>\n<li>配置合理的哨兵参数：\nmin-slaves-to-write：这个配置项设置了主库能进行数据同步的最少从库数量，即至少要保证N个从库能进行数据同步；\nmin-slaves-max-lag：这个配置项设置了主从库间进行数据复制时，从库给主库发送 ACK 消息的最大延迟（以秒为单位）</li>\n</ol>",r:{minutes:1.41,words:423},t:"",y:"a"}}],["/posts/redis/Redis%E4%BA%8B%E5%8A%A1.html",{loader:()=>n.e(6209).then(n.bind(n,8130)),meta:{e:'\n<h3>事务是批量执行脚本，Redis语句是原子性的(事物不可分割，要么都发生要么都不发生)</h3>\n<h3>Redis事务不会因为批量脚本之中的某一个执行失败而回滚，也不会造成后续的指令不执行</h3>\n<h3>常用指令</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MULTI</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>EXEC</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1,words:300},t:"Redis事务",y:"a"}}],["/posts/redis/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.html",{loader:()=>n.e(6420).then(n.bind(n,3769)),meta:{e:"\n<ol>\n<li>\n<p>client订阅频道chat</p>\n</li>\n<li>\n<p>server发布消息到频道chat</p>\n</li>\n<li>\n<p>查看订阅和发布系统状态 [获取活跃频道组成的列表]</p>\n</li>\n</ol>\n",r:{minutes:.16,words:47},t:"发布/订阅",y:"a"}}],["/posts/redis/Redis%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8.html",{loader:()=>n.e(7102).then(n.bind(n,2366)),meta:{e:'\n<h3>使用场景</h3>\n<ol>\n<li>热点数据缓存</li>\n<li>限时业务(使用expire过期key的特性)</li>\n<li>计数器(incre原子操作)</li>\n<li>分布式锁</li>\n<li>延时操作(发布订阅Pub/Sub频道 + Keyspace Notifications在key expire时候主动push事件)</li>\n<li>排行榜</li>\n<li>点赞、好友相互关系(集合的交集、并集、差集)</li>\n<li>简单队列</li>\n</ol>\n<h1>Full_stack_knowledge_system</h1>\n<p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',r:{minutes:.34,words:102},t:"Redis概念和基础",y:"a"}}],["/posts/redis/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D.html",{loader:()=>n.e(9462).then(n.bind(n,5240)),meta:{e:'\n<h3>SAVE \\ BGSAVE</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>命令将在 redis 安装目录中创建dump.rdb文件</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.21,words:62},t:"数据备份和恢复",y:"a"}}],["/posts/redis/Redis%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.html",{loader:()=>n.e(1305).then(n.bind(n,7171)),meta:{e:'\n<h3>并发如何带来缓存一致性的问题</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>同时发起A|B两个请求</span></span>\n<span class="line"><span>A更新值为1并记录到缓存</span></span>\n<span class="line"><span>B更新值为2并记录到缓存</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>正确的情况：数据库和缓存都为2</span></span>\n<span class="line"><span>实际的情况：缓存先被B更新为2，然后又被A更新为1</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.24,words:371},t:"缓存一致性",y:"a"}}],["/posts/redis/Redis%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E5%92%8C%E7%A9%BF%E9%80%8F.html",{loader:()=>n.e(7655).then(n.bind(n,8870)),meta:{e:'\n<h3>缓存雪崩</h3>\n<blockquote>\n<p>数据大量过期，大量请求直接访问数据库造成数据库宕机</p>\n</blockquote>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>大量数据同时过期</span></span>\n<span class="line"><span>Redis故障宕机</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.54,words:161},t:"Redis缓存",y:"a"}}],["/posts/redis/Redis%E9%99%90%E9%A2%91.html",{loader:()=>n.e(5658).then(n.bind(n,6195)),meta:{e:'\n<h3>最简单的但是有超频的风险的</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SET userID count_request</span></span>\n<span class="line"><span>Expired userID xxx</span></span>\n<span class="line"><span>incre(userID)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.71,words:214},t:"Redis限频",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{loader:()=>n.e(6936).then(n.bind(n,3528)),meta:{e:'\n<p><a href="https://pdai.tech/md/arch/arch-z-lock.html" target="_blank" rel="noopener noreferrer">Java全栈知识体系之分布式系统</a>\n<a href="https://www.infoq.cn/article/dvaaj71f4fbqsxmgvdce" target="_blank" rel="noopener noreferrer">InfoQ Redis</a></p>\n<h3>锁实现需要支持</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>互斥</span></span>\n<span class="line"><span>超时释放</span></span>\n<span class="line"><span>高性能</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.19,words:358},t:"集群分布式锁及实现方案",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8FDocker%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(2108).then(n.bind(n,7324)),meta:{e:'\n<h3>创建本地data目录和conf文件夹</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node1/data \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node1/conf \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node2/data \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node2/conf \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node3/data \\</span></span>\n<span class="line"><span>mkdir -p /Users/xuweiqiang/Documents/redis/cluster/node3/conf</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.61,words:482},t:"基于Docker搭建Redis集群",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(8727).then(n.bind(n,6092)),meta:{e:'\n<p><a href="https://xie.infoq.cn/article/6c3500c66c3cdee3d72b88780" target="_blank" rel="noopener noreferrer">InfoQ Redis集群</a></p>\n<h3>模式概览</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>一主多从</span></span>\n<span class="line"><span>主负责读写</span></span>\n<span class="line"><span>从负责读 [Redis2.6开始默认从只读]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.47,words:141},t:"集群模式主从模式",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html",{loader:()=>n.e(6992).then(n.bind(n,7490)),meta:{e:"\n",r:{minutes:.02,words:7},t:"分布式事务",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E7%89%87Cluster%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(9551).then(n.bind(n,8429)),meta:{e:'\n<p><a href="https://www.cnblogs.com/jian0110/p/14002555.html" target="_blank" rel="noopener noreferrer">博客园cluster</a></p>\n<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-cluster.html" target="_blank" rel="noopener noreferrer">Java全栈知识体系</a></p>\n<h3>节点数</h3>\n<blockquote>\n<p>官方推荐 3主3从六个节点</p>\n</blockquote>',r:{minutes:.37,words:111},t:"Cluster模式",y:"a"}}],["/posts/redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(609).then(n.bind(n,1474)),meta:{e:'\n<p><a href="https://xie.infoq.cn/article/6c3500c66c3cdee3d72b88780" target="_blank" rel="noopener noreferrer">InfoQ Redis集群</a></p>\n<blockquote>\n<p>master宕机哨兵会自动选举slave为master</p>\n</blockquote>\n<h3>配置</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>redis.conf与主从一致</span></span>\n<span class="line"><span>每个哨兵进程sentinel.conf</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.44,words:132},t:"哨兵 redis-sentinel",y:"a"}}],["/posts/redis/Set.html",{loader:()=>n.e(6726).then(n.bind(n,8279)),meta:{e:"\n<ol>\n<li>\n<p>向集合添加一个或者多个成员</p>\n</li>\n<li>\n<p>获取集合的成员数量</p>\n</li>\n<li>\n<p>获取集合的所有成员</p>\n</li>\n<li>\n<p>返回集合的差集\\交集\\并集</p>\n</li>\n</ol>\n",r:{minutes:.17,words:52},t:"Redis集合Set",y:"a"}}],["/posts/redis/String.html",{loader:()=>n.e(6005).then(n.bind(n,2008)),meta:{e:"\n<ol>\n<li>\n<p>设置和获取Key值</p>\n</li>\n<li>\n<p>自增自减Key值</p>\n</li>\n</ol>\n",r:{minutes:.07,words:21},t:"String 字符串",y:"a"}}],["/posts/redis/%E5%88%86%E7%89%87RedisCluster%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(5689).then(n.bind(n,2958)),meta:{e:'\n<blockquote>\n<p>主从只是扩展了读，但是写和存储能力并未得到扩展</p>\n</blockquote>\n<h3>关键模块</h3>\n<ol>\n<li>\n<p>哈希槽(Hash Slot)(数量是2^14=16384)，Cluster每个节点负责一部分哈希槽</p>\n</li>\n<li>\n<p>Keys hash tags 将相关Key分配到相同的hash slot</p>\n</li>\n<li>\n<p>Cluster nodes属性</p>\n</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>redis-cli cluster nodes</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>node id, address:port, flags, last ping sent, last pong received, configuration epoch, link state, slots.</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.26,words:978},t:"集群分片",y:"a"}}],["/posts/redis/%E5%88%86%E7%89%87RedisCluster%E6%90%AD%E5%BB%BA.html",{loader:()=>n.e(7979).then(n.bind(n,6755)),meta:{e:'\n<ol>\n<li>redis-conf</li>\n<li>redis-cli --cluster create</li>\n</ol>\n<h3>Redis-conf配置</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#注释掉 bind 项，默认监听所有网卡 70 #bind 127.0.0.1</span></span>\n<span class="line"><span>#关闭保护模式 89 protected-mode no</span></span>\n<span class="line"><span>#redis默认端口6379 不用修改 port 6379</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 开启AOF持久化</span></span>\n<span class="line"><span>appendonly yes</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 开启守护进程</span></span>\n<span class="line"><span>daemonize yes</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 指定redis进程的PID文件存放位置</span></span>\n<span class="line"><span>pidfile "/home/centos/redis/redis-6.2.6/logs/redis/redis.pid"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># log文件输出位置，如果进程以守护进程的方式运行，此处又将输出文件设置为stdout的话，就会将日志信息输出到/dev/null里面去了</span></span>\n<span class="line"><span>logfile "/home/centos/redis/redis-6.2.6/logs/redis/redis.log"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 默认16个数据库</span></span>\n<span class="line"><span>databases 16</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 指定本地数据库文件名</span></span>\n<span class="line"><span>dbfilename "dump.db"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 指定本地数据问就按存放位置</span></span>\n<span class="line"><span>dir "/home/centos/redis/redis-6.2.6/logs/data"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 设置redis连接密码，如果配置了连接密码，客户端在连接redis是需要通过AUTH&lt;password&gt;命令提供密码，默认关闭</span></span>\n<span class="line"><span>requirepass "xyredis"</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 开启集群功能</span></span>\n<span class="line"><span>cluster-enabled yes</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 群集名称文件设置</span></span>\n<span class="line"><span>cluster-config-file nodes-6379.conf</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 取消注释群集超时时间设置</span></span>\n<span class="line"><span>cluster-node-timeout 15000</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.06,words:317},t:"Redis集群模式搭建",y:"a"}}],["/posts/redis/%E5%88%86%E7%89%87%E6%8A%80%E6%9C%AF.html",{loader:()=>n.e(4662).then(n.bind(n,4984)),meta:{e:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>最多1000节点</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>集群节点间使用异步复制</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.68,words:504},t:"redis 分片技术",y:"a"}}],["/posts/redis/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html",{loader:()=>n.e(6407).then(n.bind(n,9679)),meta:{e:'\n<blockquote>\n<p>哨兵的核心功能是主节点的自动故障转移</p>\n</blockquote>\n<h3>哨兵机制原理</h3>\n<ol>\n<li>哨兵之间集群建立、哨兵与主从库连接建立</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>哨兵实例之间可以相互发现，要归功于 Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制，他们共同订阅Redis的同一个频道，获取对方的IP和端口号从而建立网络连接</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>每个哨兵发送INFO给主库，收到从库列表，进而与从库建立连接</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.25,words:374},t:"哨兵机制 Redis Sendtinel",y:"a"}}],["/posts/redis/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html",{loader:()=>n.e(819).then(n.bind(n,5120)),meta:{e:'<h3>Redis入门指南</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>9 种数据类型</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>BitMap 二值状态统计的场景</span></span>\n<span class="line"><span>Stream 消息队列</span></span>\n<span class="line"><span>HyperLogLog 海量数据基数统计的场景</span></span>\n<span class="line"><span>GEO 地理位置信息</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>HSET key field value</span></span>\n<span class="line"><span>KEYS</span></span>\n<span class="line"><span>LPUSH LPOP</span></span>\n<span class="line"><span>RPUSH RPOP</span></span>\n<span class="line"><span>LLEN KEY</span></span>\n<span class="line"><span>SADD KEY member</span></span>\n<span class="line"><span>SREM KEY member</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>ZADD KEY [score member]...</span></span>\n<span class="line"><span>ZADD studend 89 tom 98 jack 76 rose</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>MULTI</span></span>\n<span class="line"><span>...</span></span>\n<span class="line"><span>EXEC</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Redis的事务还能保证一个事务内的命令依次执行而不被其他命令插入</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>开发者必须在事务执行出错后自己收拾剩下的摊子（将数据库复原回事务执行前的状态等）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Watch 命令用于监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断 (CAS)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>EXPIRE</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SORT</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SORT key ALPHA [字典排序]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SORT key DESC</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.15,words:1244},t:"Full_stack_knowledge_system",y:"a"}}],["/posts/redis/%E6%8C%81%E4%B9%85%E5%8C%96AOF%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(8290).then(n.bind(n,136)),meta:{e:'<h3>AOF(Append Only File)日志</h3>\n<h3>原理</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>执行写命令完成后会记录日志到硬盘</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.86,words:257},t:"",y:"a"}}],["/posts/redis/%E6%8C%81%E4%B9%85%E5%8C%96RDB%E5%BF%AB%E7%85%A7.html",{loader:()=>n.e(5046).then(n.bind(n,4974)),meta:{e:'\n<blockquote>\n<p>某一个瞬间的内存数据</p>\n</blockquote>\n<h3>命令</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SAVE</span></span>\n<span class="line"><span>BGSAVE</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.61,words:183},t:"RDB快照",y:"a"}}],["/posts/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{loader:()=>n.e(2450).then(n.bind(n,2772)),meta:{e:'\n<h3>各种数据类型用了哪些数据结构</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>string 简单动态字符串 SDS(simple dynamis string)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>zset 跳表 + listpack</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>hash 哈希表</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>set 整数集合 + 哈希表</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>list quicklist</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.56,words:469},t:"数据结构角度解释各种数据类型差别",y:"a"}}],["/posts/redis/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0.html",{loader:()=>n.e(489).then(n.bind(n,4205)),meta:{e:'\n<h3>过期字典</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>哈希表</span></span>\n<span class="line"><span>struct{ key,expired_timestamp }</span></span>\n<span class="line"><span>key存在过期字典之中且 system_timestamp &gt; expired_timestamp 表示已经过期</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.07,words:321},t:"Redis的过期删除和内存淘汰",y:"a"}}],["/posts/redis/%E9%AB%98%E5%8F%AF%E7%94%A8-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E8%A7%A3.html",{loader:()=>n.e(7487).then(n.bind(n,9927)),meta:{e:'\n<h3>主从复制如何执行</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>replicaof 192.168.0.1 6379</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:2.21,words:664},t:"主从复制详解",y:"a"}}],["/posts/registry/chartmuseum.html",{loader:()=>n.e(6376).then(n.bind(n,306)),meta:{c:["kubernetes"],g:["chartmuseum"],e:'\n<h3>1.docker启动单机的chart仓库服务</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --name=chartmuseum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --restart=always</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 8080:8080</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/charts:/charts</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> STORAGE=local</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> STORAGE_LOCAL_ROOTDIR=/charts</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  chartmuseum/chartmuseum:v0.12.0</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.99,words:298},t:"chartmuseum",y:"a"}}],["/posts/registry/registry.html",{loader:()=>n.e(5597).then(n.bind(n,5158)),meta:{c:["kubernetes"],g:["registry"],e:'\n<h3>1.docker单机启动镜像服务</h3>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 5005:5000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --restart=always</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry:latest</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.32,words:96},t:"registry",y:"a"}}],["/posts/restfulapi/restfulAPI.html",{loader:()=>n.e(161).then(n.bind(n,8372)),meta:{c:["restfulAPI"],g:["restfulAPI"],e:'<p><a href="https://restfulapi.net/" target="_blank" rel="noopener noreferrer">https://restfulapi.net/</a></p>\n',r:{minutes:.03,words:10},t:"",y:"a"}}],["/404.html",{loader:()=>n.e(7490).then(n.bind(n,1489)),meta:{t:""}}],["/posts/docker/",{loader:()=>n.e(5031).then(n.bind(n,2533)),meta:{t:"Docker"}}],["/posts/etcd/",{loader:()=>n.e(5129).then(n.bind(n,7824)),meta:{t:"Etcd"}}],["/posts/infoq/",{loader:()=>n.e(8510).then(n.bind(n,492)),meta:{t:"Infoq"}}],["/posts/java/",{loader:()=>n.e(7276).then(n.bind(n,1919)),meta:{t:"Java"}}],["/posts/linux/",{loader:()=>n.e(1343).then(n.bind(n,9772)),meta:{t:"Linux"}}],["/posts/loki/",{loader:()=>n.e(7078).then(n.bind(n,6009)),meta:{t:"Loki"}}],["/posts/mongodb/",{loader:()=>n.e(3355).then(n.bind(n,6053)),meta:{t:"Mongodb"}}],["/posts/mysql/",{loader:()=>n.e(3191).then(n.bind(n,5626)),meta:{t:"Mysql"}}],["/posts/network/",{loader:()=>n.e(183).then(n.bind(n,5998)),meta:{t:"Network"}}],["/posts/nginx/",{loader:()=>n.e(4741).then(n.bind(n,8076)),meta:{t:"Nginx"}}],["/posts/prometheus/",{loader:()=>n.e(4475).then(n.bind(n,5860)),meta:{t:"Prometheus"}}],["/posts/registry/",{loader:()=>n.e(4444).then(n.bind(n,5305)),meta:{t:"Registry"}}],["/posts/restfulapi/",{loader:()=>n.e(7308).then(n.bind(n,1905)),meta:{t:"Restfulapi"}}],["/category/",{loader:()=>n.e(3583).then(n.bind(n,3233)),meta:{t:"分类",I:!1}}],["/category/%E5%88%86%E5%B8%83%E5%BC%8F/",{loader:()=>n.e(7056).then(n.bind(n,6078)),meta:{t:"分布式 分类",I:!1}}],["/category/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/",{loader:()=>n.e(7927).then(n.bind(n,5238)),meta:{t:"领域驱动设计 分类",I:!1}}],["/category/docker/",{loader:()=>n.e(1360).then(n.bind(n,2570)),meta:{t:"docker 分类",I:!1}}],["/category/git/",{loader:()=>n.e(5612).then(n.bind(n,4232)),meta:{t:"git 分类",I:!1}}],["/category/etcd/",{loader:()=>n.e(2418).then(n.bind(n,5222)),meta:{t:"etcd 分类",I:!1}}],["/category/kubernetes/",{loader:()=>n.e(1628).then(n.bind(n,5736)),meta:{t:"kubernetes 分类",I:!1}}],["/category/go/",{loader:()=>n.e(918).then(n.bind(n,4118)),meta:{t:"go 分类",I:!1}}],["/category/golang/",{loader:()=>n.e(9746).then(n.bind(n,4550)),meta:{t:"golang 分类",I:!1}}],["/category/%E6%A8%B1%E6%A1%83/",{loader:()=>n.e(9080).then(n.bind(n,8961)),meta:{t:"樱桃 分类",I:!1}}],["/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",{loader:()=>n.e(8280).then(n.bind(n,3609)),meta:{t:"火龙果 分类",I:!1}}],["/category/%E6%B0%B4%E6%9E%9C/",{loader:()=>n.e(8484).then(n.bind(n,4200)),meta:{t:"水果 分类",I:!1}}],["/category/gmp/",{loader:()=>n.e(5708).then(n.bind(n,3335)),meta:{t:"gmp 分类",I:!1}}],["/category/java/",{loader:()=>n.e(8236).then(n.bind(n,1730)),meta:{t:"java 分类",I:!1}}],["/category/kafka/",{loader:()=>n.e(9630).then(n.bind(n,8292)),meta:{t:"kafka 分类",I:!1}}],["/category/linux/",{loader:()=>n.e(8654).then(n.bind(n,332)),meta:{t:"linux 分类",I:!1}}],["/category/network/",{loader:()=>n.e(150).then(n.bind(n,3942)),meta:{t:"network 分类",I:!1}}],["/category/nginx/",{loader:()=>n.e(5552).then(n.bind(n,1320)),meta:{t:"Nginx 分类",I:!1}}],["/category/prometheus/",{loader:()=>n.e(4e3).then(n.bind(n,5448)),meta:{t:"prometheus 分类",I:!1}}],["/category/restfulapi/",{loader:()=>n.e(2271).then(n.bind(n,8024)),meta:{t:"restfulAPI 分类",I:!1}}],["/tag/",{loader:()=>n.e(1797).then(n.bind(n,951)),meta:{t:"标签",I:!1}}],["/tag/cap/",{loader:()=>n.e(3154).then(n.bind(n,346)),meta:{t:"标签: CAP",I:!1}}],["/tag/cdn/",{loader:()=>n.e(3865).then(n.bind(n,2415)),meta:{t:"标签: CDN",I:!1}}],["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",{loader:()=>n.e(9198).then(n.bind(n,8277)),meta:{t:"标签: 分布式事务",I:!1}}],["/tag/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/",{loader:()=>n.e(4333).then(n.bind(n,391)),meta:{t:"标签: 架构设计",I:!1}}],["/tag/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/",{loader:()=>n.e(2653).then(n.bind(n,3654)),meta:{t:"标签: 领域驱动模型设计",I:!1}}],["/tag/docker/",{loader:()=>n.e(4446).then(n.bind(n,5384)),meta:{t:"标签: docker",I:!1}}],["/tag/git/",{loader:()=>n.e(8474).then(n.bind(n,3532)),meta:{t:"标签: git",I:!1}}],["/tag/etcd/",{loader:()=>n.e(1700).then(n.bind(n,1416)),meta:{t:"标签: etcd",I:!1}}],["/tag/network/",{loader:()=>n.e(8844).then(n.bind(n,863)),meta:{t:"标签: network",I:!1}}],["/tag/go/",{loader:()=>n.e(9236).then(n.bind(n,5065)),meta:{t:"标签: go",I:!1}}],["/tag/golang/",{loader:()=>n.e(7984).then(n.bind(n,1985)),meta:{t:"标签: golang",I:!1}}],["/tag/go%E5%8E%9F%E7%90%86/",{loader:()=>n.e(7429).then(n.bind(n,1927)),meta:{t:"标签: GO原理",I:!1}}],["/tag/%E7%BA%A2/",{loader:()=>n.e(4068).then(n.bind(n,1731)),meta:{t:"标签: 红",I:!1}}],["/tag/%E5%B0%8F/",{loader:()=>n.e(3215).then(n.bind(n,1612)),meta:{t:"标签: 小",I:!1}}],["/tag/%E5%9C%86/",{loader:()=>n.e(9048).then(n.bind(n,927)),meta:{t:"标签: 圆",I:!1}}],["/tag/%E5%A4%A7/",{loader:()=>n.e(3047).then(n.bind(n,6481)),meta:{t:"标签: 大",I:!1}}],["/tag/gmp/",{loader:()=>n.e(8754).then(n.bind(n,3605)),meta:{t:"标签: GMP",I:!1}}],["/tag/go/",{loader:()=>n.e(9236).then(n.bind(n,5065)),meta:{t:"标签: GO",I:!1}}],["/tag/golangci-lint/",{loader:()=>n.e(578).then(n.bind(n,6170)),meta:{t:"标签: golangci-lint",I:!1}}],["/tag/fmt/",{loader:()=>n.e(1150).then(n.bind(n,3437)),meta:{t:"标签: fmt",I:!1}}],["/tag/gin/",{loader:()=>n.e(428).then(n.bind(n,8177)),meta:{t:"标签: gin",I:!1}}],["/tag/mongodb/",{loader:()=>n.e(9416).then(n.bind(n,5579)),meta:{t:"标签: mongodb",I:!1}}],["/tag/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/",{loader:()=>n.e(2458).then(n.bind(n,7778)),meta:{t:"标签: 单元测试",I:!1}}],["/tag/net/",{loader:()=>n.e(5297).then(n.bind(n,2633)),meta:{t:"标签: net",I:!1}}],["/tag/java/",{loader:()=>n.e(250).then(n.bind(n,3691)),meta:{t:"标签: java",I:!1}}],["/tag/kafka%E5%8E%9F%E7%90%86/",{loader:()=>n.e(405).then(n.bind(n,3354)),meta:{t:"标签: kafka原理",I:!1}}],["/tag/kafka/",{loader:()=>n.e(8900).then(n.bind(n,7101)),meta:{t:"标签: kafka",I:!1}}],["/tag/cicd/",{loader:()=>n.e(6613).then(n.bind(n,2105)),meta:{t:"标签: cicd",I:!1}}],["/tag/dockerfile/",{loader:()=>n.e(8712).then(n.bind(n,4370)),meta:{t:"标签: dockerfile",I:!1}}],["/tag/kata/",{loader:()=>n.e(1893).then(n.bind(n,7180)),meta:{t:"标签: kata",I:!1}}],["/tag/kubernetes/",{loader:()=>n.e(2582).then(n.bind(n,8471)),meta:{t:"标签: kubernetes",I:!1}}],["/tag/runc/",{loader:()=>n.e(5256).then(n.bind(n,531)),meta:{t:"标签: runc",I:!1}}],["/tag/containerd/",{loader:()=>n.e(1963).then(n.bind(n,872)),meta:{t:"标签: containerd",I:!1}}],["/tag/kubectl/",{loader:()=>n.e(8288).then(n.bind(n,398)),meta:{t:"标签: kubectl",I:!1}}],["/tag/helm/",{loader:()=>n.e(110).then(n.bind(n,5108)),meta:{t:"标签: helm",I:!1}}],["/tag/telepresence/",{loader:()=>n.e(879).then(n.bind(n,9732)),meta:{t:"标签: telepresence",I:!1}}],["/tag/linux/",{loader:()=>n.e(4316).then(n.bind(n,5922)),meta:{t:"标签: Linux",I:!1}}],["/tag/linux/",{loader:()=>n.e(4316).then(n.bind(n,5922)),meta:{t:"标签: linux",I:!1}}],["/tag/loki/",{loader:()=>n.e(5863).then(n.bind(n,8321)),meta:{t:"标签: loki",I:!1}}],["/tag/promtail/",{loader:()=>n.e(886).then(n.bind(n,3485)),meta:{t:"标签: promtail",I:!1}}],["/tag/audit/",{loader:()=>n.e(7461).then(n.bind(n,3826)),meta:{t:"标签: audit",I:!1}}],["/tag/nginx/",{loader:()=>n.e(14).then(n.bind(n,2912)),meta:{t:"标签: Nginx",I:!1}}],["/tag/alertmanager/",{loader:()=>n.e(8327).then(n.bind(n,7856)),meta:{t:"标签: alertmanager",I:!1}}],["/tag/%E5%91%8A%E8%AD%A6/",{loader:()=>n.e(9442).then(n.bind(n,4783)),meta:{t:"标签: 告警",I:!1}}],["/tag/%E9%AB%98%E5%8F%AF%E7%94%A8/",{loader:()=>n.e(7917).then(n.bind(n,8880)),meta:{t:"标签: 高可用",I:!1}}],["/tag/prometheus/",{loader:()=>n.e(874).then(n.bind(n,1847)),meta:{t:"标签: prometheus",I:!1}}],["/tag/mybatis/",{loader:()=>n.e(3223).then(n.bind(n,5115)),meta:{t:"标签: mybatis",I:!1}}],["/tag/api/",{loader:()=>n.e(6810).then(n.bind(n,5414)),meta:{t:"标签: api",I:!1}}],["/tag/%E7%9B%91%E6%8E%A7/",{loader:()=>n.e(6390).then(n.bind(n,7512)),meta:{t:"标签: 监控",I:!1}}],["/tag/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/",{loader:()=>n.e(1665).then(n.bind(n,8534)),meta:{t:"标签: 内存分析",I:!1}}],["/tag/springboot/",{loader:()=>n.e(1159).then(n.bind(n,3821)),meta:{t:"标签: springboot",I:!1}}],["/tag/chartmuseum/",{loader:()=>n.e(3510).then(n.bind(n,4527)),meta:{t:"标签: chartmuseum",I:!1}}],["/tag/registry/",{loader:()=>n.e(3221).then(n.bind(n,4338)),meta:{t:"标签: registry",I:!1}}],["/tag/restfulapi/",{loader:()=>n.e(9593).then(n.bind(n,8811)),meta:{t:"标签: restfulAPI",I:!1}}],["/article/",{loader:()=>n.e(7511).then(n.bind(n,8010)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>n.e(7199).then(n.bind(n,353)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>n.e(5464).then(n.bind(n,4695)),meta:{t:"时间轴",I:!1}}]])},8761:(s,i,n)=>{n.d(i,{U:()=>a});const a=JSON.parse('{"base":"/","lang":"zh-CN","title":"QuickStart程序员","description":"这是一个笔记本","head":[],"locales":{}}')},6653:(s,i,n)=>{n.d(i,{K:()=>a});const a=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$FIIpFg1N2KXsU1Mc5Bl.ZuRSoDvZ4ux6YmhPq7mWafRap7WOY2O3e"]}},"author":{"name":"xuweiqiang","url":"https://weiqiangxu.github.io"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"weiqiangxu/docs","docsDir":"src","footer":"默认页脚","displayFooter":false,"blog":{"description":"一个后端开发者","intro":"/intro.html","medias":{"Email":"https://github.com/weiqiangxu","GitHub":"https://github.com/weiqiangxu","VuePressThemeHope":{"icon":"https://theme-hope-assets.vuejs.press/logo.svg","link":"https://theme-hope.vuejs.press/zh"}}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/","/posts/"],"sidebar":{"/":["",{"text":"Linux","icon":"laptop-code","prefix":"posts/linux","link":"/posts/linux/常用命令.md","children":"structure","collapsible":true,"expanded":false},{"text":"Golang","icon":"book","prefix":"posts/go/","children":"structure","collapsible":true},{"text":"Docker","icon":"book","prefix":"posts/docker/","children":"structure","collapsible":true},{"text":"网络","icon":"book","prefix":"posts/network/","children":"structure","collapsible":true},{"text":"prometheus","icon":"book","prefix":"posts/prometheus/","children":"structure","collapsible":true},{"text":"java","icon":"book","prefix":"posts/java/","children":"structure","collapsible":true},{"text":"Etcd","icon":"book","prefix":"posts/etcd/","children":"structure","collapsible":true},{"text":"Nginx","icon":"book","prefix":"posts/nginx/","children":"structure","collapsible":true},{"text":"Kubernetes","icon":"book","prefix":"posts/kubernetes/","children":"structure","collapsible":true},"intro"]}}}}')},4923:(s,i,n)=>{},8123:(s,i,n)=>{n.d(i,{v:()=>a});const a={"/posts/linux":["常用命令","磁盘分区","二进制","环境变量配置","内存对齐","内存碎片","cpu架构","float浮点数精度","磁盘扩容","堆和栈的区别","发行版和包管理工具","Linux结构组成","网卡","linux服务器ssh密钥","网络","lsof命令","rpm","uname"],"/posts/go/":["","面试题","条件编译","微服务与DDD","string底层数据结构","Security规范","代码分层实践","调试工具","读写锁实现原理","分布式链路追踪","干货满满GoModules","个人编码规范","函数调用栈","互斥锁实现原理","dragonfruit","架构搭建流程","golang交叉编译","Context源码解析","抢占式调度","GMP-协程让出抢占调度监控","请求转发","如何池化连接","如何发布包到pkg","如何命令行执行单元测试","如何配置go私有库","如何退出协程","如何优雅的依据结构体拼接URL","如何判定零值","使用range必懂的点","腾讯代码规范","监听信号","信号量","cherry","优化params是any接口","原子操作","字符串拼接性能及原理","ApiGetway设计","chan底层数据结构","Channel","defer实现原理","7.defer知识点","for和range性能比较","GC","GMP原理与调度","GMP-hello的执行过程","GMP-让出恢复创建过程","2.GPM设计思想","揭秘Build约束","golang的内存管理","goland快捷键","map底层数据结构","golang导出docker镜像","golang静态扫描和格式检查","golang生产者消费者模式","如何优雅地使用errors","golang引用传递和值传递","8.GoModules","GPM原理和调度","GRPC底层调优","log源码","map实现原理","map","middleware底层实现原理","module冲突","mongodb自定义排序","Mutex","什么是openTracing","gin-pprof","pprof基本使用","reflect的性能","runtime包","slice底层数据结构","Socket是什么","什么是stream","string","struct底层数据结构","sync.Map实现原理","什么是unary","UnitTest规范"],"/posts/docker/":["多架构镜像存储","集成gvisor","集成kata","镜像仓库搭建","私服配置","制作多架构镜像","buildx","dind","docker离线安装","分配网络给容器","双网卡实现网络隔离"],"/posts/network/":["构建VPN通讯","什么是邻居表","如何构建vxlan网络","如何使用GRE隧道通信","什么是网络命名空间","什么是网桥","什么是CNI","使用tun设备实现VPN通信","图解泛洪与广播风暴","网络基础","write_broken_pipe","什么是DHCP","DNS服务配置有哪些","ipip隧道通讯","NAT配置公网访问","tcp连接可以一直保持吗","tcp连接与抓包","tcp粘包","websocket"],"/posts/prometheus/":["本地启动prometheus服务","查看prometheus占用内存","搭建alertmanager告警服务","基于远程写同步数据prometheus集群","基于docker搭建联邦机制主从同步","简单的webhook","alertmanager的历史告警","alertmanager高可用机制","golang实现简单的指标exporter","mongodb指标采集","mybatis监控指标","node_exporter指标解析","prometheus的资源占用分析","prometheus高可用方案预研","prometheus配置解析","snapshot备份数据","springboot的mongodb指标"],"/posts/java/":["docker安装maven仓库","Java版本","制作maven包"],"/posts/etcd/":["如何实现分布式锁","Docker安装Etcd","Etcd开启SSL认证","实现服务注册和发现","Raft算法实现"],"/posts/nginx/":["会话粘性","开启SSL验证","域名指向配置"],"/posts/kubernetes/":["","安全容器","初识CRD","创建service指向外部服务","如何安装kubernetes","Kubernetes组件","创建informer","k8s集群管理相关文件","k8s上搭建MySQL主从集群","调试工具telepresence","pod日志","traefik配置ingress服务","kubernetes离线部署","linux上如何配置静态路由","如何添加node节点","网络常用的命令","用CNI给docker容器分配网络","制作镜像编译kata","制作helm包和自建Chart仓库","Chart","CI制作多架构镜像","containerd安装","/posts/kubernetes/containerd%E5%92%8Ckata_firecracker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","containerd中集成kata","CRD控制器","/posts/kubernetes/eBPF_cilium%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html","eBPF工具库","endpoints","flanne接入k8s","harbor安装和使用","iperf用法","k8s的一些插件安装","k8s的资源管理","kube-proxy设计与实现","kubeadm","kubeadm命令学习","kubectl","kubectl_command","kubernetes的ingress-nginx配置会话粘性","kubernetes基础问题","kubernetes架构设计","kubernetes容器安全","kubernetes审计日志","Nginx-Ingress安装","S3对象存储","systemctl","veth-pair和host网桥通信","veth-pair和ovs-bridge通讯"]}},2878:(s,i,n)=>{n.d(i,{P:()=>a});const a={Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}}},s=>{s.O(0,[9469,4596],(()=>s(s.s=8731))),s.O()}]);