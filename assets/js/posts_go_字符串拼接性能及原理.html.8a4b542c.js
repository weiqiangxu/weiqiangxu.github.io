"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1928],{6262:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,n]of i)s[e]=n;return s}},7268:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>t,data:()=>l});var n=s(641);const a={},t=(0,s(6262).A)(a,[["render",function(e,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="字符串拼接性能及原理" tabindex="-1"><a class="header-anchor" href="#字符串拼接性能及原理"><span>字符串拼接性能及原理</span></a></h1><h3 id="常见5种字符串拼接" tabindex="-1"><a class="header-anchor" href="#常见5种字符串拼接"><span>常见5种字符串拼接</span></a></h3><ol><li>使用 +</li><li>fmt.Sprintf</li><li>strings.Builder</li><li>bytes.Buffer</li><li>[]byte 或者 []rune</li></ol><h3 id="性能测试方式" tabindex="-1"><a class="header-anchor" href="#性能测试方式"><span>性能测试方式</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>benchmark</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="fmt-sprintf-和-是性能最低的" tabindex="-1"><a class="header-anchor" href="#fmt-sprintf-和-是性能最低的"><span>fmt.Sprintf 和 + 是性能最低的</span></a></h3><h3 id="推荐使用-strings-builder-拼接字符串" tabindex="-1"><a class="header-anchor" href="#推荐使用-strings-builder-拼接字符串"><span>推荐使用 strings.Builder 拼接字符串</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>func builderConcat(n int, str string) string {</span></span>\n<span class="line"><span>\tvar builder strings.Builder</span></span>\n<span class="line"><span>    # 预分配内存 Grow</span></span>\n<span class="line"><span>\tbuilder.Grow(n * len(str))</span></span>\n<span class="line"><span>\tfor i := 0; i &lt; n; i++ {</span></span>\n<span class="line"><span>\t\tbuilder.WriteString(str)</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\treturn builder.String()</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能背后原理" tabindex="-1"><a class="header-anchor" href="#性能背后原理"><span>性能背后原理</span></a></h3><blockquote><p>内存分配角度看问题</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>字符串在Go之中是不可变类型，拼接字符串需要开辟新内存空间 </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>使用 + 连接字符串每次申请内存空间都是刚好实际需要的空间</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>bytes.Buffer 是以倍数申请内存空间 比如 16(byte) 32(byte) 64(byte)...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="strings-builder-和-bytes-buffer-底层" tabindex="-1"><a class="header-anchor" href="#strings-builder-和-bytes-buffer-底层"><span>strings.Builder 和 bytes.Buffer 底层</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>底层都是 []byte 数组但strings直接将底层 []byte 转 string 存储而 bytes 开辟内存空间存储 string</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><a href="https://geektutu.com/post/high-performance-go.html" target="_blank" rel="noopener noreferrer">GO语言高性能编程</a></p>',14)]))}]]),l=JSON.parse('{"path":"/posts/go/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD%E5%8F%8A%E5%8E%9F%E7%90%86.html","title":"字符串拼接性能及原理","lang":"zh-CN","frontmatter":{"hide":true,"description":"字符串拼接性能及原理 常见5种字符串拼接 使用 + fmt.Sprintf strings.Builder bytes.Buffer []byte 或者 []rune 性能测试方式 fmt.Sprintf 和 + 是性能最低的 推荐使用 strings.Builder 拼接字符串 性能背后原理 内存分配角度看问题 strings.Builder 和 b...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD%E5%8F%8A%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"字符串拼接性能及原理"}],["meta",{"property":"og:description","content":"字符串拼接性能及原理 常见5种字符串拼接 使用 + fmt.Sprintf strings.Builder bytes.Buffer []byte 或者 []rune 性能测试方式 fmt.Sprintf 和 + 是性能最低的 推荐使用 strings.Builder 拼接字符串 性能背后原理 内存分配角度看问题 strings.Builder 和 b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串拼接性能及原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"常见5种字符串拼接","slug":"常见5种字符串拼接","link":"#常见5种字符串拼接","children":[]},{"level":3,"title":"性能测试方式","slug":"性能测试方式","link":"#性能测试方式","children":[]},{"level":3,"title":"fmt.Sprintf 和 + 是性能最低的","slug":"fmt-sprintf-和-是性能最低的","link":"#fmt-sprintf-和-是性能最低的","children":[]},{"level":3,"title":"推荐使用 strings.Builder 拼接字符串","slug":"推荐使用-strings-builder-拼接字符串","link":"#推荐使用-strings-builder-拼接字符串","children":[]},{"level":3,"title":"性能背后原理","slug":"性能背后原理","link":"#性能背后原理","children":[]},{"level":3,"title":"strings.Builder 和 bytes.Buffer 底层","slug":"strings-builder-和-bytes-buffer-底层","link":"#strings-builder-和-bytes-buffer-底层","children":[]}],"readingTime":{"minutes":0.75,"words":225},"filePathRelative":"posts/go/字符串拼接性能及原理.md","excerpt":"\\n<h3>常见5种字符串拼接</h3>\\n<ol>\\n<li>使用 +</li>\\n<li>fmt.Sprintf</li>\\n<li>strings.Builder</li>\\n<li>bytes.Buffer</li>\\n<li>[]byte 或者 []rune</li>\\n</ol>\\n<h3>性能测试方式</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>benchmark</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);