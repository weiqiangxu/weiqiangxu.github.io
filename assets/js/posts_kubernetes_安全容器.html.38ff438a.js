"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9939],{6262:(i,a)=>{a.A=(i,a)=>{const s=i.__vccOpts||i;for(const[i,e]of a)s[i]=e;return s}},2105:(i,a,s)=>{s.r(a),s.d(a,{comp:()=>t,data:()=>l});var e=s(641);const n={},t=(0,s(6262).A)(n,[["render",function(i,a){return(0,e.uX)(),(0,e.CE)("div",null,a[0]||(a[0]=[(0,e.Fv)('<h3 id="一、什么是安全容器" tabindex="-1"><a class="header-anchor" href="#一、什么是安全容器"><span>一、什么是安全容器</span></a></h3><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span>1.概念</span></a></h4><p>安全容器是一种为应用程序提供高度隔离和安全性的技术，它可以控制应用程序访问系统资源和数据的权限，并提供虚拟化，使应用程序能够在隔离的环境中运行。安全容器的概念最早是由 FreeBSD 操作系统的开发者 Jails 提出的，他们在 2000 年左右将这一概念引入 FreeBSD 操作系统。后来，Linux 容器技术发展起来后，安全容器概念也逐渐被引入其中。</p><h4 id="_2-kubenertes" tabindex="-1"><a class="header-anchor" href="#_2-kubenertes"><span>2.kubenertes</span></a></h4><p>目前k8s或者docker底层容器，通常是依赖于runc，而runc的资源隔离方案底层是 Linux 容器技术。它利用 Linux 内核提供的一些隔离机制，如 namespace、cgroup、seccomp等。具体来说，namespace 用于隔离应用程序的进程空间、网络、文件系统等，cgroup 用于限制应用程序的资源使用，seccomp 用于限制应用程序对系统调用的访问。runc 利用这些机制，将应用程序运行在一个隔离的环境中，从而提高应用程序的安全性和可靠性。但在实际运行中，仍是由宿主机向容器直接提供网络、存储、计算等资源，然而容器的安全性可以概括为两点： a.不会对主机造成影响。b.不会对其他容器造成影响。Docker的不安全表现在共用内核问题、Namespace还不够完善。具体表现：</p><ol><li>资源未隔离</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 容器内部输出与宿主机一致</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> free</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 看到宿主机的进程</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> top</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># /dev设备未隔离:容器内查看所有设备与宿主机一致</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果runc容器没有隔离/sys</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 那么容器内的进程可以轻易地获取主机上的内核信息，如主机的CPU或者内存信息。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 这意味着容器内的恶意进程可以利用这些信息来绕过安全控制，访问主机上的敏感资源或破坏主机的系统</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sys</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># /proc 未完全隔离</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># runc 在默认情况下不隔离 /proc，这意味着容器中的进程可以看到宿主机上的进程</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /proc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>内核模块未隔离。</p></li><li><p>SELinux、time、syslog等所有现有Namespace之外的信息都未隔离。</p></li><li><p>Root用户未隔离（如果Root用户未隔离，容器中的进程可以通过提升权限来访问宿主机中的资源）</p></li><li><p>攻击案例</p></li></ol><ul><li>CVE-2019-5736 runC 漏洞，它能让普通用户身份运行的恶意程序渗透到宿主机，修改 runC 程序，在下次创建容器时就会调用被修改的 runC，借此，攻击者可以实现任何非法目的</li></ul><h3 id="二、集成安全容器有什么价值" tabindex="-1"><a class="header-anchor" href="#二、集成安全容器有什么价值"><span>二、集成安全容器有什么价值</span></a></h3><ol><li>提升安全性：容器间完全隔离，容器内部无法访问其他容器内部资源。</li><li>提升稳定性：因为隔离的原因，容器只能影响到自身内部无法影响到其他容器以及宿主机；</li><li>更细粒度资源控制：安全容器可以提供更细粒度的资源控制，包括CPU、内存、网络等方面，从而更好地管理和控制容器的资源使用。</li><li>多租户安全保障。 云原生多租户场景下，安全容器可以防止恶意租户对 host 内核的直接攻击并大幅减少机器上其他租户的风险，从而让公有云服务变得更稳定</li></ol><h3 id="三、安全容器相关的技术有哪些" tabindex="-1"><a class="header-anchor" href="#三、安全容器相关的技术有哪些"><span>三、安全容器相关的技术有哪些</span></a></h3><ol><li>gvisor Go编写的应用程序内核、虚拟机监控程序（virtual machine monitor）、内部Runsc替代runc集成到docker、用户态的内核；</li></ol><figure><img src="/images/机器级虚拟化-性能消耗大安全性高.png" alt="机器级虚拟化-性能消耗大安全性高" tabindex="0" loading="lazy"><figcaption>机器级虚拟化-性能消耗大安全性高</figcaption></figure><figure><img src="/images/规则级别虚拟化.png" alt="规则级别虚拟化-类似runc" tabindex="0" loading="lazy"><figcaption>规则级别虚拟化-类似runc</figcaption></figure><figure><img src="/images/gvisor的虚拟化.png" alt="gvisor的虚拟化.png" tabindex="0" loading="lazy"><figcaption>gvisor的虚拟化.png</figcaption></figure><ol start="2"><li>firecracker 亚马逊AWS开源，依赖KVM，轻量级虚拟机管理器VMM，QEMU替代品，资源利用率更高，不支持所有设备类型；</li></ol><figure><img src="/images/什么是QEMU和firecraker.jpeg" alt="什么是QEMU和firecraker" tabindex="0" loading="lazy"><figcaption>什么是QEMU和firecraker</figcaption></figure><figure><img src="/images/Hypervisor是什么.gif" alt="Hypervisor是什么" tabindex="0" loading="lazy"><figcaption>Hypervisor是什么</figcaption></figure><figure><img src="/images/hypervisor的构成.gif" alt="Hypervisor的结构" tabindex="0" loading="lazy"><figcaption>Hypervisor的结构</figcaption></figure><ol start="3"><li>openeuler StratoVirt 开放原子开源基金会孵化及运营，是基于Linux内核的虚拟机（KVM）的开源轻量级虚拟化技术,轻量级的虚拟机管理器,企业级虚拟化VMM(Virtual Machine Monitor)</li></ol><figure><img src="/images/StratoVirt-arch.jpg" alt="StratoVirt架构" tabindex="0" loading="lazy"><figcaption>StratoVirt架构</figcaption></figure><figure><img src="/images/iSulad接入安全容器.png" alt="StratoVirt.iSulad接入安全容器" tabindex="0" loading="lazy"><figcaption>StratoVirt.iSulad接入安全容器</figcaption></figure><ol start="4"><li>QEMU 模拟计算机硬件的开源软件,可用作虚拟机管理器，功能齐全，成熟完善，支持所有设备</li></ol><figure><img src="/images/qemu-kvm架构图.png" alt="qemu-kvm架构图" tabindex="0" loading="lazy"><figcaption>qemu-kvm架构图</figcaption></figure><figure><img src="/images/qemu-kvm组件图.png" alt="qemu-kvm组件图" tabindex="0" loading="lazy"><figcaption>qemu-kvm组件图</figcaption></figure><ol start="5"><li>kata-containerd Intel开源项目合并,轻量级的容器运行时</li></ol><figure><img src="/images/katacontainers_traditionalvskata_diagram.jpg" alt="katacontainers和传统容器(runc)区别" tabindex="0" loading="lazy"><figcaption>katacontainers和传统容器(runc)区别</figcaption></figure><figure><img src="/images/docker和kata-runtime.png" alt="docker和kata-runtime" tabindex="0" loading="lazy"><figcaption>docker和kata-runtime</figcaption></figure><figure><img src="/images/kata与k8s.svg" alt="kata与k8s" tabindex="0" loading="lazy"><figcaption>kata与k8s</figcaption></figure><figure><img src="/images/katacontainers_architecture_diagram.jpg" alt="kata与k8s示意图" tabindex="0" loading="lazy"><figcaption>kata与k8s示意图</figcaption></figure><figure><img src="/images/katacontainers-e2e-with-bg.jpg" alt="kubelet执行create pod之后逻辑架构" tabindex="0" loading="lazy"><figcaption>kubelet执行create pod之后逻辑架构</figcaption></figure><figure><img src="/images/kata3.x-architecture.png" alt="kata3.x-架构" tabindex="0" loading="lazy"><figcaption>kata3.x-架构</figcaption></figure><figure><img src="/images/hypervisorConfigInkata-3.0.png" alt="kata3.0可选的hypervisor-config" tabindex="0" loading="lazy"><figcaption>kata3.0可选的hypervisor-config</figcaption></figure><figure><img src="/images/kata比runcs.webp" alt="kata比runcs是GuestOS虚拟化-等效于runc加硬件虚拟化和HostOS虚拟化" tabindex="0" loading="lazy"><figcaption>kata比runcs是GuestOS虚拟化-等效于runc加硬件虚拟化和HostOS虚拟化</figcaption></figure><h3 id="四、安全容器集成方案" tabindex="-1"><a class="header-anchor" href="#四、安全容器集成方案"><span>四、安全容器集成方案</span></a></h3><h4 id="_1-kata-container" tabindex="-1"><a class="header-anchor" href="#_1-kata-container"><span>1.kata-container</span></a></h4><ol><li>方案：</li></ol><ul><li>背景: Intel Clear Containers 的最佳部分与 <a href="https://github.com/hyperhq" target="_blank" rel="noopener noreferrer">Hyper.sh RunV</a>的合并；</li><li>安装方式：kata-deploy(kubectl apply)、dnf软件包管理器、Snap包管理器等</li><li>依赖：x86_64/amd64支持Intel VT-x, AMD SVM；aarch64/arm64支持ARM Hyp</li><li>虚拟机管理程序：Dragonball(内置VMM)、firecraker、qemu(默认)、cloud-hypervisor等；</li><li>集成方式：安装kata-contianer，与k8s对接支持两种CRI实现，分别是CRI-O和containerd；</li></ul><ol start="2"><li>优点</li></ol><ul><li>多租户安全保障：防止恶意租户对 host 内核的直接攻击影响其他租户；</li><li>可信&amp;不可信容器混合部署：runC容器、安全容器可以同时部署在同一个宿主机之中；</li><li>Configurable Hypervisor，支持多种虚拟机监控程序，默认支持的是qemu，也可以用firecracker、Dragonball;</li><li>社区：社区活跃，方案成熟，阿里云、蚂蚁和intel共同推动2.0架构，提升多租隔离能力及可观测性；</li><li>安装：方式多样且k8s deploy方便快捷；</li><li>集成：与k8s集成方便快捷,支持CRI-O也可以支持containerd，系统部署复杂度；</li><li>兼容性：应用兼容性好</li><li>安全性：非常可靠，使用Intel VT-x和AMD SVM等硬件虚拟化技术支持硬件级别的隔离，使用SELinux、AppArmor等安全模块实现一系列安全机制；</li></ul><ol start="3"><li>缺点</li></ol><ul><li>性能问题：由于需要额外的虚拟化层，kata-containerd的性能较runc略低。</li><li>复杂性：kata-containerd需要额外的虚拟化层，使得整个系统更加复杂，增加了管理和维护的难度。</li><li>开销：开销较大，启动速度较慢，阿里云官方文档说社区版kata需要500ms而ACK安全沙箱v2约150ms。</li><li>IO比runc慢</li></ul><h4 id="_2-gvisor" tabindex="-1"><a class="header-anchor" href="#_2-gvisor"><span>2.gvisor</span></a></h4><ol><li>方案</li></ol><ul><li>背景：gvisor是google发布的一个安全容器，底层是基于安全模块seccomp、SELinux和 AppArmor，代理系统系统调用实现安全隔离，号称合并的用户态内核和VMM的；</li><li>安装方式：与Containerd集成（containerd/config.toml和k8s.spec.runtimeClassName=gvisor）、Minikube集成；</li><li>依赖：不依赖硬件虚拟化支持（Intel的Intel VT-x技术，AMD的AMD SVM技术）不依赖kvm，可以在虚拟机上虚拟化，与runc一样依赖Namespaces\\cgroup等，只是增加了一层封装实现虚拟机模拟硬件等；</li></ul><ol start="2"><li>优点</li></ol><ul><li>用户态内核，支持虚拟机上虚拟化；</li><li>启动速度更快和占用资源更小：不需要虚拟出硬件设备、安装 Guest 操作系统；</li><li>应用执行性能上：与kata-containers不分伯仲；</li></ul><ol start="3"><li>缺点</li></ol><ul><li>代理系统调用实现隔离，当系统调用繁重时候，性能较差；</li><li>目前并未实现每个系统调用、/proc文件或/sys文件，因此可能会出现一些不兼容问题，<a href="https://gvisor.dev/docs/user_guide/compatibility/" target="_blank" rel="noopener noreferrer">通过兼容性测试的应用</a>；</li><li>稳定性风险：相对新的容器技术(初版release-20190304)，gvisor可能存在一些稳定性问题和未解决的bug，需要持续的维护和更新来保持稳定性；</li><li>系统调用密集的应用，比如重I/O或者重网络的应用，gVisor 就会因为需要频繁拦截系统调用而出现性能急剧下降.</li><li>网络IO性能更差</li></ul><h4 id="_3-在hypervisor和cri-implements做最佳选择" tabindex="-1"><a class="header-anchor" href="#_3-在hypervisor和cri-implements做最佳选择"><span>3.在hypervisor和CRI implements做最佳选择</span></a></h4><figure><img src="/images/安全容器方案.png" alt="安全容器方案" tabindex="0" loading="lazy"><figcaption>安全容器方案</figcaption></figure><h4 id="_4-kata和stratovirt集成方案如何集成" tabindex="-1"><a class="header-anchor" href="#_4-kata和stratovirt集成方案如何集成"><span>4.kata和stratoVirt集成方案如何集成</span></a></h4><h4 id="_5-kata和firecraker的性能" tabindex="-1"><a class="header-anchor" href="#_5-kata和firecraker的性能"><span>5.kata和firecraker的性能</span></a></h4><table><thead><tr><th>hypervisor</th><th>启动速度</th><th>内存消耗</th><th>IO性能</th><th>社区</th></tr></thead><tbody><tr><td>qemu</td><td>500ms <a href="https://help.aliyun.com/document_detail/160288.html" target="_blank" rel="noopener noreferrer">阿里云文档</a> 0.7s <a href="https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-assets-prod/presentation-media/kata-containers-and-gvisor-a-quantitave-comparison.pdf" target="_blank" rel="noopener noreferrer">参考</a></td><td>131MB <a href="https://mp.weixin.qq.com/s/bS2q0oZUK-TyD4T1TSRQHw" target="_blank" rel="noopener noreferrer">参考</a></td><td></td><td>03年推出7.8k</td></tr><tr><td>firecracker</td><td>125ms ,单机秒开150 microVMs</td><td>&lt;5MB <a href="https://mp.weixin.qq.com/s/bS2q0oZUK-TyD4T1TSRQHw" target="_blank" rel="noopener noreferrer">测试为3MB</a></td><td>比qemu差点</td><td>18年推出21.5k star</td></tr><tr><td>statovirt</td><td>microvm 50ms</td><td>&lt; 4MB</td><td></td><td>18年推出 98 star</td></tr><tr><td>阿里云ACK安全沙箱</td><td>150ms</td><td></td><td></td><td></td></tr><tr><td>Cloud Hypervisor</td><td>100ms</td><td>13MB</td><td></td><td>2.7k star</td></tr></tbody></table><h4 id="_6-gvisor和kata-qemu的对比" tabindex="-1"><a class="header-anchor" href="#_6-gvisor和kata-qemu的对比"><span>6.gvisor和kata+qemu的对比</span></a></h4><ol><li>Memory Footprint内存占用:kata 70mb、gvisor 20mb；</li><li>Boot time启动时间:gvisor 0.45s、shimv2+kata 0.7s；</li><li>CPU/Memory Performance CPU和内存的性能:gvisor和kata &amp; qemu 几乎一致；</li><li>IO性能:部分场景gvisor和kata&amp;qemu几乎一致，部分场景kata&amp;qemu表现更优秀；</li><li>Networking Performance网络性能:kata性能与gvisor差距明显，kata性能好非常多；</li><li>真实案例Nginx:kata的QPS能达到1.4w,gvisor的QPS是309;Transfer rate传输速率应该是12,127kb,而gvisor是255kb；</li><li>真实案例Redis之下，kata的QPS可以达到120,000,gvisor的不超过20,000;</li></ol><p>总结:</p><p>gvisor启动更快内存消耗小，是兼容性差（很多系统调用还未实现），网络IO性能表现非常差，在系统调用频繁的情况下性能非常差；</p><h4 id="_7-firecraker的性能" tabindex="-1"><a class="header-anchor" href="#_7-firecraker的性能"><span>7. firecraker的性能</span></a></h4><ol><li>Firecracker MicroVM的启动时间大约为100毫秒，而QEMU的在200毫秒以上；</li><li>Firecracker内存开销非常低，每个MicroVM约为3MB，而QEMU在131MB左右；</li><li>Firecraker的IO性能约为QEMU的1/4;</li><li>firecraker不支持所有的设备类型；</li><li>限于firecracker本身功能过于简单，因为其设计之初就是追求最少的设备、最简洁的功能，firecracker目前很多k8s的功能还不支持，比如volume、secret、configmap等。如果应用比较复杂，对运行环境的要求比较高，就只能使用qemu vm</li></ol><h4 id="_8-阿里云的安全容器性能" tabindex="-1"><a class="header-anchor" href="#_8-阿里云的安全容器性能"><span>8. 阿里云的安全容器性能</span></a></h4><ol><li>安全沙箱号称启动约150ms，而kata-container的启动时间500ms；</li></ol><h3 id="五、如何集成到k8s" tabindex="-1"><a class="header-anchor" href="#五、如何集成到k8s"><span>五、如何集成到k8s</span></a></h3><h4 id="_1-安装方式" tabindex="-1"><a class="header-anchor" href="#_1-安装方式"><span>1. 安装方式</span></a></h4><p>使用containerd集成的方式集成kata，在各个宿主机安装kata，使用runtimeClass的方式注册到k8s之中</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">RuntimeClass</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node.k8s.io/v1alpha1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">native</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    runtimeHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">runc</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">---</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">RuntimeClass</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node.k8s.io/v1alpha1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">kata-containers</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    runtimeHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">kata-containers</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>runtimeHandler对应containerd的handler</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># /etc/containerd/config.toml</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.$</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HANDLER_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 示例配置</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># /etc/containerd/config.yml</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.kata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  runtime_type = &quot;io.containerd.kata.v2&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.kata.options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ConfigPath = &quot;/opt/kata/share/defaults/kata-containers/configuration-qemu.toml&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  runtime_type = &quot;io.containerd.runc.v2&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>tips:如果各节点的运行时环境不一致，可通过scheduling限制仅调度到支持该 RuntimeClass 的节点上。如未设置 scheduling，默认所有节点均支持此 RuntimeClass</p></blockquote><h4 id="_2-如何使用" tabindex="-1"><a class="header-anchor" href="#_2-如何使用"><span>2. 如何使用</span></a></h4><p>声明式创建对象的时候，声明runtimeClass的方式创建对象</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">extensions/v1beta1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Deployment</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sandboxed-nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  replicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    matchLabels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">native-nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">native-nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      runtimeClassName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">native</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # runtimeClassName 字段选定运行时使用runc</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      containers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">containerPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">TCP</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-如何验证" tabindex="-1"><a class="header-anchor" href="#_3-如何验证"><span>3. 如何验证</span></a></h4><p>进入容器之中，执行 uname -a 查看内核，如果与宿主机不一致表示当前已经是安全容器之中</p><h3 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a"><span>Q&amp;A</span></a></h3><ol><li>runc底层原理</li></ol><ul><li>namespace 用于隔离应用程序的进程空间、网络、文件系统等</li><li>cgroup 用于限制应用程序的资源使用</li><li>seccomp 用于限制应用程序对系统调用的访问</li></ul><ol start="2"><li><p>kata+firecraker 和 kata+StratoVirt 哪个性能更好</p></li><li><p>iSula比Docker强没错，但是iSula和Containerd比呢</p></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kata就是一个OCI</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>查看kata-runtime的运行日志</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/log/messages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kata-runtime</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/log/messages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kata-runtime</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>如何查看containerd的容器消耗</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># docker 查看容器消耗的内存和CPU</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stats</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $containerdID</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>如何查看containerd当前容器列表的虚拟化方式</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># containerd 罗列容器</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ctr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>containerd运行一个容器</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行cni分配终端running后移除容器</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ctr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --runtime</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> io.containerd.kata.v2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cni</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker.io/library/busybox:latest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>journalctl查看系统服务日志</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看containerd日志</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> journalctl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ucontainerd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关资料" tabindex="-1"><a class="header-anchor" href="#相关资料"><span>相关资料</span></a></h3><ul><li><p><a href="https://firecracker-microvm.github.io/" target="_blank" rel="noopener noreferrer">https://firecracker-microvm.github.io/</a></p></li><li><p><a href="https://gvisor.dev/" target="_blank" rel="noopener noreferrer">https://gvisor.dev/</a></p></li><li><p><a href="https://katacontainers.io/" target="_blank" rel="noopener noreferrer">https://katacontainers.io/</a></p></li><li><p><a href="https://www.qemu.org/" target="_blank" rel="noopener noreferrer">https://www.qemu.org/</a></p></li><li><p><a href="https://docs.openeuler.org/zh/docs/22.03_LTS_SP1/docs/StratoVirt/%E5%AE%89%E8%A3%85StratoVirt.html" target="_blank" rel="noopener noreferrer">https://docs.openeuler.org/zh/docs/22.03_LTS_SP1/docs/StratoVirt/</a></p></li><li><p><a href="https://www.linux-kvm.org/page/Main_Page" target="_blank" rel="noopener noreferrer">https://www.linux-kvm.org/page/Main_Page</a></p></li><li><p><a href="https://libvirt.org/" target="_blank" rel="noopener noreferrer">https://libvirt.org/</a></p></li><li><p><a href="https://kubevirt.io/" target="_blank" rel="noopener noreferrer">https://kubevirt.io/</a></p></li><li><p><a href="https://selinuxproject.org/page/Main_Page" target="_blank" rel="noopener noreferrer">https://selinuxproject.org/page/Main_Page</a></p></li><li><p><a href="https://www.openeuler.org/zh/blog/wangzhigang/howToUseStratoVirt.html" target="_blank" rel="noopener noreferrer">如何安装启动StratoVirt</a></p></li><li><p><a href="https://gitee.com/openeuler/stratovirt" target="_blank" rel="noopener noreferrer">https://gitee.com/openeuler/stratovirt</a></p></li><li><p><a href="https://gitee.com/openeuler/stratovirt/blob/master/docs/design.ch.md" target="_blank" rel="noopener noreferrer">stratovirt设计</a></p></li><li><p><a href="https://rustmagazine.github.io/rust_magazine_2021/chapter_3/hw_rust_stratovirt.html" target="_blank" rel="noopener noreferrer">华为 | 基于Rust的下一代虚拟化平台-StratoVirt</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1761013" target="_blank" rel="noopener noreferrer">已有Qemu了，为什么还要StratoVirt</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/72484589" target="_blank" rel="noopener noreferrer">Qemu架构图</a></p></li><li><p><a href="https://cdn.jiwenkang.com/QEMU.html" target="_blank" rel="noopener noreferrer">KVM &amp; Qemu &amp;</a></p></li><li><p><a href="https://wiki.qemu.org/Documentation/Architecture" target="_blank" rel="noopener noreferrer">Qemu架构图</a></p></li><li><p><a href="https://github.com/kata-containers/kata-containers/blob/main/docs/hypervisors.md" target="_blank" rel="noopener noreferrer">kata如何选择hypervisors</a></p></li><li><p><a href="https://github.com/kata-containers/documentation/blob/master/design/architecture.md" target="_blank" rel="noopener noreferrer">kata博客架构图</a></p></li><li><p><a href="https://github.com/kata-containers/kata-containers/blob/main/docs/Developer-Guide.md#run-kata-containers-with-kubernetes" target="_blank" rel="noopener noreferrer">run kata containers with kubernetes</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/X2EbeQEORR3iQXXskomkBQ" target="_blank" rel="noopener noreferrer">迈向Kata 3.0|走进开箱即用的安全容器体验之旅|龙蜥技术</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/BTnZw5wiFg774RC2Qz_fsA" target="_blank" rel="noopener noreferrer">阿里云Severeless产品背后的kataContainers</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/pUVR8P1bTszB6rPzMAnV3A" target="_blank" rel="noopener noreferrer">Kata Containers 在百度智能云的应用实践</a></p></li><li><p><a href="https://www.aliyun.com/solution/security/containersecurity" target="_blank" rel="noopener noreferrer">阿里云官方文档-容器安全解决方案</a></p></li><li><p><a href="https://www.aliyun.com/solution/cloudnative/securecontainer" target="_blank" rel="noopener noreferrer">阿里云官方文档-云原生安全容器解决方案</a></p></li><li><p><a href="https://help.aliyun.com/document_detail/142151.html" target="_blank" rel="noopener noreferrer">阿里云官方文档-安全容器底层的安全沙箱（runV）容器</a></p></li><li><p><a href="https://help.aliyun.com/document_detail/160288.html" target="_blank" rel="noopener noreferrer">阿里云官方文档-ACK安全沙箱和社区KataContainers对比</a></p></li><li><p><a href="https://www.infoq.cn/article/rfs60wi3a5ba5fsonpzi" target="_blank" rel="noopener noreferrer">InfoQ-安全容器在阿里巴巴的应用和实践</a></p></li><li><p><a href="https://www.infoq.cn/article/2018/05/gvisor-container-sandbox" target="_blank" rel="noopener noreferrer">gVisor:谷歌发布的一个用于提供安全隔离的轻量级容器运行时沙箱</a></p></li><li><p><a href="https://gvisor.dev/docs/user_guide/containerd/quick_start/" target="_blank" rel="noopener noreferrer">gvisor Containerd Quick Start</a></p></li><li><p><a href="https://www.anquanke.com/post/id/224001" target="_blank" rel="noopener noreferrer">Virtio：一种Linux I/O虚拟化框架</a></p></li><li><p><a href="https://learn.archervanderwaal.com/13-%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes/09-Kubernetes%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%20(3%E8%AE%B2)/47%E4%B8%A8%E7%BB%9D%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E5%AE%89%E5%85%A8%EF%BC%9AKataContainers%E4%B8%8EgVisor.html" target="_blank" rel="noopener noreferrer">极客时间:kata-containers与gvisor实现原理</a></p></li><li><p><a href="https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-assets-prod/presentation-media/kata-containers-and-gvisor-a-quantitave-comparison.pdf" target="_blank" rel="noopener noreferrer">kata-containers官方文档：kata与gvisor性能</a></p></li><li><p><a href="https://www.infoq.cn/article/exQ3fbD02raNmTGJKdvX" target="_blank" rel="noopener noreferrer">Docker 真的要被 Kubernetes 社区剔除了吗</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/z6s4QliBHs08pVj0GQ03dw" target="_blank" rel="noopener noreferrer">docker与k8s的发展史</a></p></li><li><p><a href="https://lifeng2221dd1.gitee.io/2020/08/17/arch/" target="_blank" rel="noopener noreferrer">CRI架构图</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/bS2q0oZUK-TyD4T1TSRQHw" target="_blank" rel="noopener noreferrer">Firecracker性能标准</a></p></li><li><p><a href="https://mp.pdnews.cn/Pc/ArtInfoApi/article?id=25177366" target="_blank" rel="noopener noreferrer">Firecraker的缺点</a></p></li><li><p><a href="https://kubernetes.io/zh-cn/docs/concepts/containers/runtime-class/" target="_blank" rel="noopener noreferrer">k8s官方手册-容器运行时</a></p></li><li><p><a href="https://github.com/containerd/containerd/blob/main/docs/getting-started.md" target="_blank" rel="noopener noreferrer">github.com/containerd</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/61901608" target="_blank" rel="noopener noreferrer">zhihu/什么是 Service Mesh</a></p></li><li><p><a href="https://philcalcado.com/2017/08/03/pattern_service_mesh.html" target="_blank" rel="noopener noreferrer">PhilCalcado/Pattern: Service Mesh</a></p></li><li><p><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener noreferrer">官网运行时container-runtimes</a></p></li><li><p><a href="https://blog.csdn.net/m0_57776598/article/details/126963904" target="_blank" rel="noopener noreferrer">csdn剖析容器docker运行时-说的太细致了</a></p></li><li><p><a href="https://blog.csdn.net/yangyijun1990/article/details/108694011" target="_blank" rel="noopener noreferrer">csdn之IaaS/PaaS/SaaS/DaaS的区别-说的太好了</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/279747954" target="_blank" rel="noopener noreferrer">知乎/container之runc</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/122247284" target="_blank" rel="noopener noreferrer">从零开始入门 K8s | Kata Containers 创始人带你入门安全容器技术</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1730700" target="_blank" rel="noopener noreferrer">如何在 Kubernetes 集群中集成 Kata</a></p></li><li><p><a href="https://www.dtstack.com/bbs/article/258" target="_blank" rel="noopener noreferrer">Docker，containerd，CRI，CRI-O，OCI，runc 分不清？看这一篇就够了 - 写的太好了</a></p></li><li><p><a href="https://www.huweihuang.com/kubernetes-notes/runtime/kata/kata-container.html" target="_blank" rel="noopener noreferrer">huweihuang/Kata-container简介</a></p></li><li><p><a href="https://blog.51cto.com/u_11979904/5676073" target="_blank" rel="noopener noreferrer">kata-containd和docker集成</a></p></li><li><p><a href="https://blog.51cto.com/u_11979904/5676073" target="_blank" rel="noopener noreferrer">如何给docker添加runtime支持</a></p></li><li><p><a href="https://www.cnblogs.com/fanqisoft/p/12096904.html" target="_blank" rel="noopener noreferrer">博客园-KataContainers和Docker的集成</a></p></li><li><p><a href="https://www.qemu.org/" target="_blank" rel="noopener noreferrer">https://www.qemu.org/</a></p></li><li><p><a href="https://github.com/kata-containers/runtime/issues/935" target="_blank" rel="noopener noreferrer">sandbox interface because it conflicts with existing route</a></p></li><li><p><a href="https://www.scholat.com/vpost.html?pid=7294" target="_blank" rel="noopener noreferrer">虚拟化研究中KVM和QEMU的区别-这个图画的很哇塞哦</a></p></li><li><p><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md" target="_blank" rel="noopener noreferrer">k8s官方讲解有多少种CRI</a></p></li><li><p><a href="https://blog.51cto.com/u_15682248/5806851" target="_blank" rel="noopener noreferrer">非常细致描述kata的优势</a></p></li><li><p>容器在k8s是什么</p></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">轻量级的虚拟化技术，可以打包应用程序及其依赖项，使其更易于部署和管理</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">k8s支持多种容器运行时（Container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Runtime），包括Docker、containerd、CRI-O等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>容器运行时Container Runtime是什么意思</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>一种软件，其主要任务是负责在操作系统上启动和管理容器</span></span>\n<span class="line"><span>容器运行时通常通过调用操作系统提供的系统调用 - 来创建和管理容器</span></span>\n<span class="line"><span>一般和容器编排工具（例如Kubernetes）协同工作，实现容器的自动化部署、扩缩容等</span></span>\n<span class="line"><span>常见容器运行时有：Docker容器引擎、rkt、containerd等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Kubernetes中的容器可能会有哪些安全风险</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 容器之间共享主机系统的资源,可能会通过共享文件或进程来获取其他容器中的敏感信息</span></span>\n<span class="line"><span>2. 容器的容量限制不够严格</span></span>\n<span class="line"><span>3. 容器镜像来源不可信</span></span>\n<span class="line"><span>4. 容器网络安全风险,比如需要访问外部网络或者其他容器</span></span>\n<span class="line"><span>5. 容器数据持久化缺少加密</span></span>\n<span class="line"><span>6. Kubernetes容器默认以高权限运行，容器内进程的文件系统和主机文件系统是共享的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>模拟docker的容器A非法访问容器B的资源</li><li>NetworkNamespace是在Linux内核中实现的一种机制，用于隔离网络资源，例如网络接口、路由表和iptables规则等</li><li>kata是什么</li><li>容器逻辑上分割，物理上的资源区隔的设计是什么样的</li><li>kubernetes的安全策略，如容器隔离、网络策略、RBAC设计是什么样的</li><li>iSula是什么</li><li>iSula+StratoVirt安全容器是什么</li><li>在容器执行top命令看到宿主机进程，为什么</li><li>containerd和docker什么关系，有架构图吗</li><li>runc、cri、运行时是什么</li><li>容器网络安全是怎么样的</li><li>k8s的设计的架构图</li><li>docker架构图</li><li>Istios是第二代Service Mesh的代表</li><li>Service Mesh服务网格是一种用于解决微服务架构中服务之间通信的问题的技术</li><li>namespace和cgroups标准是什么</li><li>OCI(Open Container Initiative)(开放容器计划)是什么涉及哪些内容</li><li>Kubernetes的CRI(Container Runtime Interface)的容器运行时接口是什么意思</li><li>shim的设计:作为适配器将自身容器运行时接口适配到 Kubernetes 的 CRI 接口(dockershim就是Kubernetes对接Docker到CRI接口)</li><li>CGroup是Control Groups限制\\记录\\隔离进程组所使用的物理资源</li><li>Name Space是什么</li><li>Busy Box是什么</li><li>k3s是什么</li><li>Kernel是什么</li><li>如何添加并使用docker的runtime和查看当前docker支持的runtime</li><li>docker使用kata runtime 抛出异常 cannot program address in sandbox interface because it conflicts with existing route</li><li>Qemu是什么</li><li>KVM是什么</li><li>KVM 要求 CPU 支持虚拟化扩展，例如 Intel VT 或 AMD-V。如果您的 CPU 不支持这些扩展，则无法使用 KVM</li><li>Kata Containers如何配置使用QEMU</li><li>Kata Runtime使用Firecracker</li><li>QEMU path (/usr/bin/qemu-kvm) does not exist</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> qemu</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Fedora 和 Centos 和 ky10.aarch64是什么关系</li><li>modprobe是干嘛的</li><li>docker run --runtime kata-runtime &amp;&amp; Could not access KVM kernel module</li><li>怎么判断cpu是否支持KVM</li><li>linux的命名空间是什么</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">命名空间是Linux内核中的一个概念，它可以将不同的系统资源隔离开来，比如网络、进程空间等。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通过将容器连接到特定的网络命名空间中，可以实现容器与特定网络资源的隔离和互通</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>kata-containerd 和 kvm 是什么关系</p></li><li><p>kata-containerd 可以不依赖kvm吗</p></li><li><p>使用docker时候用的runtime是kata-runtime 但是不想依赖kvm怎么实现</p></li><li><p>kata containerd 怎么运行需要什么条件</p></li><li><p>KataContainers和Docker如何集成</p></li><li><p>kvm_intel是干嘛的</p></li><li><p>如何判断当前aarch64支持ARM Hyp</p></li><li><p>kata runtime可以不需要kvm吗，怎么实现</p></li><li><p>x86_64, amd64 Intel VT-x, AMD SVM 是什么意思</p></li><li><p>aarch64 (&quot;arm64&quot;) ARM Hyp 是什么意思</p></li><li><p>mac 怎么判断 arm64（aarch64）架构是否支持ARM Hypervisor</p></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出1表示支持虚拟化</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sysctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kern.hv_support</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>kvm 和 ARM Hypervisor什么关系</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>KVM和ARM Hypervisor都是虚拟化技术，用于在处理器上创建虚拟化环境。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>KVM是用于x86架构的开源虚拟化解决方案，而ARM Hypervisor是用于ARM架构的虚拟化解决方案。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>在ARM架构中，ARM Hypervisor被用于虚拟化环境和资源，它允许多个操作系统同时运行在单个ARM处理器上，每个操作系统都在自己的虚拟机中运行。</span></span>\n<span class="line"><span>ARM Hypervisor通过使用虚拟地址空间映射等技术来隔离不同的虚拟机之间的资源，从而保证每个虚拟机的安全性和独立性。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>与此类似，KVM也是一种虚拟化解决方案，它可以在x86架构的处理器上运行多个虚拟机，并将物理资源映射到虚拟机中。</span></span>\n<span class="line"><span>KVM通过模拟多种硬件设备，如网络适配器和存储控制器等，为虚拟机提供与物理主机相同的环境，从而保证虚拟机的稳定性和性能。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>总之，KVM和ARM Hypervisor都是虚拟化技术，它们可以在不同的架构上将物理主机资源虚拟化为多个虚拟机，并支持多个操作系统同时运行。</span></span>\n<span class="line"><span>相比于x86架构，ARM Hypervisor在ARM架构上提供了更高效和安全的虚拟化环境。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>kvm 和 Intel VT-x, AMD SVM是什么关系</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Intel VT-x和AMD SVM是虚拟化技术的硬件支持，可以使操作系统在虚拟机中以更高效率的方式运行。</span></span>\n<span class="line"><span>kvm是一种基于虚拟化技术的虚拟机监视器，可以在支持Intel VT-x或AMD SVM的处理器上运行。</span></span>\n<span class="line"><span>kvm通过硬件虚拟化技术实现虚拟化，提供更高效的虚拟化性能。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>因此，Intel VT-x和AMD SVM是支持kvm运行的基础。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>虚拟化研究中KVM和QEMU的区别</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>QEMU（Quick Emulator）是一个独立的开源虚拟机软件，纯软件的实现（处理器虚拟化、内存虚拟、虚拟设备模拟）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Qemu利用KVM提供的LibKvm应用程序接口，通过ioctl系统调用创建和运行虚拟机</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>QEMU在上层，KVM在下层</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>KVM(Kernel-based Virtual Machine)是基于虚拟化扩展（Intel VT或AMD-V）的X86硬件平台实现的Linux的全虚拟化解决方案</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>KVM是x86的东西</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>网桥是什么</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>网络设备，连接多个网络。</span></span>\n<span class="line"><span>转发不同网络之中的数据流。</span></span>\n<span class="line"><span>工作在OSI模型的第二层：数据链路层</span></span>\n<span class="line"><span>通过物理地址（MAC地址）识别网络设备来传递数据包</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>网段是什么</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>网络地址范围 (表示方式：IP地址和子网掩码)；</span></span>\n<span class="line"><span>同一网段的设备可互相通信</span></span>\n<span class="line"><span>不同网段需要路由器等设备才可痛心</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>rootfs是什么</p></li><li><p>Guest Kernel是什么</p></li><li><p>Virtio是什么</p></li><li><p>阿里巴巴的ACK是什么意思</p></li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>阿里的ACK的全称是Alibaba Cloud ACK（Alibaba Cloud Container Service for Kubernetes）。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="课题方向" tabindex="-1"><a class="header-anchor" href="#课题方向"><span>课题方向</span></a></h3><ol><li>容器哪里不安全了</li><li>目前的解决方案是什么样的</li><li>解决方案的使用怎样可达到更好的效果</li><li>一些常见的兼容性、性能测试覆盖一下</li></ol><blockquote><p>Containerd 实现了 Kubernetes 容器运行时接口 (CRI) BuildKit 是一种开源工具，它从 Dockerfile 获取指令并“构建”Docker 映像 OCI (Open Container Initiative) 开放容器计划（容器规范的开放标准） CRI (Container Runtime Interface) 容器运行时接口，定义了 Kubernetes 与容器运行时之间的接口和协议 CRI-O 是实现了CRI和OCI，实现 OCI 和 CRI，等于是containerd</p></blockquote><h3 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图"><span>架构图</span></a></h3><p><img src="/images/什么是k8s的CRI-O.png" alt="什么是k8s的CRI-O" loading="lazy"><img src="/images/早期的k8s与docker.png" alt="早期的k8s与docker" loading="lazy"><img src="/images/containerd集成cri-containerd-shim后架构图.png" alt="containerd集成cri-containerd-shim后架构图" loading="lazy"><img src="/images/docker和containerd关系.png" alt="docker和containerd关系" loading="lazy"><img src="/images/docker依赖k8s标准.png" alt="docker依赖k8s标准" loading="lazy"><img src="/images/k8s-v1.20-24分离docker-shim.png" alt="k8s-v1.20-24分离docker-shim" loading="lazy"><img src="/images/k8s-v1.20之前内置docker-shim.png" alt="k8s-v1.20之前内置docker-shim" loading="lazy"><img src="/images/k8s-v1.24之后自行安装cri-dockerd.png" alt="k8s-v1.24之后自行安装cri-dockerd" loading="lazy"><img src="/images/k8s分离docker-shim.png" alt="k8s分离docker-shim" loading="lazy"><img src="/images/k8s与docker分离的初步计划.png" alt="k8s与docker分离的初步计划" loading="lazy"><img src="/images/kubelet和containerd简化调用链过程.png" alt="kubelet和containerd简化调用链过程" loading="lazy"><img src="/images/kubelet与容器运行时.png" alt="kubelet与容器运行时" loading="lazy"><img src="/images/k8s分离docker-shim.png" alt="kubelet与cri内部结构" loading="lazy"></p><h3 id="gvisor和kata-containers都是用于提供容器运行时隔离性的开源技术选项。以下是它们各自的优缺点" tabindex="-1"><a class="header-anchor" href="#gvisor和kata-containers都是用于提供容器运行时隔离性的开源技术选项。以下是它们各自的优缺点"><span>gVisor和Kata Containers都是用于提供容器运行时隔离性的开源技术选项。以下是它们各自的优缺点：</span></a></h3><h4 id="gvisor的优点" tabindex="-1"><a class="header-anchor" href="#gvisor的优点"><span>gVisor的优点：</span></a></h4><ul><li>gVisor 使用了一个特殊的沙箱机制，可以提供更高的隔离性和安全性。</li><li>gVisor可以在Linux容器内运行，而无需对宿主机进行特殊设置。</li><li>gVisor的性能比Kata Containers更快。</li></ul><h4 id="gvisor的缺点" tabindex="-1"><a class="header-anchor" href="#gvisor的缺点"><span>gVisor的缺点：</span></a></h4><ul><li>gVisor还是一个比较新的项目，尚未被广泛测试和采用。</li><li>gVisor需要的内存和CPU资源比Kata Containers更多。</li><li>系统调用频繁的情况下gvisor的性能差</li></ul><h4 id="kata-containers的优点" tabindex="-1"><a class="header-anchor" href="#kata-containers的优点"><span>Kata Containers的优点：</span></a></h4><ul><li>Kata Containers运行在轻量级虚拟机中，可以提供与传统虚拟机相似的隔离性和安全性。</li><li>Kata Containers基于OCI标准，可以无缝地与Docker等容器工具集成。</li><li>Kata Containers比gVisor更易于部署和使用。</li><li>Kata Containers的启动时间通常在几百毫秒到一秒左右。</li></ul><h4 id="kata-containers的缺点" tabindex="-1"><a class="header-anchor" href="#kata-containers的缺点"><span>Kata Containers的缺点：</span></a></h4><ul><li>Kata Containers的启动速度比gVisor慢（但kata速度仍然非常快，通常在毫秒级别），因为它需要启动轻量级虚拟机。</li><li>由于使用了轻量级虚拟机，Kata Containers的性能比gVisor略低。</li></ul><p>需要注意的是，以上优缺点只是大概的总结，实际的情况可能会因特定的使用场景和需求而发生变化。</p>',131)]))}]]),l=JSON.parse('{"path":"/posts/kubernetes/%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8.html","title":"安全容器","lang":"zh-CN","frontmatter":{"title":"安全容器","category":["kubernetes"],"tag":["kubernetes"],"description":"一、什么是安全容器 1.概念 安全容器是一种为应用程序提供高度隔离和安全性的技术，它可以控制应用程序访问系统资源和数据的权限，并提供虚拟化，使应用程序能够在隔离的环境中运行。安全容器的概念最早是由 FreeBSD 操作系统的开发者 Jails 提出的，他们在 2000 年左右将这一概念引入 FreeBSD 操作系统。后来，Linux 容器技术发展起来后...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/kubernetes/%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"安全容器"}],["meta",{"property":"og:description","content":"一、什么是安全容器 1.概念 安全容器是一种为应用程序提供高度隔离和安全性的技术，它可以控制应用程序访问系统资源和数据的权限，并提供虚拟化，使应用程序能够在隔离的环境中运行。安全容器的概念最早是由 FreeBSD 操作系统的开发者 Jails 提出的，他们在 2000 年左右将这一概念引入 FreeBSD 操作系统。后来，Linux 容器技术发展起来后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://weiqiangxu.github.io/images/机器级虚拟化-性能消耗大安全性高.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"kubernetes"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安全容器\\",\\"image\\":[\\"https://weiqiangxu.github.io/images/机器级虚拟化-性能消耗大安全性高.png\\",\\"https://weiqiangxu.github.io/images/规则级别虚拟化.png\\",\\"https://weiqiangxu.github.io/images/gvisor的虚拟化.png\\",\\"https://weiqiangxu.github.io/images/什么是QEMU和firecraker.jpeg\\",\\"https://weiqiangxu.github.io/images/Hypervisor是什么.gif\\",\\"https://weiqiangxu.github.io/images/hypervisor的构成.gif\\",\\"https://weiqiangxu.github.io/images/StratoVirt-arch.jpg\\",\\"https://weiqiangxu.github.io/images/iSulad接入安全容器.png\\",\\"https://weiqiangxu.github.io/images/qemu-kvm架构图.png\\",\\"https://weiqiangxu.github.io/images/qemu-kvm组件图.png\\",\\"https://weiqiangxu.github.io/images/katacontainers_traditionalvskata_diagram.jpg\\",\\"https://weiqiangxu.github.io/images/docker和kata-runtime.png\\",\\"https://weiqiangxu.github.io/images/kata与k8s.svg\\",\\"https://weiqiangxu.github.io/images/katacontainers_architecture_diagram.jpg\\",\\"https://weiqiangxu.github.io/images/katacontainers-e2e-with-bg.jpg\\",\\"https://weiqiangxu.github.io/images/kata3.x-architecture.png\\",\\"https://weiqiangxu.github.io/images/hypervisorConfigInkata-3.0.png\\",\\"https://weiqiangxu.github.io/images/kata比runcs.webp\\",\\"https://weiqiangxu.github.io/images/安全容器方案.png\\",\\"https://weiqiangxu.github.io/images/什么是k8s的CRI-O.png\\",\\"https://weiqiangxu.github.io/images/早期的k8s与docker.png\\",\\"https://weiqiangxu.github.io/images/containerd集成cri-containerd-shim后架构图.png\\",\\"https://weiqiangxu.github.io/images/docker和containerd关系.png\\",\\"https://weiqiangxu.github.io/images/docker依赖k8s标准.png\\",\\"https://weiqiangxu.github.io/images/k8s-v1.20-24分离docker-shim.png\\",\\"https://weiqiangxu.github.io/images/k8s-v1.20之前内置docker-shim.png\\",\\"https://weiqiangxu.github.io/images/k8s-v1.24之后自行安装cri-dockerd.png\\",\\"https://weiqiangxu.github.io/images/k8s分离docker-shim.png\\",\\"https://weiqiangxu.github.io/images/k8s与docker分离的初步计划.png\\",\\"https://weiqiangxu.github.io/images/kubelet和containerd简化调用链过程.png\\",\\"https://weiqiangxu.github.io/images/kubelet与容器运行时.png\\",\\"https://weiqiangxu.github.io/images/k8s分离docker-shim.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、什么是安全容器","slug":"一、什么是安全容器","link":"#一、什么是安全容器","children":[]},{"level":3,"title":"二、集成安全容器有什么价值","slug":"二、集成安全容器有什么价值","link":"#二、集成安全容器有什么价值","children":[]},{"level":3,"title":"三、安全容器相关的技术有哪些","slug":"三、安全容器相关的技术有哪些","link":"#三、安全容器相关的技术有哪些","children":[]},{"level":3,"title":"四、安全容器集成方案","slug":"四、安全容器集成方案","link":"#四、安全容器集成方案","children":[]},{"level":3,"title":"五、如何集成到k8s","slug":"五、如何集成到k8s","link":"#五、如何集成到k8s","children":[]},{"level":3,"title":"Q&A","slug":"q-a","link":"#q-a","children":[]},{"level":3,"title":"相关资料","slug":"相关资料","link":"#相关资料","children":[]},{"level":3,"title":"课题方向","slug":"课题方向","link":"#课题方向","children":[]},{"level":3,"title":"架构图","slug":"架构图","link":"#架构图","children":[]},{"level":3,"title":"gVisor和Kata Containers都是用于提供容器运行时隔离性的开源技术选项。以下是它们各自的优缺点：","slug":"gvisor和kata-containers都是用于提供容器运行时隔离性的开源技术选项。以下是它们各自的优缺点","link":"#gvisor和kata-containers都是用于提供容器运行时隔离性的开源技术选项。以下是它们各自的优缺点","children":[]}],"readingTime":{"minutes":21.46,"words":6439},"filePathRelative":"posts/kubernetes/安全容器.md","excerpt":"<h3>一、什么是安全容器</h3>\\n<h4>1.概念</h4>\\n<p>安全容器是一种为应用程序提供高度隔离和安全性的技术，它可以控制应用程序访问系统资源和数据的权限，并提供虚拟化，使应用程序能够在隔离的环境中运行。安全容器的概念最早是由 FreeBSD 操作系统的开发者 Jails 提出的，他们在 2000 年左右将这一概念引入 FreeBSD 操作系统。后来，Linux 容器技术发展起来后，安全容器概念也逐渐被引入其中。</p>\\n<h4>2.kubenertes</h4>\\n<p>目前k8s或者docker底层容器，通常是依赖于runc，而runc的资源隔离方案底层是 Linux 容器技术。它利用 Linux 内核提供的一些隔离机制，如 namespace、cgroup、seccomp等。具体来说，namespace 用于隔离应用程序的进程空间、网络、文件系统等，cgroup 用于限制应用程序的资源使用，seccomp 用于限制应用程序对系统调用的访问。runc 利用这些机制，将应用程序运行在一个隔离的环境中，从而提高应用程序的安全性和可靠性。但在实际运行中，仍是由宿主机向容器直接提供网络、存储、计算等资源，然而容器的安全性可以概括为两点： a.不会对主机造成影响。b.不会对其他容器造成影响。Docker的不安全表现在共用内核问题、Namespace还不够完善。具体表现：</p>","autoDesc":true}')}}]);