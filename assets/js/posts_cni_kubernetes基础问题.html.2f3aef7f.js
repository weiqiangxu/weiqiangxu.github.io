"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8689],{6262:(s,i)=>{i.A=(s,i)=>{const n=s.__vccOpts||s;for(const[s,a]of i)n[s]=a;return n}},1251:(s,i,n)=>{n.r(i),n.d(i,{comp:()=>l,data:()=>p});var a=n(641);const e={},l=(0,n(6262).A)(e,[["render",function(s,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<blockquote><p>常见的k8s问题汇总巩固基础</p></blockquote><ol><li><p>集群的cluser ip 可以直接访问吗</p></li><li><p>network policy</p></li><li><p>describe svc的时候endpoint可以直接访问吗</p></li><li><p>host network模式</p></li><li><p>cluster级别和namespace级别</p></li><li><p>pod的ip和service的cluster ip关系</p></li><li><p>cluster ip 可以访问吗 pod的ip可以访问吗</p></li><li><p>metadata\\selector\\label\\annotations分别是干嘛的他们之间的关系是什么</p></li><li><p>k8s的cert-manager下的pod是干嘛的（证书的更新、颁发、管理）</p></li><li><p>k8s运行起来需要哪些组件（Mater组件、Node组件）</p><div class="language-s line-numbers-mode" data-highlighter="shiki" data-ext="s" data-title="s" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>要在Kubernetes上成功运行应用程序，需要部署以下组件：</span></span>\n<span class="line"><span>1. Kubernetes Master组件：</span></span>\n<span class="line"><span>  - kube-apiserver：提供Kubernetes API，并处理集群管理的核心功能。</span></span>\n<span class="line"><span>  - kube-controller-manager：负责运行控制器，监控集群状态并处理集群级别的任务。</span></span>\n<span class="line"><span>  - kube-scheduler：负责为Pod选择合适的节点进行调度。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2. Kubernetes Node组件：</span></span>\n<span class="line"><span>  - kubelet：在每个节点上运行，负责管理和执行Pod的生命周期。</span></span>\n<span class="line"><span>  - kube-proxy：负责实现Kubernetes服务的网络代理和负载均衡功能。</span></span>\n<span class="line"><span>  - 容器运行时：如Docker、containerd等，负责在节点上启动和管理容器。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>3. etcd：分布式键值存储系统，用于保存Kubernetes集群的状态和配置。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>4. Kubernetes网络插件：用于实现Pod之间和Pod与外部网络的通信，常见的插件有Calico、Flannel、Weave等。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>5. 可选组件：</span></span>\n<span class="line"><span>  - kube-dns/coredns：为集群中的服务提供DNS解析。</span></span>\n<span class="line"><span>  - Kubernetes Dashboard：提供Web界面用于管理和监控集群。</span></span>\n<span class="line"><span>  - Ingress Controller：用于处理集群中的入口流量，并将流量路由到相应的服务。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>除了以上核心组件，还可以根据需要添加其他组件和功能，如日志收集器、监控系统等。总之，以上组件是构成一个基本的Kubernetes集群所必需的组件，它们共同协作来实现容器编排和应用程序管理。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>k8s的权限管理是怎么样的</p></li><li><p>kube-proxy是干嘛的</p></li><li><p>kube-proxy的源码我应该怎么读，分哪几块理解，kube-proxy的设计是怎么样的</p></li><li><p>k8s初始运行多少个pod</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cert-manager</span></span>\n<span class="line"><span>kube-system\\csi-cephfsplugin  存储标准</span></span>\n<span class="line"><span>kube-system\\elastic-autoscaler-manager</span></span>\n<span class="line"><span>kube-systeme\\etcd</span></span>\n<span class="line"><span>kube-system\\kube-apiserver</span></span>\n<span class="line"><span>kube-system\\kube-controller-manager</span></span>\n<span class="line"><span>kube-system\\kube-flannel</span></span>\n<span class="line"><span>kube-system\\traefik</span></span>\n<span class="line"><span>kube-system\\web-kubectl</span></span>\n<span class="line"><span>kube-system\\resourcequota-webhook-manage</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行一个k8s，需要安装在宿主机的软件有哪些，比如cni插件二进制脚本需要安装在宿主机上</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在宿主机上安装和运行Kubernetes（k8s）集群，需要以下软件和工具：</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 容器运行时（Container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Runtime）：Kubernetes支持多个容器运行时，如Docker、containerd、CRI-O等。你需要在宿主机上安装所选容器运行时，并确保其能与Kubernetes集成。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kubeadm：这是一个用于部署和管理Kubernetes集群的命令行工具，需要在宿主机上进行安装。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kubelet：这是Kubernetes集群中每个节点上的主要组件，负责管理容器的生命周期和运行状态。kubeadm会自动安装和配置kubelet。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kubectl：这是Kubernetes的命令行工具，用于与集群进行交互、管理和监控。你需要在宿主机上安装kubectl。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CNI插件：CNI（Container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Interface）是Kubernetes网络模型的一部分，它定义了容器网络如何与宿主机和其他容器进行通信。你需要选择一个CNI插件，如Flannel、Calico、Weave等，并将其二进制脚本安装在宿主机上。每个节点上的CNI插件负责为容器提供网络连接。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">此外，如果你使用的是容器运行时Docker，那么你还需要在宿主机上安装Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Engine。注意，Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Engine与Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CLI是两个不同的组件，你只需要安装Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Engine。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>k8s的kubelet是一个常驻进程吗，它会和集群的哪些组件通讯，通讯的方式有哪些</p></li><li><p>k8s之中除了<code>/etc/kubernetes</code>文件夹还有哪些关于k8s的配置文件</p></li><li><p>宿主机上k8s相关的配置文件有哪些，比如/etc/kubernetes</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kubernetes的配置文件在宿主机上主要包括以下几个目录和文件：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">：这个目录包含了Kubernetes主要的配置文件，其中一些重要的文件包括：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/kubernetes/kubelet.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">：kubelet的配置文件，用于指定kubelet与Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Server通信的参数和证书信息。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/kubernetes/admin.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/kubernetes/kubeconfig</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">：Kubernetes管理员用户的配置文件，用于和Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Server进行认证和授权。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/kubernetes/bootstrap-kubelet.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">：kubelet在启动时使用的配置文件，用于节点加入集群时的认证和授权。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/kubernetes/pki</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">：存放集群的证书和密钥文件，用于内部通信的加密和身份验证。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/cni/net.d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">：此目录包含了容器网络接口（CNI）插件的配置文件，用于设置容器的网络连接和路由。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/containerd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">：这个目录包含了containerd的配置文件，containerd是Kubernetes默认的容器运行时。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/etc/docker/daemon.json</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">：如果使用Docker作为容器运行时，这个文件是Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Daemon的配置文件，可以包含Docker相关的配置参数。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">上述目录中的配置文件对于Kubernetes的正常运行和配置非常重要。在配置Kubernetes集群时，这些文件需要正确配置和管理，以确保集群的稳定性和功能的正常实现。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>k8s的权限管理是怎么样的,和cluster级别namespace级别是什么关系</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kubernetes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (k8s) 的权限管理是通过访问控制模型来实现的，主要涉及以下两个层级的权限控制：</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 级别：在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> k8s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中，集群级别的权限是指对整个集群资源的访问权限。这包括对节点、命名空间、存储卷等集群级别对象的管理权限。集群管理员负责分配和管理这些权限，并可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Role-Based</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Access</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Control</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (RBAC) 来定义集群级别的角色和角色绑定，以控制用户或服务账号对集群资源的访问权限。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 级别：命名空间是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> k8s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中用于隔离不同工作负载和资源的逻辑分区。Namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 级别的权限是指对特定命名空间内资源的访问权限。每个命名空间都可以有自己的角色和角色绑定，并且可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RBAC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来定义和管理这些权限。命名空间管理员可以控制用户或服务账号的访问权限，并限制它们只能在特定命名空间内进行操作。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">总结来说，Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 级别的权限控制集中管理对整个集群资源的访问权限，而</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 级别的权限控制更加细粒度，可以根据特定命名空间的需求对资源的访问进行限制。实际上，Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 级别的权限是作为一个基础权限，而命名空间级别的权限则是在基础权限之上进行的补充和限制。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如何查看k8s的资源cluster级别还是namespace级别</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">要查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中资源的级别，可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 命令行工具，并结合资源的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 对象来查询。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 级别资源：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看集群中的所有节点：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get nodes`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看集群中的所有命名空间：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get namespaces`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看集群中的所有存储卷：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get pv`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看集群中的所有角色：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get roles </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--all-namespaces</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看集群中的所有角色绑定：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get rolebindings </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--all-namespaces</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 级别资源：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看指定命名空间中的所有资源：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get all </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">（例如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get pods </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> default`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看指定命名空间中的所有角色：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get roles </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看指定命名空间中的所有角色绑定：`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get rolebindings </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">运行以上命令后，将根据资源的级别和命名空间的范围返回相应的结果。如果查询结果为空，则表示该级别或命名空间中没有对应的资源。****</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>k8s之中node namespace是集群级别资源，pod是namespace级别资源是吗</p></li><li><p>crd如何定义集群级别资源</p></li><li><p>k8s之中cluster级别的资源是不是无法为其分配在某一个namespace下面</p></li><li><p>ClusterRole、ClusterRoleBinding是什么，和k8s的权限有什么关系</p></li><li><p>解释一下<code>kubectl get ClusterRole</code>的结果是什么</p></li><li><p>ClusterRole指的是角色是吗，ClusterRoleBinding表示哪些对象拥有哪些角色是吗</p></li><li><p>如何更改CluserRole更改角色权限</p></li><li><p>ClusterRole指的是角色是吗，ClusterRoleBinding表示哪些对象拥有哪些角色是吗</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ClusterRole（集群角色）指的是一组权限，用于定义在整个集群中可以执行的操作.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ClusterRoleBinding（集群角色绑定）则用于将角色绑定给特定的用户、服务账号或组，并指定它们具有的权限.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>k8s的kube-proxy是常驻的吗，是必须的吗</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kube-proxy是Kubernetes中的一个核心组件，它负责处理集群内部的网络通信。kube-proxy通过实现服务发现和负载均衡来将请求转发到集群中的正确Pod。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kube-proxy通常是作为一个常驻进程运行在每个节点上的。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">它通过监视Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> API服务器中的Service和Endpoints对象的变化情况，并相应地更新本地的iptables规则或IPVS规则来实现负载均衡。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">因此，kube-proxy运行的状态对于集群的正常运行是必要的。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">总结：kube-proxy是常驻的，并且是Kubernetes集群正常运行所必需的。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>kube-proxy是以pod的形式运行还是在宿主机上常驻进程的形式运行</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">简单来说kube-proxy是监听svc和endpoint的变更，维护相关ipvs或者iptables的规则</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kube-proxy可以以pod的形式运行，也可以在宿主机上作为常驻进程运行。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在较早的Kubernetes版本中，kube-proxy是以常驻进程的形式运行在宿主机上的。它监视Kubernetes集群中的服务和端口，并将流量转发到正确的目标。这种方式需要在每个节点上单独启动和管理kube-proxy进程。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">从Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v1.14版本开始，kube-proxy可以以pod的形式运行。这个pod通常与kubelet一起运行在每个节点上，作为DaemonSet的一部分。以pod的形式运行kube-proxy可以更好地与Kubernetes的整体架构和生命周期管理集成，而且可以由Kubernetes自动进行调度和管理。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>k8s的coredns如何安装使用，是必须的吗，如何可以将baidu.com指向某一个特定的ip</p></li><li><p>ingress controller是干嘛的如何使用，跟Traefik什么关系 和<a href="https://kubernetes.github.io/ingress-nginx/deploy/" target="_blank" rel="noopener noreferrer">ingress-nginx</a>有什么关系</p></li><li><p>k8s的selector只认pod的metadata.labels是吗</p></li><li><p>k8s 的高可用如何实现的 Master 节点的高可用：包括 Kubernetes API Server、etcd 存储、Controller Manager 和 Scheduler. Node 节点的高可用：多个节点上运行相同的工作负载来实现冗余 容器的高可用：副本集 (ReplicaSet) 和水平自动扩缩容 (Horizontal Pod Autoscaling) 来确保容器的高可用性</p></li><li><p>k8s的集群的Master节点高可用是如何实现的</p></li><li><p>k8s的有状态应用有哪些，有状态指的是哪些状态 K8s（Kubernetes）的有状态应用指的是可以存储和维护数据状态的应用。与无状态应用不同，有状态应用需要保存一些持久化的数据，例如数据库中的数据、文件系统中的文件等。K8s中常见的有状态应用包括： 1. 数据库：如MySQL、PostgreSQL、MongoDB等。 2. 缓存系统：如Redis、Memcached等。 3. 文件存储系统：如Ceph、GlusterFS等。 4. 消息队列：如Kafka、RabbitMQ等。 5. 日志系统：如ELK（Elasticsearch、Logstash、Kibana）等。 6. 分布式文件系统：如HDFS（Hadoop Distributed File System）等。</p><pre><code>这些有状态应用需要在容器中持久化存储数据，以便在容器重启或迁移时能够保留数据状态。K8s提供了一些机制来支持有状态应用的持久化存储需求，例如通过持久卷（Persistent Volume）和持久卷声明（Persistent Volume Claim）来实现数据的持久化存储和动态分配。\n</code></pre></li><li><p>k8s的Controller Manager 和 Scheduler分别是干嘛的，底层逻辑是什么 Kubernetes (k8s)的Controller Manager和Scheduler是Kubernetes的两个核心组件，负责集群的自动化管理和任务调度。</p><pre><code>- Controller Manager（控制器管理器）：Kubernetes的Controller Manager负责运行各种控制器来监控集群的状态，并确保集群中期望的状态与实际状态保持一致。控制器包括Replication Controller、Deployment Controller、StatefulSet Controller、DaemonSet Controller等。Controller Manager通过定期与API服务器进行通信来获取集群状态，并根据需要创建、更新或删除相应的资源对象。\n\n- Scheduler（调度器）：Kubernetes的Scheduler负责将新的Pod（容器组）分配到集群中的节点上。调度器基于一组配置策略以及集群资源的可用性信息，选择最合适的节点来运行新的Pod。调度器将Pod绑定到目标节点，并将任务分配给相关的工作节点上的Kubelet进行处理。Scheduler会考虑节点资源利用率、节点亲和性、Pod的资源需求等因素来进行调度决策。\n\n底层逻辑如下：\n- Controller Manager的底层逻辑通过监听API服务器上的事件，根据事件触发的规则，在集群中创建、更新或删除相应的资源对象，以确保集群状态保持一致。它还通过与API服务器进行定期通信来获取集群状态，并监控资源对象的健康状态。\n- Scheduler的底层逻辑基于一组预先定义的策略，通过与API服务器进行通信获取集群状态以及每个节点的资源信息。Scheduler会评估Pod的资源需求和节点的可用资源情况，根据策略选择最合适的节点，并将Pod绑定到目标节点上。\n\n总之，Controller Manager和Scheduler是Kubernetes核心组件，负责集群的自动化管理和任务调度，保证集群状态一致性和高效资源利用。\n</code></pre></li><li><p>k8s node的状态no-ready的时候如何解决问题，如何快速刷新这个node状态</p></li><li><p>k8s的节点异常出现NodeHasSufficientMemory怎么解决</p></li></ol>',2)]))}]]),p=JSON.parse('{"path":"/posts/cni/kubernetes%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98.html","title":"kubernetes基础问题","lang":"zh-CN","frontmatter":{"title":"kubernetes基础问题","tags":["kubernetes"],"categories":["kubernetes"],"description":"常见的k8s问题汇总巩固基础 集群的cluser ip 可以直接访问吗 network policy describe svc的时候endpoint可以直接访问吗 host network模式 cluster级别和namespace级别 pod的ip和service的cluster ip关系 cluster ip 可以访问吗 pod的ip可以访问吗 m...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/cni/kubernetes%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"kubernetes基础问题"}],["meta",{"property":"og:description","content":"常见的k8s问题汇总巩固基础 集群的cluser ip 可以直接访问吗 network policy describe svc的时候endpoint可以直接访问吗 host network模式 cluster级别和namespace级别 pod的ip和service的cluster ip关系 cluster ip 可以访问吗 pod的ip可以访问吗 m..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"kubernetes"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kubernetes基础问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[],"readingTime":{"minutes":12.28,"words":3684},"filePathRelative":"posts/cni/kubernetes基础问题.md","excerpt":"<blockquote>\\n<p>常见的k8s问题汇总巩固基础</p>\\n</blockquote>\\n<ol>\\n<li>\\n<p>集群的cluser ip 可以直接访问吗</p>\\n</li>\\n<li>\\n<p>network policy</p>\\n</li>\\n<li>\\n<p>describe svc的时候endpoint可以直接访问吗</p>\\n</li>\\n<li>\\n<p>host network模式</p>\\n</li>\\n<li>\\n<p>cluster级别和namespace级别</p>\\n</li>\\n<li>\\n<p>pod的ip和service的cluster ip关系</p>\\n</li>\\n<li>\\n<p>cluster ip 可以访问吗 pod的ip可以访问吗</p>\\n</li>\\n<li>\\n<p>metadata\\\\selector\\\\label\\\\annotations分别是干嘛的他们之间的关系是什么</p>\\n</li>\\n<li>\\n<p>k8s的cert-manager下的pod是干嘛的（证书的更新、颁发、管理）</p>\\n</li>\\n<li>\\n<p>k8s运行起来需要哪些组件（Mater组件、Node组件）</p>\\n<div class=\\"language-s line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"s\\" data-title=\\"s\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>要在Kubernetes上成功运行应用程序，需要部署以下组件：</span></span>\\n<span class=\\"line\\"><span>1. Kubernetes Master组件：</span></span>\\n<span class=\\"line\\"><span>  - kube-apiserver：提供Kubernetes API，并处理集群管理的核心功能。</span></span>\\n<span class=\\"line\\"><span>  - kube-controller-manager：负责运行控制器，监控集群状态并处理集群级别的任务。</span></span>\\n<span class=\\"line\\"><span>  - kube-scheduler：负责为Pod选择合适的节点进行调度。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>2. Kubernetes Node组件：</span></span>\\n<span class=\\"line\\"><span>  - kubelet：在每个节点上运行，负责管理和执行Pod的生命周期。</span></span>\\n<span class=\\"line\\"><span>  - kube-proxy：负责实现Kubernetes服务的网络代理和负载均衡功能。</span></span>\\n<span class=\\"line\\"><span>  - 容器运行时：如Docker、containerd等，负责在节点上启动和管理容器。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>3. etcd：分布式键值存储系统，用于保存Kubernetes集群的状态和配置。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>4. Kubernetes网络插件：用于实现Pod之间和Pod与外部网络的通信，常见的插件有Calico、Flannel、Weave等。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>5. 可选组件：</span></span>\\n<span class=\\"line\\"><span>  - kube-dns/coredns：为集群中的服务提供DNS解析。</span></span>\\n<span class=\\"line\\"><span>  - Kubernetes Dashboard：提供Web界面用于管理和监控集群。</span></span>\\n<span class=\\"line\\"><span>  - Ingress Controller：用于处理集群中的入口流量，并将流量路由到相应的服务。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>除了以上核心组件，还可以根据需要添加其他组件和功能，如日志收集器、监控系统等。总之，以上组件是构成一个基本的Kubernetes集群所必需的组件，它们共同协作来实现容器编排和应用程序管理。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>k8s的权限管理是怎么样的</p>\\n</li>\\n<li>\\n<p>kube-proxy是干嘛的</p>\\n</li>\\n<li>\\n<p>kube-proxy的源码我应该怎么读，分哪几块理解，kube-proxy的设计是怎么样的</p>\\n</li>\\n<li>\\n<p>k8s初始运行多少个pod</p>\\n<div class=\\"language-txt line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"txt\\" data-title=\\"txt\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>cert-manager</span></span>\\n<span class=\\"line\\"><span>kube-system\\\\csi-cephfsplugin  存储标准</span></span>\\n<span class=\\"line\\"><span>kube-system\\\\elastic-autoscaler-manager</span></span>\\n<span class=\\"line\\"><span>kube-systeme\\\\etcd</span></span>\\n<span class=\\"line\\"><span>kube-system\\\\kube-apiserver</span></span>\\n<span class=\\"line\\"><span>kube-system\\\\kube-controller-manager</span></span>\\n<span class=\\"line\\"><span>kube-system\\\\kube-flannel</span></span>\\n<span class=\\"line\\"><span>kube-system\\\\traefik</span></span>\\n<span class=\\"line\\"><span>kube-system\\\\web-kubectl</span></span>\\n<span class=\\"line\\"><span>kube-system\\\\resourcequota-webhook-manage</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>运行一个k8s，需要安装在宿主机的软件有哪些，比如cni插件二进制脚本需要安装在宿主机上</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">在宿主机上安装和运行Kubernetes（k8s）集群，需要以下软件和工具：</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">1.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 容器运行时（Container</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Runtime）：Kubernetes支持多个容器运行时，如Docker、containerd、CRI-O等。你需要在宿主机上安装所选容器运行时，并确保其能与Kubernetes集成。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">2.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> kubeadm：这是一个用于部署和管理Kubernetes集群的命令行工具，需要在宿主机上进行安装。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">3.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> kubelet：这是Kubernetes集群中每个节点上的主要组件，负责管理容器的生命周期和运行状态。kubeadm会自动安装和配置kubelet。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">4.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> kubectl：这是Kubernetes的命令行工具，用于与集群进行交互、管理和监控。你需要在宿主机上安装kubectl。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">5.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> CNI插件：CNI（Container</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Network</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Interface）是Kubernetes网络模型的一部分，它定义了容器网络如何与宿主机和其他容器进行通信。你需要选择一个CNI插件，如Flannel、Calico、Weave等，并将其二进制脚本安装在宿主机上。每个节点上的CNI插件负责为容器提供网络连接。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">此外，如果你使用的是容器运行时Docker，那么你还需要在宿主机上安装Docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Engine。注意，Docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Engine与Docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> CLI是两个不同的组件，你只需要安装Docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Engine。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>k8s的kubelet是一个常驻进程吗，它会和集群的哪些组件通讯，通讯的方式有哪些</p>\\n</li>\\n<li>\\n<p>k8s之中除了<code>/etc/kubernetes</code>文件夹还有哪些关于k8s的配置文件</p>\\n</li>\\n<li>\\n<p>宿主机上k8s相关的配置文件有哪些，比如/etc/kubernetes</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">Kubernetes的配置文件在宿主机上主要包括以下几个目录和文件：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">1.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/kubernetes</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">：这个目录包含了Kubernetes主要的配置文件，其中一些重要的文件包括：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/kubernetes/kubelet.conf</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">：kubelet的配置文件，用于指定kubelet与Kubernetes</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> API</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Server通信的参数和证书信息。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/kubernetes/admin.conf</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">和</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/kubernetes/kubeconfig</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">：Kubernetes管理员用户的配置文件，用于和Kubernetes</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> API</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Server进行认证和授权。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/kubernetes/bootstrap-kubelet.conf</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">：kubelet在启动时使用的配置文件，用于节点加入集群时的认证和授权。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/kubernetes/pki</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">：存放集群的证书和密钥文件，用于内部通信的加密和身份验证。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">2.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/cni/net.d</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">：此目录包含了容器网络接口（CNI）插件的配置文件，用于设置容器的网络连接和路由。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">3.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/containerd</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">：这个目录包含了containerd的配置文件，containerd是Kubernetes默认的容器运行时。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">4.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">/etc/docker/daemon.json</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">：如果使用Docker作为容器运行时，这个文件是Docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Daemon的配置文件，可以包含Docker相关的配置参数。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">上述目录中的配置文件对于Kubernetes的正常运行和配置非常重要。在配置Kubernetes集群时，这些文件需要正确配置和管理，以确保集群的稳定性和功能的正常实现。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>k8s的权限管理是怎么样的,和cluster级别namespace级别是什么关系</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">Kubernetes</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (k8s) 的权限管理是通过访问控制模型来实现的，主要涉及以下两个层级的权限控制：</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">1.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Cluster</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 级别：在</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> k8s</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 中，集群级别的权限是指对整个集群资源的访问权限。这包括对节点、命名空间、存储卷等集群级别对象的管理权限。集群管理员负责分配和管理这些权限，并可以使用</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Role-Based</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Access</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Control</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (RBAC) 来定义集群级别的角色和角色绑定，以控制用户或服务账号对集群资源的访问权限。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">2.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Namespace</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 级别：命名空间是</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> k8s</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 中用于隔离不同工作负载和资源的逻辑分区。Namespace</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 级别的权限是指对特定命名空间内资源的访问权限。每个命名空间都可以有自己的角色和角色绑定，并且可以使用</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> RBAC</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 来定义和管理这些权限。命名空间管理员可以控制用户或服务账号的访问权限，并限制它们只能在特定命名空间内进行操作。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">总结来说，Cluster</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 级别的权限控制集中管理对整个集群资源的访问权限，而</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Namespace</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 级别的权限控制更加细粒度，可以根据特定命名空间的需求对资源的访问进行限制。实际上，Cluster</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 级别的权限是作为一个基础权限，而命名空间级别的权限则是在基础权限之上进行的补充和限制。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>如何查看k8s的资源cluster级别还是namespace级别</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">要查看</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Kubernetes</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 中资源的级别，可以使用</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 命令行工具，并结合资源的</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> API</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 对象来查询。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">1.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Cluster</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 级别资源：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看集群中的所有节点：`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get nodes`</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看集群中的所有命名空间：`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get namespaces`</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看集群中的所有存储卷：`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get pv`</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看集群中的所有角色：`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get roles </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">--all-namespaces</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看集群中的所有角色绑定：`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get rolebindings </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">--all-namespaces</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">2.</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> Namespace</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 级别资源：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看指定命名空间中的所有资源：`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get all </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">-n</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">namespace</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">（例如</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> `</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get pods </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">-n</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> default`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看指定命名空间中的所有角色：`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get roles </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">-n</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">namespace</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  -</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 查看指定命名空间中的所有角色绑定：`</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kubectl</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get rolebindings </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">-n</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">namespace</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">`</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">运行以上命令后，将根据资源的级别和命名空间的范围返回相应的结果。如果查询结果为空，则表示该级别或命名空间中没有对应的资源。****</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>k8s之中node  namespace是集群级别资源，pod是namespace级别资源是吗</p>\\n</li>\\n<li>\\n<p>crd如何定义集群级别资源</p>\\n</li>\\n<li>\\n<p>k8s之中cluster级别的资源是不是无法为其分配在某一个namespace下面</p>\\n</li>\\n<li>\\n<p>ClusterRole、ClusterRoleBinding是什么，和k8s的权限有什么关系</p>\\n</li>\\n<li>\\n<p>解释一下<code>kubectl get ClusterRole</code>的结果是什么</p>\\n</li>\\n<li>\\n<p>ClusterRole指的是角色是吗，ClusterRoleBinding表示哪些对象拥有哪些角色是吗</p>\\n</li>\\n<li>\\n<p>如何更改CluserRole更改角色权限</p>\\n</li>\\n<li>\\n<p>ClusterRole指的是角色是吗，ClusterRoleBinding表示哪些对象拥有哪些角色是吗</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">ClusterRole（集群角色）指的是一组权限，用于定义在整个集群中可以执行的操作.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">ClusterRoleBinding（集群角色绑定）则用于将角色绑定给特定的用户、服务账号或组，并指定它们具有的权限.</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>k8s的kube-proxy是常驻的吗，是必须的吗</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kube-proxy是Kubernetes中的一个核心组件，它负责处理集群内部的网络通信。kube-proxy通过实现服务发现和负载均衡来将请求转发到集群中的正确Pod。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kube-proxy通常是作为一个常驻进程运行在每个节点上的。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">它通过监视Kubernetes</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> API服务器中的Service和Endpoints对象的变化情况，并相应地更新本地的iptables规则或IPVS规则来实现负载均衡。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">因此，kube-proxy运行的状态对于集群的正常运行是必要的。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">总结：kube-proxy是常驻的，并且是Kubernetes集群正常运行所必需的。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>kube-proxy是以pod的形式运行还是在宿主机上常驻进程的形式运行</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">简单来说kube-proxy是监听svc和endpoint的变更，维护相关ipvs或者iptables的规则</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">kube-proxy可以以pod的形式运行，也可以在宿主机上作为常驻进程运行。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">在较早的Kubernetes版本中，kube-proxy是以常驻进程的形式运行在宿主机上的。它监视Kubernetes集群中的服务和端口，并将流量转发到正确的目标。这种方式需要在每个节点上单独启动和管理kube-proxy进程。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">从Kubernetes</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> v1.14版本开始，kube-proxy可以以pod的形式运行。这个pod通常与kubelet一起运行在每个节点上，作为DaemonSet的一部分。以pod的形式运行kube-proxy可以更好地与Kubernetes的整体架构和生命周期管理集成，而且可以由Kubernetes自动进行调度和管理。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>k8s的coredns如何安装使用，是必须的吗，如何可以将baidu.com指向某一个特定的ip</p>\\n</li>\\n<li>\\n<p>ingress controller是干嘛的如何使用，跟Traefik什么关系 和<a href=\\"https://kubernetes.github.io/ingress-nginx/deploy/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ingress-nginx</a>有什么关系</p>\\n</li>\\n<li>\\n<p>k8s的selector只认pod的metadata.labels是吗</p>\\n</li>\\n<li>\\n<p>k8s 的高可用如何实现的\\nMaster 节点的高可用：包括 Kubernetes API Server、etcd 存储、Controller Manager 和 Scheduler.\\nNode 节点的高可用：多个节点上运行相同的工作负载来实现冗余\\n容器的高可用：副本集 (ReplicaSet) 和水平自动扩缩容 (Horizontal Pod Autoscaling) 来确保容器的高可用性</p>\\n</li>\\n<li>\\n<p>k8s的集群的Master节点高可用是如何实现的</p>\\n</li>\\n<li>\\n<p>k8s的有状态应用有哪些，有状态指的是哪些状态\\nK8s（Kubernetes）的有状态应用指的是可以存储和维护数据状态的应用。与无状态应用不同，有状态应用需要保存一些持久化的数据，例如数据库中的数据、文件系统中的文件等。K8s中常见的有状态应用包括：\\n1. 数据库：如MySQL、PostgreSQL、MongoDB等。\\n2. 缓存系统：如Redis、Memcached等。\\n3. 文件存储系统：如Ceph、GlusterFS等。\\n4. 消息队列：如Kafka、RabbitMQ等。\\n5. 日志系统：如ELK（Elasticsearch、Logstash、Kibana）等。\\n6. 分布式文件系统：如HDFS（Hadoop Distributed File System）等。</p>\\n<pre><code>这些有状态应用需要在容器中持久化存储数据，以便在容器重启或迁移时能够保留数据状态。K8s提供了一些机制来支持有状态应用的持久化存储需求，例如通过持久卷（Persistent Volume）和持久卷声明（Persistent Volume Claim）来实现数据的持久化存储和动态分配。\\n</code></pre>\\n</li>\\n<li>\\n<p>k8s的Controller Manager 和 Scheduler分别是干嘛的，底层逻辑是什么\\nKubernetes (k8s)的Controller Manager和Scheduler是Kubernetes的两个核心组件，负责集群的自动化管理和任务调度。</p>\\n<pre><code>- Controller Manager（控制器管理器）：Kubernetes的Controller Manager负责运行各种控制器来监控集群的状态，并确保集群中期望的状态与实际状态保持一致。控制器包括Replication Controller、Deployment Controller、StatefulSet Controller、DaemonSet Controller等。Controller Manager通过定期与API服务器进行通信来获取集群状态，并根据需要创建、更新或删除相应的资源对象。\\n\\n- Scheduler（调度器）：Kubernetes的Scheduler负责将新的Pod（容器组）分配到集群中的节点上。调度器基于一组配置策略以及集群资源的可用性信息，选择最合适的节点来运行新的Pod。调度器将Pod绑定到目标节点，并将任务分配给相关的工作节点上的Kubelet进行处理。Scheduler会考虑节点资源利用率、节点亲和性、Pod的资源需求等因素来进行调度决策。\\n\\n底层逻辑如下：\\n- Controller Manager的底层逻辑通过监听API服务器上的事件，根据事件触发的规则，在集群中创建、更新或删除相应的资源对象，以确保集群状态保持一致。它还通过与API服务器进行定期通信来获取集群状态，并监控资源对象的健康状态。\\n- Scheduler的底层逻辑基于一组预先定义的策略，通过与API服务器进行通信获取集群状态以及每个节点的资源信息。Scheduler会评估Pod的资源需求和节点的可用资源情况，根据策略选择最合适的节点，并将Pod绑定到目标节点上。\\n\\n总之，Controller Manager和Scheduler是Kubernetes核心组件，负责集群的自动化管理和任务调度，保证集群状态一致性和高效资源利用。\\n</code></pre>\\n</li>\\n<li>\\n<p>k8s node的状态no-ready的时候如何解决问题，如何快速刷新这个node状态</p>\\n</li>\\n<li>\\n<p>k8s的节点异常出现NodeHasSufficientMemory怎么解决</p>\\n</li>\\n</ol>","autoDesc":true}')}}]);