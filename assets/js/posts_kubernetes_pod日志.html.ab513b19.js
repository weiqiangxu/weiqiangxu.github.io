"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4652],{6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},4321:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>t});var e=a(641);const n={},l=(0,a(6262).A)(n,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,i[0]||(i[0]=[(0,e.Fv)('<p>https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/logging/ https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands</p><p>集群级日志其实就是pod日志，每个pod的启动退出，会往容器的标准输出写日志，这个标准输出也会被写到宿主机上的/var/log路径，这个日志可以在/var/log路径查看。</p><ol><li>应用日志(如果发生容器崩溃、Pod 被逐出或节点宕机等情况，你可能想访问应用日志)</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> logs</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> ${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">contianer_name</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> logs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> counter</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Pod 写入 40 MiB 的日志，并且 kubelet 在 10 MiB 之后轮转日志， 则运行 kubectl logs 将最多返回 10 MiB 的数据</p></blockquote><p>上面这几句话一堆的我就总结出一句：kubectl logs可以查看容器日志（这个日志来源和进入容器内的查看的标准输出一致）,并且kubelet logs受限于日志轮转</p><p>如果想看其他的日志比如linux宿主机上的Systemd管理的进程的日志，那么通过journalctl去查看</p><p>journalctl -u kubelet</p><p>如果 systemd 不存在，kubelet 和容器运行时将写入到 /var/log 目录中的 .log 文件</p><ol start="2"><li>组件</li></ol><ul><li>运行在linux上的进程，如果用systemd管理的进程，那么查看日志的方式journalctl</li><li>Pod 中运行的 Kubernetes 集群组件，其日志会写入 /var/log 目录中的文件</li></ul><ol start="3"><li>审计</li></ol><p>https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/audit/</p><ol start="4"><li>日志解决方案之边车容器，参考 <a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/logging/#%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E8%BE%B9%E8%BD%A6%E5%AE%B9%E5%99%A8" target="_blank" rel="noopener noreferrer">传输数据流的边车容器</a></li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">apiVersion:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kind:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Pod</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">metadata:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> counter</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spec:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  containers:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> busybox:1.28</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> varlog</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      mountPath:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/log</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count-log-1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> varlog</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      mountPath:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/log</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count-log-2</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> varlog</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      mountPath:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/log</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  volumes:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 以上3个容器访问的/var/log指向同一个存储位置</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> varlog</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    emptyDir:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>节点级代理 - 每个节点都有一个代理，使用daemonSet实现</li></ol><ul><li>stdout 和 stderr 传输流（还有stdin）有什么区别</li></ul><ol><li>当一个用户进程被创建的时候，系统会自动为该进程创建三个数据流，分别是标准输出、标准输入和标准错误，分别用stdout, stdin, stderr来表示.</li><li>stderr / stdin / stdout 分别指向与标准错误流 / 标准输入流 / 标准输出流相关联的 FILE 对象;</li><li>对于应用层来说，stdin / stdout / stderr 实际上就是在程序开始运行时被默认打开的文件而已，跟你自己用 fopen()/open() 去打开一个文件没有区别(本质是个设备文件)。</li><li>区别在于stdout（标准输出），输出方式是行缓冲。输出的字符会先存放在缓冲区，等按下回车键时才进行实际的I/O操作，stderr（标准出错），是不带缓冲的，这使得出错信息可以直接尽快地显示出来。</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/std</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>外挂的volumn可以是一个所有节点的容器都可以访问的 namespace下面的pod一样的吗</li><li>外挂的volumn可以不是一个固定的宿主机上面的path对吧</li><li>kubectl logs 查看日志原理</li><li>kubectl logs 可以查看所有日志吗</li></ul>',20)]))}]]),t=JSON.parse('{"path":"/posts/kubernetes/pod%E6%97%A5%E5%BF%97.html","title":"集群级日志","lang":"zh-CN","frontmatter":{"title":"集群级日志","hide":true,"excerpt":"如何查看集群级别日志，如何通过kubectl查看，并且kubelet更改存档配置，轮转配置是什么，存储路径是什么","description":"https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/logging/ https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands 集群级日志其实就是pod日志，每个pod的启动退出，会往容器的...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/kubernetes/pod%E6%97%A5%E5%BF%97.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"集群级日志"}],["meta",{"property":"og:description","content":"https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/logging/ https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands 集群级日志其实就是pod日志，每个pod的启动退出，会往容器的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集群级日志\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[],"readingTime":{"minutes":2.78,"words":835},"filePathRelative":"posts/kubernetes/pod日志.md","autoDesc":true}')}}]);