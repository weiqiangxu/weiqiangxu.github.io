"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1761],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},3343:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var n=a(641);const l={},e=(0,a(6262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配"><span>内存分配</span></a></h1><h3 id="一、堆内存里面是分块的" tabindex="-1"><a class="header-anchor" href="#一、堆内存里面是分块的"><span>一、堆内存里面是分块的</span></a></h3><ul><li>Arena Runtime将堆内存划分为一个个的arena（每个64MB）。物理存储内存。</li><li>Page 每个Arena包含8192个page，每个page大小8kb。物理存储内存。</li><li>Span go语言特定内存管理单位。多个连续Page之间按照不同大小规格划分出逻辑上的Span（链表）。</li></ul><h3 id="二、程序请求内存的时候直接从预置的大小规格拿出来的" tabindex="-1"><a class="header-anchor" href="#二、程序请求内存的时候直接从预置的大小规格拿出来的"><span>二、程序请求内存的时候直接从预置的大小规格拿出来的</span></a></h3><p>程序请求分配内存的时候，有大有小，为了降低碎片化内存带来的不良影响（空间浪费），采用Tcmalloc内存分配器类似的算法。Tcmalloc内存分配器类似的算法指的是将内存页按照预置的大小规格划分成多块(Span)(用链表记录)，程序请求内存时候，直接将匹配的大小规格的给过去（67种规格 8*8 bit (8字节)-32kb）。</p><h3 id="三、底层的runtime的数据结构" tabindex="-1"><a class="header-anchor" href="#三、底层的runtime的数据结构"><span>三、底层的runtime的数据结构</span></a></h3><ol><li>mheap</li></ol><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// mheap.go</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 管理所有推内存</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 主堆内存分配器。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> mheap</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t_</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NotInHeap</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    central</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">numSpanClasses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // mcentral数组</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 1个mcentral映射1个mspan</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // mcentral记录是否需要GC扫描、是否已经清扫</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t\tmcentral</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> mcentral</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> mcentral</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tspanclass</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> spanClass</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>heapArena</li></ol><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// mheap.go</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 对应1个arena的管理信息</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> heapArena</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t_</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NotInHeap</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // pageMarks是一个位图</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 在标记期间,写入是原子性的操作,读取是非原子性且无锁</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t//</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// 这用于快速找到可以被释放的整个跨度Span</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tpageMarks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">pagesPerArena</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint8</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>mspan</li></ol><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// mheap.go</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 对应1个span的管理信息</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> mspan</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t_</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    sys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NotInHeap</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不管堆内存还是栈内存都是mspan只不状态不同</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> mSpanState</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint8</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tmSpanDead</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">   mSpanState</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> iota</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tmSpanInUse</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             // 堆内存 allocated for garbage collected heap</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tmSpanManual</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 栈内存 allocated for manual management (e.g., stack allocator)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>程序申请内存，本质是P从mheap之中拿内存，这里因为避免多个P之间频繁加锁避免竞争，设计了mcache也就是P的本地缓存，P在本地找不到才会去mcentral拿到本地花。</li></ul>',13)]))}]]),t=JSON.parse('{"path":"/posts/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html","title":"内存分配","lang":"zh-CN","frontmatter":{"description":"内存分配 一、堆内存里面是分块的 Arena Runtime将堆内存划分为一个个的arena（每个64MB）。物理存储内存。 Page 每个Arena包含8192个page，每个page大小8kb。物理存储内存。 Span go语言特定内存管理单位。多个连续Page之间按照不同大小规格划分出逻辑上的Span（链表）。 二、程序请求内存的时候直接从预置的...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"内存分配"}],["meta",{"property":"og:description","content":"内存分配 一、堆内存里面是分块的 Arena Runtime将堆内存划分为一个个的arena（每个64MB）。物理存储内存。 Page 每个Arena包含8192个page，每个page大小8kb。物理存储内存。 Span go语言特定内存管理单位。多个连续Page之间按照不同大小规格划分出逻辑上的Span（链表）。 二、程序请求内存的时候直接从预置的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存分配\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、堆内存里面是分块的","slug":"一、堆内存里面是分块的","link":"#一、堆内存里面是分块的","children":[]},{"level":3,"title":"二、程序请求内存的时候直接从预置的大小规格拿出来的","slug":"二、程序请求内存的时候直接从预置的大小规格拿出来的","link":"#二、程序请求内存的时候直接从预置的大小规格拿出来的","children":[]},{"level":3,"title":"三、底层的runtime的数据结构","slug":"三、底层的runtime的数据结构","link":"#三、底层的runtime的数据结构","children":[]}],"readingTime":{"minutes":1.77,"words":532},"filePathRelative":"posts/go/内存分配.md","excerpt":"\\n<h3>一、堆内存里面是分块的</h3>\\n<ul>\\n<li>Arena\\nRuntime将堆内存划分为一个个的arena（每个64MB）。物理存储内存。</li>\\n<li>Page\\n每个Arena包含8192个page，每个page大小8kb。物理存储内存。</li>\\n<li>Span\\ngo语言特定内存管理单位。多个连续Page之间按照不同大小规格划分出逻辑上的Span（链表）。</li>\\n</ul>\\n<h3>二、程序请求内存的时候直接从预置的大小规格拿出来的</h3>\\n<p>程序请求分配内存的时候，有大有小，为了降低碎片化内存带来的不良影响（空间浪费），采用Tcmalloc内存分配器类似的算法。Tcmalloc内存分配器类似的算法指的是将内存页按照预置的大小规格划分成多块(Span)(用链表记录)，程序请求内存时候，直接将匹配的大小规格的给过去（67种规格 8*8 bit (8字节)-32kb）。</p>","autoDesc":true}')}}]);