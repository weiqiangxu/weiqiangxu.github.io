"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1155],{6262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,i]of n)a[s]=i;return a}},5685:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>p,data:()=>l});var i=a(641);const e={},p=(0,a(6262).A)(e,[["render",function(s,n){return(0,i.uX)(),(0,i.CE)("div",null,n[0]||(n[0]=[(0,i.Fv)('<ol><li>工具库</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github.com/cilium/ebpf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><a href="https://pkg.go.dev/github.com/cilium/ebpf" target="_blank" rel="noopener noreferrer">https://pkg.go.dev/github.com/cilium/ebpf</a></p><ol start="2"><li>示例</li></ol><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package ebpf_example</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import (</span></span>\n<span class="line"><span>\t&quot;context&quot;</span></span>\n<span class="line"><span>\t&quot;fmt&quot;</span></span>\n<span class="line"><span>\t&quot;github.com/cilium/ebpf&quot;</span></span>\n<span class="line"><span>\t&quot;github.com/rodaine/table&quot;</span></span>\n<span class="line"><span>\t&quot;golang.org/x/sys/unix&quot;</span></span>\n<span class="line"><span>\t&quot;os&quot;</span></span>\n<span class="line"><span>\t&quot;unsafe&quot;</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const (</span></span>\n<span class="line"><span>\tNodeMapName       = &quot;my_node&quot;</span></span>\n<span class="line"><span>\tNodeMapMaxEntries = 65536</span></span>\n<span class="line"><span>\tMapRoot           = &quot;/sys/fs/bpf/tc/globals/&quot;</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>type NodeMap struct {</span></span>\n<span class="line"><span>\t*ebpf.Map</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func NewNodeMap() *NodeMap {</span></span>\n<span class="line"><span>\treturn &amp;NodeMap{}</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>type NodeMapKey struct {</span></span>\n<span class="line"><span>\tNodeId uint32  `align:&quot;node_id&quot;`</span></span>\n<span class="line"><span>\tType   AuxType `align:&quot;type&quot;`</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>type NodeMapValue struct {</span></span>\n<span class="line"><span>\tValue1 uint32 `align:&quot;value1&quot;`</span></span>\n<span class="line"><span>\tValue2 uint32 `align:&quot;value2&quot;`</span></span>\n<span class="line"><span>\tValue3 uint64 `align:&quot;value3&quot;`</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// GetBaseHashMapSpec 获取bpf spec对象</span></span>\n<span class="line"><span>func GetBaseHashMapSpec(name string, keySize uint32, valueSize uint32, maxEntries uint32) *ebpf.MapSpec {</span></span>\n<span class="line"><span>\tspec := &amp;ebpf.MapSpec{</span></span>\n<span class="line"><span>\t\tName:       name,</span></span>\n<span class="line"><span>\t\tType:       ebpf.Hash,</span></span>\n<span class="line"><span>\t\tMaxEntries: maxEntries,</span></span>\n<span class="line"><span>\t\tFlags:      unix.BPF_F_NO_PREALLOC,</span></span>\n<span class="line"><span>\t\tKeySize:    keySize,</span></span>\n<span class="line"><span>\t\tPinning:    ebpf.PinByName,</span></span>\n<span class="line"><span>\t\tValueSize:  valueSize,</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\tif spec.Type == ebpf.HashOfMaps {</span></span>\n<span class="line"><span>\t\tspec.InnerMap = nil</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\treturn spec</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func NewBpfMap(spec *ebpf.MapSpec) (*ebpf.Map, error) {</span></span>\n<span class="line"><span>\t//check root dir</span></span>\n<span class="line"><span>\tif _, err := os.Stat(MapRoot); os.IsNotExist(err) {</span></span>\n<span class="line"><span>\t\tif err := os.MkdirAll(MapRoot, 0755); err != nil {</span></span>\n<span class="line"><span>\t\t\treturn nil, fmt.Errorf(&quot;create bpf map directory fail: %s&quot;, err)</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t//check map exist</span></span>\n<span class="line"><span>\tfilePath := MapRoot + spec.Name</span></span>\n<span class="line"><span>\tisExist := true</span></span>\n<span class="line"><span>\tif _, err := os.Stat(filePath); os.IsNotExist(err) {</span></span>\n<span class="line"><span>\t\tisExist = false</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t//create map</span></span>\n<span class="line"><span>\tvar ebpfMap *ebpf.Map</span></span>\n<span class="line"><span>\tvar err error</span></span>\n<span class="line"><span>\tif !isExist {</span></span>\n<span class="line"><span>\t\tebpfMap, err = ebpf.NewMapWithOptions(spec, ebpf.MapOptions{PinPath: MapRoot})</span></span>\n<span class="line"><span>\t\tif err != nil {</span></span>\n<span class="line"><span>\t\t\treturn nil, err</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t} else {</span></span>\n<span class="line"><span>\t\tebpfMap, err = ebpf.LoadPinnedMap(filePath, nil)</span></span>\n<span class="line"><span>\t\tif err != nil {</span></span>\n<span class="line"><span>\t\t\treturn nil, err</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\treturn ebpfMap, nil</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func (m *NodeMap) InitMap() error {</span></span>\n<span class="line"><span>\tkeySize := uint32(unsafe.Sizeof(NodeMapKey{}))</span></span>\n<span class="line"><span>\tvalueSize := uint32(unsafe.Sizeof(NodeMapValue{}))</span></span>\n<span class="line"><span>\tmapSpc := GetBaseHashMapSpec(NodeMapName, keySize, valueSize, NodeMapMaxEntries)</span></span>\n<span class="line"><span>\tbm, err := NewBpfMap(mapSpc)</span></span>\n<span class="line"><span>\tif err != nil {</span></span>\n<span class="line"><span>\t\treturn err</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\tm.Map = bm</span></span>\n<span class="line"><span>\treturn nil</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func (m *NodeMap) Start(ctx context.Context) error {</span></span>\n<span class="line"><span>\treturn nil</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>type AuxType uint32</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const (</span></span>\n<span class="line"><span>\tDhcpRelayDev AuxType = 0 // 节点上的dhcp_relay设备</span></span>\n<span class="line"><span>\tBroadcastDev AuxType = 1 // 节点上的b cast设备</span></span>\n<span class="line"><span>\tMulticastDev AuxType = 2 // 节点上的m cast设备</span></span>\n<span class="line"><span>\tRouterDev    AuxType = 3 // 节点上的router设备</span></span>\n<span class="line"><span>\tMirrorDev    AuxType = 4 // 节点上的mirror设备</span></span>\n<span class="line"><span>\tMirrorIp     AuxType = 5 // 节点提供的mirror IP</span></span>\n<span class="line"><span>\tInnerIp      AuxType = 6 // 节点提供的内部通信的IP（东西口IP）</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func (m *NodeMap) Insert(nodeId uint32, typ AuxType, value1 uint32, value2 uint32, value3 uint64) error {</span></span>\n<span class="line"><span>\tkey := NodeMapKey{NodeId: nodeId, Type: typ}</span></span>\n<span class="line"><span>\tval := NodeMapValue{Value1: value1, Value2: value2, Value3: value3}</span></span>\n<span class="line"><span>\terr := m.Map.Put(key, val)</span></span>\n<span class="line"><span>\tif err != nil {</span></span>\n<span class="line"><span>\t\treturn err</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\treturn nil</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func (m *NodeMap) Delete(nodeId uint32, typ AuxType) error {</span></span>\n<span class="line"><span>\tkey := NodeMapKey{NodeId: nodeId, Type: typ}</span></span>\n<span class="line"><span>\terr := m.Map.Delete(key)</span></span>\n<span class="line"><span>\tif err != nil {</span></span>\n<span class="line"><span>\t\treturn err</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\treturn nil</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func (m *NodeMap) Dump() {</span></span>\n<span class="line"><span>\titerator := m.Iterate()</span></span>\n<span class="line"><span>\ttbl := table.New(&quot;node_id&quot;, &quot;key_type&quot;, &quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;)</span></span>\n<span class="line"><span>\tfor {</span></span>\n<span class="line"><span>\t\tvar key NodeMapKey</span></span>\n<span class="line"><span>\t\tvar value NodeMapValue</span></span>\n<span class="line"><span>\t\tif !iterator.Next(&amp;key, &amp;value) {</span></span>\n<span class="line"><span>\t\t\tbreak</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t\ttbl.AddRow(key.NodeId, key.Type, value.Value1, value.Value2, value.Value3)</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\ttbl.Print()</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package ebpf_example</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import (</span></span>\n<span class="line"><span>\t&quot;github.com/cilium/ebpf&quot;</span></span>\n<span class="line"><span>\t&quot;github.com/cilium/ebpf/rlimit&quot;</span></span>\n<span class="line"><span>\t&quot;testing&quot;</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func TestNodeMap_Insert(t *testing.T) {</span></span>\n<span class="line"><span>\tif err := rlimit.RemoveMemlock(); err != nil {</span></span>\n<span class="line"><span>\t\tt.Fatal(err)</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\tm := NewNodeMap()</span></span>\n<span class="line"><span>\te := m.InitMap()</span></span>\n<span class="line"><span>\tif e != nil {</span></span>\n<span class="line"><span>\t\tt.Fatal(e)</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\ttype fields struct {</span></span>\n<span class="line"><span>\t\tMap *ebpf.Map</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\ttype args struct {</span></span>\n<span class="line"><span>\t\tnodeId uint32</span></span>\n<span class="line"><span>\t\ttyp    AuxType</span></span>\n<span class="line"><span>\t\tvalue1 uint32</span></span>\n<span class="line"><span>\t\tvalue2 uint32</span></span>\n<span class="line"><span>\t\tvalue3 uint64</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\ttests := []struct {</span></span>\n<span class="line"><span>\t\tname    string</span></span>\n<span class="line"><span>\t\tfields  fields</span></span>\n<span class="line"><span>\t\targs    args</span></span>\n<span class="line"><span>\t\twantErr bool</span></span>\n<span class="line"><span>\t}{</span></span>\n<span class="line"><span>\t\t{</span></span>\n<span class="line"><span>\t\t\tname: &quot;&quot;,</span></span>\n<span class="line"><span>\t\t\tfields: fields{</span></span>\n<span class="line"><span>\t\t\t\tMap: nil,</span></span>\n<span class="line"><span>\t\t\t},</span></span>\n<span class="line"><span>\t\t\targs: args{</span></span>\n<span class="line"><span>\t\t\t\tnodeId: 1,</span></span>\n<span class="line"><span>\t\t\t\ttyp:    MulticastDev,</span></span>\n<span class="line"><span>\t\t\t\tvalue1: 2,</span></span>\n<span class="line"><span>\t\t\t\tvalue2: 3,</span></span>\n<span class="line"><span>\t\t\t\tvalue3: 4,</span></span>\n<span class="line"><span>\t\t\t},</span></span>\n<span class="line"><span>\t\t\twantErr: false,</span></span>\n<span class="line"><span>\t\t},</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\tfor _, tt := range tests {</span></span>\n<span class="line"><span>\t\tt.Run(tt.name, func(t *testing.T) {</span></span>\n<span class="line"><span>\t\t\terr := m.Insert(tt.args.nodeId, tt.args.typ, tt.args.value1, tt.args.value2, tt.args.value3)</span></span>\n<span class="line"><span>\t\t\tif err != nil {</span></span>\n<span class="line"><span>\t\t\t\tt.Fatal(err)</span></span>\n<span class="line"><span>\t\t\t}</span></span>\n<span class="line"><span>\t\t})</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func TestNodeMap_Dump(t *testing.T) {</span></span>\n<span class="line"><span>\tm := NewNodeMap()</span></span>\n<span class="line"><span>\te := m.InitMap()</span></span>\n<span class="line"><span>\tif e != nil {</span></span>\n<span class="line"><span>\t\tt.Fatal(e)</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\ttype fields struct {</span></span>\n<span class="line"><span>\t\tMap *ebpf.Map</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\ttests := []struct {</span></span>\n<span class="line"><span>\t\tname   string</span></span>\n<span class="line"><span>\t\tfields fields</span></span>\n<span class="line"><span>\t}{</span></span>\n<span class="line"><span>\t\t{</span></span>\n<span class="line"><span>\t\t\tname:   &quot;&quot;,</span></span>\n<span class="line"><span>\t\t\tfields: fields{},</span></span>\n<span class="line"><span>\t\t},</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\tfor _, tt := range tests {</span></span>\n<span class="line"><span>\t\tt.Run(tt.name, func(t *testing.T) {</span></span>\n<span class="line"><span>\t\t\tm.Dump()</span></span>\n<span class="line"><span>\t\t})</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6)]))}]]),l=JSON.parse('{"path":"/posts/cni/eBPF%E5%B7%A5%E5%85%B7%E5%BA%93.html","title":"eBPF工具库","lang":"zh-CN","frontmatter":{"title":"eBPF工具库","tags":["kubernetes"],"categories":["kubernetes"],"description":"工具库 https://pkg.go.dev/github.com/cilium/ebpf 示例","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/cni/eBPF%E5%B7%A5%E5%85%B7%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"eBPF工具库"}],["meta",{"property":"og:description","content":"工具库 https://pkg.go.dev/github.com/cilium/ebpf 示例"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"kubernetes"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF工具库\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.9,"words":570},"filePathRelative":"posts/cni/eBPF工具库.md","excerpt":"<ol>\\n<li>工具库</li>\\n</ol>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> go</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> github.com/cilium/ebpf</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);