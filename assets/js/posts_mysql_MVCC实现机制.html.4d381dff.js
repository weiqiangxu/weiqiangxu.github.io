"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9188],{6262:(e,n)=>{n.A=(e,n)=>{const s=e.__vccOpts||e;for(const[e,a]of n)s[e]=a;return s}},9323:(e,n,s)=>{s.r(n),s.d(n,{comp:()=>l,data:()=>t});var a=s(641);const i={},l=(0,s(6262).A)(i,[["render",function(e,n){return(0,a.uX)(),(0,a.CE)("div",null,n[0]||(n[0]=[(0,a.Fv)('<h1 id="mvcc实现机制" tabindex="-1"><a class="header-anchor" href="#mvcc实现机制"><span>MVCC实现机制</span></a></h1><h3 id="innodb的rc和rr的快照读有什么不同" tabindex="-1"><a class="header-anchor" href="#innodb的rc和rr的快照读有什么不同"><span>InnoDB的RC和RR的快照读有什么不同</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Read View的生成时机不同导致的</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>RC 每次快照读都会新生成一个快照和Read View</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>RR 事务开始后在第一次快照读创建Read View后面所有的快照读都是同一个</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="隐藏字段" tabindex="-1"><a class="header-anchor" href="#隐藏字段"><span>隐藏字段</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>DB_TRX_ID 最后一次事务ID</span></span>\n<span class="line"><span>DB_ROLL_PTR 回滚指针，用于在undo log里面找版本链</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>DB_ROW_ID 6byte, 隐含的自增ID</span></span>\n<span class="line"><span>DELETED_BIT 1byte, 记录被更新或删除并不代表真的删除</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">pdai.tech</a></p>',6)]))}]]),t=JSON.parse('{"path":"/posts/mysql/MVCC%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html","title":"MVCC实现机制","lang":"zh-CN","frontmatter":{"hide":true,"description":"MVCC实现机制 InnoDB的RC和RR的快照读有什么不同 隐藏字段 pdai.tech","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/mysql/MVCC%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"MVCC实现机制"}],["meta",{"property":"og:description","content":"MVCC实现机制 InnoDB的RC和RR的快照读有什么不同 隐藏字段 pdai.tech"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVCC实现机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"InnoDB的RC和RR的快照读有什么不同","slug":"innodb的rc和rr的快照读有什么不同","link":"#innodb的rc和rr的快照读有什么不同","children":[]},{"level":3,"title":"隐藏字段","slug":"隐藏字段","link":"#隐藏字段","children":[]}],"readingTime":{"minutes":0.46,"words":138},"filePathRelative":"posts/mysql/MVCC实现机制.md","excerpt":"\\n<h3>InnoDB的RC和RR的快照读有什么不同</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>Read View的生成时机不同导致的</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>RC 每次快照读都会新生成一个快照和Read View</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>RR 事务开始后在第一次快照读创建Read View后面所有的快照读都是同一个</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);