"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3686],{6262:(s,e)=>{e.A=(s,e)=>{const i=s.__vccOpts||s;for(const[s,a]of e)i[s]=a;return i}},7171:(s,e,i)=>{i.r(e),i.d(e,{comp:()=>l,data:()=>d});var a=i(641);const n={},l=(0,i(6262).A)(n,[["render",function(s,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h1 id="缓存一致性" tabindex="-1"><a class="header-anchor" href="#缓存一致性"><span>缓存一致性</span></a></h1><h3 id="并发如何带来缓存一致性的问题" tabindex="-1"><a class="header-anchor" href="#并发如何带来缓存一致性的问题"><span>并发如何带来缓存一致性的问题</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>同时发起A|B两个请求</span></span>\n<span class="line"><span>A更新值为1并记录到缓存</span></span>\n<span class="line"><span>B更新值为2并记录到缓存</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>正确的情况：数据库和缓存都为2</span></span>\n<span class="line"><span>实际的情况：缓存先被B更新为2，然后又被A更新为1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="策略" tabindex="-1"><a class="header-anchor" href="#策略"><span>策略</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>写：更新数据库后删除缓存  或  先删除缓存再更新数据库</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>读：未命中缓存就更新缓存</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="先删除缓存再更新数据库异常情形" tabindex="-1"><a class="header-anchor" href="#先删除缓存再更新数据库异常情形"><span>先删除缓存再更新数据库异常情形</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>A先删除缓存</span></span>\n<span class="line"><span>B读取值为20</span></span>\n<span class="line"><span>B更新缓存为20</span></span>\n<span class="line"><span>A更新数据库为21</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="先更新数据库再删除缓存异常情形-我以前常用的" tabindex="-1"><a class="header-anchor" href="#先更新数据库再删除缓存异常情形-我以前常用的"><span>先更新数据库再删除缓存异常情形（我以前常用的）</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>A请求读取数据为20</span></span>\n<span class="line"><span>B请求更新数据库为21</span></span>\n<span class="line"><span>B请求删除缓存</span></span>\n<span class="line"><span>A请求更新缓存为20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于缓存更新比数据库更新快，所以这种情形概率较低</p></blockquote><h3 id="极限情况" tabindex="-1"><a class="header-anchor" href="#极限情况"><span>极限情况</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>更新完数据库删除缓存的时候，删除失败了，导致缓存不一致</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="如何保证数据库更新和缓存更新都成功呢" tabindex="-1"><a class="header-anchor" href="#如何保证数据库更新和缓存更新都成功呢"><span>如何保证数据库更新和缓存更新都成功呢</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>重试：消息队列记录动作，不成功就重试，重试多次还不行就发报错信息</span></span>\n<span class="line"><span>订阅MySQL的binlog：阿里巴巴开源的Canal中间件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="延迟双删" tabindex="-1"><a class="header-anchor" href="#延迟双删"><span>延迟双删</span></a></h3><blockquote><p>先删除缓存，然后更新数据库，延迟N秒之后(3~5)，再次删除缓存</p></blockquote>',16)]))}]]),d=JSON.parse('{"path":"/posts/redis/Redis%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.html","title":"缓存一致性","lang":"zh-CN","frontmatter":{"hide":true,"description":"缓存一致性 并发如何带来缓存一致性的问题 策略 先删除缓存再更新数据库异常情形 先更新数据库再删除缓存异常情形（我以前常用的） 由于缓存更新比数据库更新快，所以这种情形概率较低 极限情况 如何保证数据库更新和缓存更新都成功呢 延迟双删 先删除缓存，然后更新数据库，延迟N秒之后(3~5)，再次删除缓存","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/redis/Redis%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"缓存一致性"}],["meta",{"property":"og:description","content":"缓存一致性 并发如何带来缓存一致性的问题 策略 先删除缓存再更新数据库异常情形 先更新数据库再删除缓存异常情形（我以前常用的） 由于缓存更新比数据库更新快，所以这种情形概率较低 极限情况 如何保证数据库更新和缓存更新都成功呢 延迟双删 先删除缓存，然后更新数据库，延迟N秒之后(3~5)，再次删除缓存"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存一致性\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"并发如何带来缓存一致性的问题","slug":"并发如何带来缓存一致性的问题","link":"#并发如何带来缓存一致性的问题","children":[]},{"level":3,"title":"策略","slug":"策略","link":"#策略","children":[]},{"level":3,"title":"先删除缓存再更新数据库异常情形","slug":"先删除缓存再更新数据库异常情形","link":"#先删除缓存再更新数据库异常情形","children":[]},{"level":3,"title":"先更新数据库再删除缓存异常情形（我以前常用的）","slug":"先更新数据库再删除缓存异常情形-我以前常用的","link":"#先更新数据库再删除缓存异常情形-我以前常用的","children":[]},{"level":3,"title":"极限情况","slug":"极限情况","link":"#极限情况","children":[]},{"level":3,"title":"如何保证数据库更新和缓存更新都成功呢","slug":"如何保证数据库更新和缓存更新都成功呢","link":"#如何保证数据库更新和缓存更新都成功呢","children":[]},{"level":3,"title":"延迟双删","slug":"延迟双删","link":"#延迟双删","children":[]}],"readingTime":{"minutes":1.24,"words":371},"filePathRelative":"posts/redis/Redis缓存一致性.md","excerpt":"\\n<h3>并发如何带来缓存一致性的问题</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>同时发起A|B两个请求</span></span>\\n<span class=\\"line\\"><span>A更新值为1并记录到缓存</span></span>\\n<span class=\\"line\\"><span>B更新值为2并记录到缓存</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>正确的情况：数据库和缓存都为2</span></span>\\n<span class=\\"line\\"><span>实际的情况：缓存先被B更新为2，然后又被A更新为1</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);