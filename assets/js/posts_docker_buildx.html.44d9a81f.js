"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5303],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},5509:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>n});var e=a(641);const t={},l=(0,a(6262).A)(t,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h3 id="_1-官网" tabindex="-1"><a class="header-anchor" href="#_1-官网"><span>1.官网</span></a></h3><p><a href="https://github.com/docker/buildx" target="_blank" rel="noopener noreferrer">https://github.com/docker/buildx</a><a href="https://github.com/moby/buildkit" target="_blank" rel="noopener noreferrer">https://github.com/moby/buildkit</a></p><blockquote><p>buildx 命令属于实验特性，因此首先需要开启该特性，比如 ~/.docker/config.json 的 experimental 设置为 true</p></blockquote><p>本质上是 buildx 调用 buildkit 实现多架构编译，例如linux/amd64，linux/arm64、 或 darwin/amd64，--platform 指定目标架构。</p><h3 id="_2-如何进行多架构编译" tabindex="-1"><a class="header-anchor" href="#_2-如何进行多架构编译"><span>2.如何进行多架构编译</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 基础镜像</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># $TARGETPLATFORM 是内置变量，由 --platform 参数来指定其值</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Dockerfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">FROM --platform=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$TARGETPLATFORM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alpine</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">RUN uname -a &gt; /os.txt</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CMD cat /os.txt</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> buildx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/amd64,linux/arm64/v8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 435861851/buildx:v0.0.1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看镜像信息</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> buildx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> imagetools</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 435861851/buildx:v0.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关疑问" tabindex="-1"><a class="header-anchor" href="#相关疑问"><span>相关疑问</span></a></h3><ul><li>buildx 和多架构编译有什么关系，具体怎么样做可以多架构编译程序</li></ul><p>buildx 是 Docker 官方提供的一种工具，用于支持 Docker 跨平台多架构的构建、打包、推送和部署等操作。它可以使用不同的构建器来构建不同架构的 Docker 镜像，例如 amd64、arm64、armhf、ppc64le、s390x 等。</p><p>使用 buildx 进行多架构编译，需要先设置一个包含多个架构的 Docker 镜像注册表，例如 Docker Hub。然后使用 buildx 工具创建一个具有多个平台支持的构建器，例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> buildx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mybuilder</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/amd64,linux/arm64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令创建了一个名为 &quot;mybuilder&quot; 的构建器，支持 Linux 平台下的 amd64 和 arm64 两种架构。</p><p>接下来，通过 buildx 工具执行构建命令，例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> buildx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/amd64,linux/arm64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myimage:latest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令使用 &quot;mybuilder&quot; 构建器，同时指定构建时使用的平台为 Linux 平台下的 amd64 和 arm64 两种架构，编译当前目录下的 Dockerfile 文件，并将编译后的镜像打标签为 myimage:latest。</p><p>通过这种方式，我们就可以实现跨平台多架构的 Docker 编译。</p>',17)]))}]]),n=JSON.parse('{"path":"/posts/docker/buildx.html","title":"buildx","lang":"zh-CN","frontmatter":{"title":"buildx","category":["docker"],"tag":["docker"],"description":"1.官网 https://github.com/docker/buildx https://github.com/moby/buildkit buildx 命令属于实验特性，因此首先需要开启该特性，比如 ~/.docker/config.json 的 experimental 设置为 true 本质上是 buildx 调用 buildkit 实现多架构...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/docker/buildx.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"buildx"}],["meta",{"property":"og:description","content":"1.官网 https://github.com/docker/buildx https://github.com/moby/buildkit buildx 命令属于实验特性，因此首先需要开启该特性，比如 ~/.docker/config.json 的 experimental 设置为 true 本质上是 buildx 调用 buildkit 实现多架构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"docker"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"buildx\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"1.官网","slug":"_1-官网","link":"#_1-官网","children":[]},{"level":3,"title":"2.如何进行多架构编译","slug":"_2-如何进行多架构编译","link":"#_2-如何进行多架构编译","children":[]},{"level":3,"title":"相关疑问","slug":"相关疑问","link":"#相关疑问","children":[]}],"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"posts/docker/buildx.md","excerpt":"<h3>1.官网</h3>\\n<p><a href=\\"https://github.com/docker/buildx\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/docker/buildx</a>\\n<a href=\\"https://github.com/moby/buildkit\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/moby/buildkit</a></p>\\n<blockquote>\\n<p>buildx 命令属于实验特性，因此首先需要开启该特性，比如 ~/.docker/config.json 的 experimental 设置为 true</p>\\n</blockquote>","autoDesc":true}')}}]);