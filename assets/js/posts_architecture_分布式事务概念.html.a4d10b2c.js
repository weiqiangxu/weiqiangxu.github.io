"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[701],{6262:(e,i)=>{i.A=(e,i)=>{const a=e.__vccOpts||e;for(const[e,n]of i)a[e]=n;return a}},4856:(e,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>l});var n=a(641);const s={},t=(0,a(6262).A)(s,[["render",function(e,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<p><a href="http://icyfenix.cn/architect-perspective/general-architecture/transaction/distributed.html" target="_blank" rel="noopener noreferrer">分布式事务</a></p><h3 id="cap" tabindex="-1"><a class="header-anchor" href="#cap"><span>CAP</span></a></h3><blockquote><p>三个特性最多只能同时满足其中两个</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>一致性（Consistency）</span></span>\n<span class="line"><span>可用性（Availability）</span></span>\n<span class="line"><span>分区容忍性（Partition Tolerance）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>多节点为了数据一致性，数据同步阻塞服务，可用性就会变差；</li><li>多节点为了高可用，但数据同步不及时，一致性变差；</li><li>多节点因为部分节点连接中断，而无法正确提供服务，此为容忍性；</li></ol><h3 id="可靠事件队列" tabindex="-1"><a class="header-anchor" href="#可靠事件队列"><span>可靠事件队列</span></a></h3><blockquote><p>譬如 TCP 协议中未收到 ACK 应答自动重新发包的可靠性保障就属于最大努力交付</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>可靠事件队列只要第一步业务完成了，后续就没有失败回滚的概念，只许成功，不许失败</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>靠着持续重试来保证可靠性的解决方案</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>”最大努力交付“（Best-Effort Delivery）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tcc-事务-try-confirm-cancel" tabindex="-1"><a class="header-anchor" href="#tcc-事务-try-confirm-cancel"><span>TCC 事务(Try-Confirm-Cancel)</span></a></h3><ol><li>Try：尝试执行阶段</li><li>Confirm：确认执行阶段</li><li>Cancel：取消执行阶段</li></ol><blockquote><p>用户花钱了冻结金额，用户买书了就冻结书籍状态，讲究资源锁定</p></blockquote><blockquote><p>业务侵入性很强</p></blockquote><h3 id="saga-事务" tabindex="-1"><a class="header-anchor" href="#saga-事务"><span>SAGA 事务</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>分布式事务 T 分解为 n 个子事务，命名为 T1，T2，… ， 每一个子事务设计对应的补偿动作，命名为 C1，C2，…</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 子事务必须原子行为</span></span>\n<span class="line"><span>2. Ti和Ci都具备幂等性</span></span>\n<span class="line"><span>3. Ti与Ci满足交换律</span></span>\n<span class="line"><span>4. Ci必须能成功提交</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>正向恢复（Forward Recovery） Ti事务提交失败，则一直对 Ti进行重试，直至成功为止</li></ol><blockquote><p>执行模式为：T1，T2，…，Ti（失败），Ti（重试）…，Ti+1，…，Tn</p></blockquote><ol start="2"><li>反向恢复（Backward Recovery）Ti事务提交失败，则一直执行 Ci对 Ti进行补偿，直至成功为止</li></ol><blockquote><p>执行模式：T1，T2，…，Ti（失败），Ci（补偿），…，C2，C1</p></blockquote>',19)]))}]]),l=JSON.parse('{"path":"/posts/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A6%82%E5%BF%B5.html","title":"分布式事务 Distributed Transaction","lang":"zh-CN","frontmatter":{"title":"分布式事务 Distributed Transaction","tags":["分布式事务"],"categories":["分布式"],"date":"2023-04-08T06:40:12.000Z","index_img":"/images/bg/computer.jpeg","description":"分布式事务 CAP 三个特性最多只能同时满足其中两个 多节点为了数据一致性，数据同步阻塞服务，可用性就会变差； 多节点为了高可用，但数据同步不及时，一致性变差； 多节点因为部分节点连接中断，而无法正确提供服务，此为容忍性； 可靠事件队列 譬如 TCP 协议中未收到 ACK 应答自动重新发包的可靠性保障就属于最大努力交付 TCC 事务(Try-Confi...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"分布式事务 Distributed Transaction"}],["meta",{"property":"og:description","content":"分布式事务 CAP 三个特性最多只能同时满足其中两个 多节点为了数据一致性，数据同步阻塞服务，可用性就会变差； 多节点为了高可用，但数据同步不及时，一致性变差； 多节点因为部分节点连接中断，而无法正确提供服务，此为容忍性； 可靠事件队列 譬如 TCP 协议中未收到 ACK 应答自动重新发包的可靠性保障就属于最大努力交付 TCC 事务(Try-Confi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"分布式事务"}],["meta",{"property":"article:published_time","content":"2023-04-08T06:40:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务 Distributed Transaction\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-08T06:40:12.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"CAP","slug":"cap","link":"#cap","children":[]},{"level":3,"title":"可靠事件队列","slug":"可靠事件队列","link":"#可靠事件队列","children":[]},{"level":3,"title":"TCC 事务(Try-Confirm-Cancel)","slug":"tcc-事务-try-confirm-cancel","link":"#tcc-事务-try-confirm-cancel","children":[]},{"level":3,"title":"SAGA 事务","slug":"saga-事务","link":"#saga-事务","children":[]}],"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"posts/architecture/分布式事务概念.md","localizedDate":"2023年4月8日","excerpt":"<p><a href=\\"http://icyfenix.cn/architect-perspective/general-architecture/transaction/distributed.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">分布式事务</a></p>\\n<h3>CAP</h3>\\n<blockquote>\\n<p>三个特性最多只能同时满足其中两个</p>\\n</blockquote>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>一致性（Consistency）</span></span>\\n<span class=\\"line\\"><span>可用性（Availability）</span></span>\\n<span class=\\"line\\"><span>分区容忍性（Partition Tolerance）</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);