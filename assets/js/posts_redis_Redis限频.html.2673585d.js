"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5658],{6262:(s,e)=>{e.A=(s,e)=>{const n=s.__vccOpts||s;for(const[s,i]of e)n[s]=i;return n}},6195:(s,e,n)=>{n.r(e),n.d(e,{comp:()=>l,data:()=>d});var i=n(641);const a={},l=(0,n(6262).A)(a,[["render",function(s,e){return(0,i.uX)(),(0,i.CE)("div",null,e[0]||(e[0]=[(0,i.Fv)('<h1 id="redis限频" tabindex="-1"><a class="header-anchor" href="#redis限频"><span>Redis限频</span></a></h1><h3 id="最简单的但是有超频的风险的" tabindex="-1"><a class="header-anchor" href="#最简单的但是有超频的风险的"><span>最简单的但是有超频的风险的</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SET userID count_request</span></span>\n<span class="line"><span>Expired userID xxx</span></span>\n<span class="line"><span>incre(userID)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方案问题" tabindex="-1"><a class="header-anchor" href="#方案问题"><span>方案问题</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>在59s的时刻发送99次</span></span>\n<span class="line"><span>在60s Redis key过期</span></span>\n<span class="line"><span>61s时刻发送了99次</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="滑动时间窗口基于zset实现" tabindex="-1"><a class="header-anchor" href="#滑动时间窗口基于zset实现"><span>滑动时间窗口基于zset实现</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 毫秒为score ID为Key</span></span>\n<span class="line"><span>ZADD KEY_NAME SCORE1 VALUE1.. SCOREN VALUEN</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 统计最近1min总次数</span></span>\n<span class="line"><span>ZCOUNT key min max</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 删除1min以前的集合成员</span></span>\n<span class="line"><span>ZREMRANGEBYSCORE key min max</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法"><span>令牌桶算法</span></a></h3><blockquote><p>常用于限流(请求放行之前需要获取令牌)</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>令牌桶自行恒定速率产生令牌</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>请求进来消耗令牌</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>如果令牌不够则丢弃请求</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>如果可以获取令牌则放行请求</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="令牌桶算法关键在于产生令牌的速率" tabindex="-1"><a class="header-anchor" href="#令牌桶算法关键在于产生令牌的速率"><span>令牌桶算法关键在于产生令牌的速率</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>假设每秒产生2个令牌</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>桶的容量是2</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>那么每秒最多消耗2个令牌</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',12)]))}]]),d=JSON.parse('{"path":"/posts/redis/Redis%E9%99%90%E9%A2%91.html","title":"Redis限频","lang":"zh-CN","frontmatter":{"hide":true,"description":"Redis限频 最简单的但是有超频的风险的 方案问题 滑动时间窗口基于zset实现 令牌桶算法 常用于限流(请求放行之前需要获取令牌) 令牌桶算法关键在于产生令牌的速率","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/redis/Redis%E9%99%90%E9%A2%91.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"Redis限频"}],["meta",{"property":"og:description","content":"Redis限频 最简单的但是有超频的风险的 方案问题 滑动时间窗口基于zset实现 令牌桶算法 常用于限流(请求放行之前需要获取令牌) 令牌桶算法关键在于产生令牌的速率"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis限频\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"最简单的但是有超频的风险的","slug":"最简单的但是有超频的风险的","link":"#最简单的但是有超频的风险的","children":[]},{"level":3,"title":"方案问题","slug":"方案问题","link":"#方案问题","children":[]},{"level":3,"title":"滑动时间窗口基于zset实现","slug":"滑动时间窗口基于zset实现","link":"#滑动时间窗口基于zset实现","children":[]},{"level":3,"title":"令牌桶算法","slug":"令牌桶算法","link":"#令牌桶算法","children":[]},{"level":3,"title":"令牌桶算法关键在于产生令牌的速率","slug":"令牌桶算法关键在于产生令牌的速率","link":"#令牌桶算法关键在于产生令牌的速率","children":[]}],"readingTime":{"minutes":0.71,"words":214},"filePathRelative":"posts/redis/Redis限频.md","excerpt":"\\n<h3>最简单的但是有超频的风险的</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>SET userID count_request</span></span>\\n<span class=\\"line\\"><span>Expired userID xxx</span></span>\\n<span class=\\"line\\"><span>incre(userID)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);