"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9691],{6262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}},1435:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>r,data:()=>l});var e=a(641);const i={},r=(0,a(6262).A)(i,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,n[0]||(n[0]=[(0,e.Fv)('<p><a href="https://pkg.go.dev/github.com/pkg/errors" target="_blank" rel="noopener noreferrer">github.com/pkg/errors</a></p><p><a href="https://pkg.go.dev/errors" target="_blank" rel="noopener noreferrer">pkg.go.dev/errors</a></p><h3 id="差异" tabindex="-1"><a class="header-anchor" href="#差异"><span>差异</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>两者不同本质上在 fmt.Printf(&quot;%+v&quot; ,err)时候 github.com 的多了堆栈信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用建议" tabindex="-1"><a class="header-anchor" href="#使用建议"><span>使用建议</span></a></h3><ol><li>用github.com/pkg/errors的包</li><li>如果是给后台程序员看日志的error的话使用 %+v 打印错误信息可以把堆栈信息打印出来</li><li>WithMessage\\WithMessagef\\Wrap\\Wrapf\\Errorf 这几个都是包装error向上传递,并且都会记录堆栈信息,没看出啥区别</li></ol><h3 id="看看直接-errors-new-和-errors-withstack-errors-new-的区别" tabindex="-1"><a class="header-anchor" href="#看看直接-errors-new-和-errors-withstack-errors-new-的区别"><span>看看直接 errors.New 和 errors.WithStack(errors.New) 的区别</span></a></h3><ol><li>看看 fmt.Printf(&quot;%+v&quot;, errors.New(&quot;b&quot;)) 的输出</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>b</span></span>\n<span class="line"><span>main.b</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:20</span></span>\n<span class="line"><span>main.a</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:16</span></span>\n<span class="line"><span>main.main</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:9</span></span>\n<span class="line"><span>runtime.main</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/proc.go:250</span></span>\n<span class="line"><span>runtime.goexit</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/asm_arm64.s:1172</span></span>\n<span class="line"><span>进程 已完成，退出代码为 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>看看 fmt.Printf(&quot;%+v&quot;, errors.WithStack(errors.New(&quot;b&quot;)))</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>b</span></span>\n<span class="line"><span>main.b</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:20</span></span>\n<span class="line"><span>main.a</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:16</span></span>\n<span class="line"><span>main.main</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:9</span></span>\n<span class="line"><span>runtime.main</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/proc.go:250</span></span>\n<span class="line"><span>runtime.goexit</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/asm_arm64.s:1172</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>### 多出来下面的</span></span>\n<span class="line"><span>main.b</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:20</span></span>\n<span class="line"><span>main.a</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:16</span></span>\n<span class="line"><span>main.main</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:9</span></span>\n<span class="line"><span>runtime.main</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/proc.go:250</span></span>\n<span class="line"><span>runtime.goexit</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/asm_arm64.s:1172</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结：没有必要 WithStack 因为已经有足够的堆栈信息了</p></blockquote><h3 id="比对-直接return-error-和-return-errors-wrap-和-errors-errorf-和-errors-withmessage-错误的区别" tabindex="-1"><a class="header-anchor" href="#比对-直接return-error-和-return-errors-wrap-和-errors-errorf-和-errors-withmessage-错误的区别"><span>比对 直接return error 和 return errors.Wrap 和 errors.Errorf 和 errors.WithMessage 错误的区别</span></a></h3><ol><li>直接 return error</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>b</span></span>\n<span class="line"><span>main.b</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:18</span></span>\n<span class="line"><span>main.a</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:14</span></span>\n<span class="line"><span>main.main</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:9</span></span>\n<span class="line"><span>runtime.main</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/proc.go:250</span></span>\n<span class="line"><span>runtime.goexit</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/asm_arm64.s:1172</span></span>\n<span class="line"><span>进程 已完成，退出代码为 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>return errors.Wrap(b(), &quot;i am message&quot;) 本质上是保留了上一个errors.New 然后再追加一层当前行往上的堆栈信息 （而追加的这一层的 b() 里面哪一行抛出异常的是没有被记录的）</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>b</span></span>\n<span class="line"><span>main.b</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:18</span></span>\n<span class="line"><span>main.a</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:14</span></span>\n<span class="line"><span>main.main</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:9</span></span>\n<span class="line"><span>runtime.main</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/proc.go:250</span></span>\n<span class="line"><span>runtime.goexit</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/asm_arm64.s:1172</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>### wrap之后多出来的一层</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>i am message</span></span>\n<span class="line"><span>main.a</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:14</span></span>\n<span class="line"><span>main.main</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:9</span></span>\n<span class="line"><span>runtime.main</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/proc.go:250</span></span>\n<span class="line"><span>runtime.goexit</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/asm_arm64.s:1172</span></span>\n<span class="line"><span>进程 已完成，退出代码为 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>errors.Errorf(&quot;i am message %s&quot;, b()) 的输出 （b这个func的18行是return error的地方，这个行号没了）</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>i am message b</span></span>\n<span class="line"><span>main.a</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:14</span></span>\n<span class="line"><span>main.main</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:9</span></span>\n<span class="line"><span>runtime.main</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/proc.go:250</span></span>\n<span class="line"><span>runtime.goexit</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/asm_arm64.s:1172</span></span>\n<span class="line"><span>进程 已完成，退出代码为 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结： 直接 errors.Errorf 就会丢失了 b() 那个 func 里面抛出 error 的行号 , errors.Errorf 不要滥用会丢失堆栈</p></blockquote><blockquote><p>errors.Wrap 可以使用但是会把堆栈多了很多层，但是可以携带一些个人信息</p></blockquote><ol start="4"><li>return errors.WithMessage(b(), &quot;i am message&quot;) 打印输出</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>b</span></span>\n<span class="line"><span>main.b</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:18</span></span>\n<span class="line"><span>main.a</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:14</span></span>\n<span class="line"><span>main.main</span></span>\n<span class="line"><span>        /Users/xuweiqiang/Documents/code/yyyy/main.go:9</span></span>\n<span class="line"><span>runtime.main</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/proc.go:250</span></span>\n<span class="line"><span>runtime.goexit</span></span>\n<span class="line"><span>        /usr/local/go/src/runtime/asm_arm64.s:1172</span></span>\n<span class="line"><span>i am message   ### 这个是和 errors.New 唯一的区别</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结：wrap会把堆栈搞得很复杂，多了好多，Errorf会丢失上一层的堆栈信息，用这个会更合适</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="_1-使用包github-com-errors替换pkg-errors" tabindex="-1"><a class="header-anchor" href="#_1-使用包github-com-errors替换pkg-errors"><span>1. 使用包github.com/errors替换pkg/errors</span></a></h3><h3 id="_2-在透传error的时候用errors-withmessage不要用wrap也不要用errorf" tabindex="-1"><a class="header-anchor" href="#_2-在透传error的时候用errors-withmessage不要用wrap也不要用errorf"><span>2. 在透传error的时候用errors.WithMessage不要用Wrap也不要用Errorf</span></a></h3><h3 id="_3-errors-new就有堆栈了不用new出来后withstack" tabindex="-1"><a class="header-anchor" href="#_3-errors-new就有堆栈了不用new出来后withstack"><span>3. errors.New就有堆栈了不用New出来后WithStack</span></a></h3><h3 id="错误的判断error类型方式" tabindex="-1"><a class="header-anchor" href="#错误的判断error类型方式"><span>错误的判断error类型方式</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package main</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import (</span></span>\n<span class="line"><span>\t&quot;fmt&quot;</span></span>\n<span class="line"><span>\t&quot;github.com/pkg/errors&quot;</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>var ErrNil = errors.New(&quot;redigo: nil returned&quot;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 错误的判定error类型方式</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func main() {</span></span>\n<span class="line"><span>\tfmt.Println(errors.Is(ErrNil, a())) // 输出false因为b返回的error被包装过了</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func a() error {</span></span>\n<span class="line"><span>\treturn errors.WithMessage(b(), &quot;i am message&quot;)</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func b() error {</span></span>\n<span class="line"><span>\treturn ErrNil</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正确应该使用-errors-cause-err-type" tabindex="-1"><a class="header-anchor" href="#正确应该使用-errors-cause-err-type"><span>正确应该使用 errors.Cause(err).(type)</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import (</span></span>\n<span class="line"><span>\t&quot;fmt&quot;</span></span>\n<span class="line"><span>\t&quot;github.com/pkg/errors&quot;</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>var ErrNil = errors.New(&quot;redigo: nil returned&quot;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 正确的判定方式</span></span>\n<span class="line"><span>func main() {</span></span>\n<span class="line"><span>\terr := errors.Cause(a())</span></span>\n<span class="line"><span>\tfmt.Print(errors.Is(err, ErrNil))</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func a() error {</span></span>\n<span class="line"><span>\treturn errors.WithMessage(b(), &quot;i am message&quot;)</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func b() error {</span></span>\n<span class="line"><span>\treturn ErrNil</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="golang推荐的包" tabindex="-1"><a class="header-anchor" href="#golang推荐的包"><span>golang推荐的包</span></a></h1><ol><li>golang.org/x/sync/errgroup</li><li>github.com/golang-jwt/jwt</li><li>go.mongodb.org/mongo-driver</li><li>github.com/confluentinc/confluent-kafka-go</li><li>github.com/go-playground/validator/v10</li><li>go.uber.org/zap</li><li>github.com/gomodule/redigo</li><li>github.com/go-sql-driver/mysql</li><li>gorm.io/gorm</li><li>gorm.io/driver/mysql</li><li>github.com/urfave/cli/v2</li></ol>',34)]))}]]),l=JSON.parse('{"path":"/posts/go/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8errors.html","title":"golang推荐的包","lang":"zh-CN","frontmatter":{"hide":true,"description":"github.com/pkg/errors pkg.go.dev/errors 差异 使用建议 用github.com/pkg/errors的包 如果是给后台程序员看日志的error的话使用 %+v 打印错误信息可以把堆栈信息打印出来 WithMessage\\\\WithMessagef\\\\Wrap\\\\Wrapf\\\\Errorf 这几个都是包装error向上传递...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8errors.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"golang推荐的包"}],["meta",{"property":"og:description","content":"github.com/pkg/errors pkg.go.dev/errors 差异 使用建议 用github.com/pkg/errors的包 如果是给后台程序员看日志的error的话使用 %+v 打印错误信息可以把堆栈信息打印出来 WithMessage\\\\WithMessagef\\\\Wrap\\\\Wrapf\\\\Errorf 这几个都是包装error向上传递..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang推荐的包\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"差异","slug":"差异","link":"#差异","children":[]},{"level":3,"title":"使用建议","slug":"使用建议","link":"#使用建议","children":[]},{"level":3,"title":"看看直接 errors.New 和 errors.WithStack(errors.New) 的区别","slug":"看看直接-errors-new-和-errors-withstack-errors-new-的区别","link":"#看看直接-errors-new-和-errors-withstack-errors-new-的区别","children":[]},{"level":3,"title":"比对 直接return error 和 return errors.Wrap 和 errors.Errorf 和 errors.WithMessage 错误的区别","slug":"比对-直接return-error-和-return-errors-wrap-和-errors-errorf-和-errors-withmessage-错误的区别","link":"#比对-直接return-error-和-return-errors-wrap-和-errors-errorf-和-errors-withmessage-错误的区别","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"1. 使用包github.com/errors替换pkg/errors","slug":"_1-使用包github-com-errors替换pkg-errors","link":"#_1-使用包github-com-errors替换pkg-errors","children":[]},{"level":3,"title":"2. 在透传error的时候用errors.WithMessage不要用Wrap也不要用Errorf","slug":"_2-在透传error的时候用errors-withmessage不要用wrap也不要用errorf","link":"#_2-在透传error的时候用errors-withmessage不要用wrap也不要用errorf","children":[]},{"level":3,"title":"3. errors.New就有堆栈了不用New出来后WithStack","slug":"_3-errors-new就有堆栈了不用new出来后withstack","link":"#_3-errors-new就有堆栈了不用new出来后withstack","children":[]},{"level":3,"title":"错误的判断error类型方式","slug":"错误的判断error类型方式","link":"#错误的判断error类型方式","children":[]},{"level":3,"title":"正确应该使用 errors.Cause(err).(type)","slug":"正确应该使用-errors-cause-err-type","link":"#正确应该使用-errors-cause-err-type","children":[]}]}],"readingTime":{"minutes":2.57,"words":772},"filePathRelative":"posts/go/如何优雅地使用errors.md","excerpt":"<p><a href=\\"https://pkg.go.dev/github.com/pkg/errors\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">github.com/pkg/errors</a></p>\\n<p><a href=\\"https://pkg.go.dev/errors\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">pkg.go.dev/errors</a></p>\\n<h3>差异</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>两者不同本质上在 fmt.Printf(\\"%+v\\" ,err)时候 github.com 的多了堆栈信息</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);