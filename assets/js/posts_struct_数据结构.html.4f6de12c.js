"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7013],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,l]of s)a[i]=l;return a}},8248:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var l=a(641);const n={},e=(0,a(6262).A)(n,[["render",function(i,s){return(0,l.uX)(),(0,l.CE)("div",null,s[0]||(s[0]=[(0,l.Fv)('<h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h1><h3 id="一、数据结构起源" tabindex="-1"><a class="header-anchor" href="#一、数据结构起源"><span>一、数据结构起源</span></a></h3><p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。程序简单来说就是<code>程序设计 = 数据结构 + 算法</code>。</p><ol><li>逻辑结构</li></ol><p>定义: 数据对象之间数据元素之间的相互关系</p><ul><li>集合结构</li><li>线性结构</li><li>树形结构</li><li>图形结构</li></ul><ol start="2"><li>物理结构</li></ol><ul><li>顺序存储。数据在内存块上连续有序分配比如数组。</li><li>链式存储。数据在内存块位置不连续但是在程序中有指针将这些串起来比如链表。</li></ul><h3 id="二、算法时间复杂度" tabindex="-1"><a class="header-anchor" href="#二、算法时间复杂度"><span>二、算法时间复杂度</span></a></h3><ol><li>算法和时间复杂度是什么意思</li></ol><p>告诉我算法是什么？算法让你快速获取<code>1+2+3+..+100</code>的结果，算法说白了就是一种计算规则。获得上述题目结果的方式普通人想到的是一个个加起来，高斯想到的是：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i,sum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =0,n=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (1 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) * n / 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度，可以认为得到这个结果需要的执行步骤。步数越大，时间复杂度越大。程序行业用一个公式表示时间复杂度，那就是<code>T(n) = O(f(n))</code>，详细说明如下:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># n表示元素个数</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># T(n)表示算法的运行时间</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 大O符号表示时间复杂度</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># f表示执行方法</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 简单认为: 执行时长 = 时间复杂度[执行方法[元素个数]]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">T(n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  = O(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">f(n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>常见的时间复杂度级别</li></ol><ul><li><p>常数阶<code>O(1)</code></p><p>比如哈希算法，只需要一个步骤就能获取到结果或者数组只需要一个标就能拿到值。散列表查找，直接根据查找值计算hash算法获取地址或者高斯算法。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* 执行一次 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      /* 执行一次 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">printf（</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, sum）;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         /* 执行一次 */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>线性阶<code>O(n)</code></p><p>比如链表查询,查询一个元素的最大时间有可能需要遍历整个n个元素的链表。比如有序链表顺序查找(执行n次)</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 时间复杂度为O(1)的程序步骤序列 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对数阶<code>O(LogN)</code></p><p>如二分法查找，查找一个8个元素的链表使用二分法最多需要3个步骤,<code>3 = Log2(8)</code>。二分法查找算法就是对数阶，底数是<code>2^x=n</code> 得到<code>x=log2n</code>，时间复杂度为<code>O(logN)</code>:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> （count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 时间复杂度为O(1)的程序步骤序列 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>平方阶<code>O(n^2)</code></p><p>外层循环次数为n,内部也为n，时间复杂度为O(n^2):</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i,j;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; j</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">）                       </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {                                      </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* 时间复杂度为O(1)的程序步骤序列 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }                                      </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>立方阶<code>O(n^3)</code></p></li><li><p>指数阶<code>O(2^n)</code></p></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 时间复杂度由小到大</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指数是最慢的因为元素个数n的增长会带来时间复杂度猛涨</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">O(1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &lt; O(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">logn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &lt; O(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &lt; O(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">n^2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &lt; O(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">n^3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &lt; O(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2^n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>空间复杂度</li></ol><p>算法的空间复杂度指的是在运行过程中临时占用存储空间大小的量度。空间复杂度衡量的是算法所需的存储空间。算法空间复杂度的计算公式记作：<code>S(n)=O(f(n))</code>。</p><h3 id="三、线性表" tabindex="-1"><a class="header-anchor" href="#三、线性表"><span>三、线性表</span></a></h3><ol><li>定义</li></ol><p>零个或多个有限序列，单条线，元素前面后面都只有一个(多个就不是了)，这就叫线性表。常见的线性表有数组。</p><ol start="2"><li>线性表顺序存储结构</li></ol><p>地址连续的存储单元存储线性表的数据元素，注意：地址连续，比如数组的内存地址连续的。</p><ol start="3"><li>查找时间复杂度</li></ol><p>假设一个线性表元素是<code>a0 a1 ~ an</code>,存储器之中的每个存储单元都有自己的编号，这个编号也就是地址<code>0 1 2 3...</code>，算位置的方式就是(假设每个元素占据c个存储单元)，<code>Location(ai) = Location(a1) + c(i-1)</code>，所以获取地址的算法，任意一个元素的时间复杂度都是一样的 <code>O(1)</code>，所以数组下标找元素只需要一个步骤。</p><ol start="4"><li>删除或新增元素的时间复杂度</li></ol><p>删除元素需要将后面的元素每个往前挪一个位置所以最大是<code>O(n)</code>，不过如果删除最后一个元素时间复杂度就是<code>O(1)</code>，大 O 记号（渐近上界）表示时间复杂度最大的情况所以数组的插入时间复杂度是<code>O(n)</code>。而插入元素也是一样的，时间复杂度是<code>O(n)</code>。</p><ol start="5"><li>内存碎片是啥意思</li></ol><p>内部碎片就是已经被分配出去却不能被利用的内存空间。</p><ol start="6"><li>链式存储结构（单链表）的时间复杂度</li></ol><p>链表的特征就是数据元素在存储上不按顺序，只需要元素存储它下一个单元地址（指针）。插入节点的时候不需要惊动所有节点，只需要将某一个节点的<code>next</code>指针指向更改就可以了，删除节点的也是一样的。所以插入和删除的时间复杂度是<code>O(n)</code>，查找的时间复杂度也是<code>O(n)</code>。插入或删除数据越频繁的操作，单链表的效率对比数组优势就越是明显。单链表不需要预分配存储空间，数组是一开始就分配了连续的存储空间，链表是加一个元素分配一个元素的内存空间。</p><ol start="7"><li>线性表分类</li></ol><ul><li>顺序表指的是一整块足够大小的物理空间，依次存储数据。</li><li>单链表指链表存储的数据元素，物理存储位置随机，每个元素存储时配备指针，指向直接后继元素。</li><li>静态链表指的是用数组来模拟链表的数据结构。内存是连续和预先分配的，但是又有指针，删除和新增元素不需要挪动后面所有元素位置，查询数据又可以使用下标直接访问。每个元素存储游标<code>cur</code>指向下一个后继元素，插入元素只需要更改插入的前一个节点和元素本身的<code>cur</code>。</li><li>动态链表，特征是链表在初始时不一定分配足够的空间, 但是在后续插入的时候需要动态申请存储空间</li><li>单向链表，无论动态还是静态，每一个元素都统一指向直接后继节点</li><li>双向链表，每个节点不但有指针指向后继元素，还有一个指针域指向前面元素</li><li>循环链表指的是单链表的终端结点的指针指向头节点，环状链表，成为循环链表</li></ul><h3 id="四、栈和队列" tabindex="-1"><a class="header-anchor" href="#四、栈和队列"><span>四、栈和队列</span></a></h3><ol><li>栈</li></ol><p>栈是一种只能从表的一端存取数据且遵循LIFO（Last - In - First - Out）后进先出的原则的存储结构，注意是线性存储结构，有顺序的栈顶是开口端， 栈底封口端表示无法获取数据，存储角度有顺序存储结构和链式存储结构。</p><ol start="2"><li>队列</li></ol><p>队列的特征是先进先出（FIFO）,实现有顺序队列比如数组特征是内存连续固定大小并且使用下标访问速度快，链式队列比如链表特点是动态大小。</p><h3 id="五、堆" tabindex="-1"><a class="header-anchor" href="#五、堆"><span>五、堆</span></a></h3><p>数据结构，堆是一种特殊的树形数据结构。是一个完全二叉树，完全二叉树意味着除了最后一层外，每一层都是满的，并且最后一层的节点是从左到右依次排列的。堆分为两种类型：最大堆和最小堆。最大堆每个节点的值都大于或等于它的子节点的值所以<code>根节点</code>的值是整个堆中<code>最大</code>的。最小堆每个节点的值都小于或等于它的子节点的值所以<code>根节点</code>的值是整个堆中<code>最小</code>的。</p><h3 id="六、图" tabindex="-1"><a class="header-anchor" href="#六、图"><span>六、图</span></a></h3><ol><li>概念</li></ol><p>图（Graph）是一种数据结构，用于表示对象之间的关系。顶点（Vertex，也称为节点 Node）集合和边（Edge）集合组成。在社交网络中，可以将每个用户看作一个顶点，用户之间的好友关系看作边。如果用户 A 和用户 B 是好友，那么在图中就有一条连接顶点 A 和顶点 B 的边。</p><ol start="2"><li>广度优先</li></ol><p>广度优先遍历（Breadth - First Search，BFS）,从一个顶点开始，先访问该顶点的所有邻接顶点，然后依次访问这些邻接顶点的邻接顶点，以此类推，就像一层一层地向外扩展访问。</p><ol start="3"><li>深度优先</li></ol><p>深度优先遍历（Depth - First Search，DFS），从一个顶点开始，沿着一条路径尽可能深地访问顶点，直到不能再前进，查找不到元素再回来顶点，继续探索其他路径。</p><h3 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章"><span>相关文章</span></a></h3><ul><li><a href="https://zhuanlan.zhihu.com/p/265213389" target="_blank" rel="noopener noreferrer">常见的时间复杂度实例</a></li><li><a href="https://weread.qq.com/web/bookDetail/f7c324d0813ab6bb7g017833" target="_blank" rel="noopener noreferrer">大话数据结构</a></li><li><a href="http://data.biancheng.net/" target="_blank" rel="noopener noreferrer">数据结构与算法教程 解学武</a></li><li><a href="https://blog.csdn.net/m0_61886762/article/details/125289840" target="_blank" rel="noopener noreferrer">平衡二叉树详解 通俗易懂 CSDN</a></li><li><a href="https://www.bilibili.com/video/BV1H4411N7oD/" target="_blank" rel="noopener noreferrer">浙江大学数据结构 陈越</a></li><li><a href="https://www.bilibili.com/video/BV1JV411t7ow?p=1" target="_blank" rel="noopener noreferrer">中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版》</a></li><li><a href="https://www.bilibili.com/video/BV1PG4y1a7V4/" target="_blank" rel="noopener noreferrer">计算机组成原理 | 华中科技大学秦磊华</a></li><li><a href="https://www.bilibili.com/video/BV1d4411v7u7/" target="_blank" rel="noopener noreferrer">操作系统（哈工大李治军老师）32讲</a></li></ul>',50)]))}]]),t=JSON.parse('{"path":"/posts/struct/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","title":"数据结构","lang":"zh-CN","frontmatter":{"description":"数据结构 一、数据结构起源 数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。程序简单来说就是程序设计 = 数据结构 + 算法。 逻辑结构 定义: 数据对象之间数据元素之间的相互关系 集合结构 线性结构 树形结构 图形结构 物理结构 顺序存储。数据在内存块上连续有序分配比如数组。 链式存储。数据在内存块位...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/struct/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"数据结构 一、数据结构起源 数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。程序简单来说就是程序设计 = 数据结构 + 算法。 逻辑结构 定义: 数据对象之间数据元素之间的相互关系 集合结构 线性结构 树形结构 图形结构 物理结构 顺序存储。数据在内存块上连续有序分配比如数组。 链式存储。数据在内存块位..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、数据结构起源","slug":"一、数据结构起源","link":"#一、数据结构起源","children":[]},{"level":3,"title":"二、算法时间复杂度","slug":"二、算法时间复杂度","link":"#二、算法时间复杂度","children":[]},{"level":3,"title":"三、线性表","slug":"三、线性表","link":"#三、线性表","children":[]},{"level":3,"title":"四、栈和队列","slug":"四、栈和队列","link":"#四、栈和队列","children":[]},{"level":3,"title":"五、堆","slug":"五、堆","link":"#五、堆","children":[]},{"level":3,"title":"六、图","slug":"六、图","link":"#六、图","children":[]},{"level":3,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"readingTime":{"minutes":8.19,"words":2457},"filePathRelative":"posts/struct/数据结构.md","excerpt":"\\n<h3>一、数据结构起源</h3>\\n<p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。程序简单来说就是<code>程序设计  = 数据结构 + 算法</code>。</p>\\n<ol>\\n<li>逻辑结构</li>\\n</ol>\\n<p>定义: 数据对象之间数据元素之间的相互关系</p>\\n<ul>\\n<li>集合结构</li>\\n<li>线性结构</li>\\n<li>树形结构</li>\\n<li>图形结构</li>\\n</ul>\\n<ol start=\\"2\\">\\n<li>物理结构</li>\\n</ol>\\n<ul>\\n<li>顺序存储。数据在内存块上连续有序分配比如数组。</li>\\n<li>链式存储。数据在内存块位置不连续但是在程序中有指针将这些串起来比如链表。</li>\\n</ul>","autoDesc":true}')}}]);