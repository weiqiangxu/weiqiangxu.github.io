"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1121],{6262:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,a]of s)e[i]=a;return e}},8446:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>t,data:()=>l});var a=e(641);const n={},t=(0,e(6262).A)(n,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="零拷贝" tabindex="-1"><a class="header-anchor" href="#零拷贝"><span>零拷贝</span></a></h1><blockquote><p>零拷贝（Zero-copy）是一种计算机操作技术，主要减少数据在不同存储区域之间的复制次数，提高数据传输效率.</p></blockquote><h3 id="一、关键术语" tabindex="-1"><a class="header-anchor" href="#一、关键术语"><span>一、关键术语</span></a></h3><blockquote><p>原来获取数据: <code>CPU &gt;&gt; 磁盘控制器 &gt;&gt; 内核缓冲区</code></p></blockquote><blockquote><p>DMA直接内存访问技术: <code>DMA控制器 &gt;&gt; 磁盘控制器 &gt;&gt; 内核缓冲区</code></p></blockquote><ol><li>用户缓冲区</li></ol><p>应用程序自己分配的内存区域</p><ol start="2"><li>内核缓冲区</li></ol><p>操作系统内核空间中的一块内存区域。内核缓冲区则在文件 I/O 过程中起到临时存储数据的作用</p><ol start="3"><li>页缓存 <code>Page Cache</code></li></ol><p>操作系统在内存中维护的一块区域，主要通过将最近访问过的文件页面存储在内存中，减少对磁盘的实际 I/O 操作次数。</p><ol start="4"><li>socket缓冲区</li></ol><p>发送和接收数据时临时存储数据的内存区域，靠近网卡.</p><h3 id="二、数据流转" tabindex="-1"><a class="header-anchor" href="#二、数据流转"><span>二、数据流转</span></a></h3><ol><li>应用程序Read文件</li></ol><p><code>磁盘 &gt;&gt; 内核缓冲区 &gt;&gt; 页缓存（Page Cache） &gt;&gt; 用户缓冲区</code></p><ol start="2"><li>应用程序Read文件且所需数据在页缓存中</li></ol><p><code>页缓存（Page Cache） &gt;&gt; 用户缓冲区</code></p><ol start="3"><li>应用程序Write数据</li></ol><p><code>用户缓冲区 &gt;&gt; 内核缓冲区 &gt;&gt; 磁盘</code></p><ol start="4"><li>应用程序Read文件发送网卡</li></ol><p><code>磁盘 &gt;&gt; 内核缓冲区 &gt;&gt; 页缓存（Page Cache） &gt;&gt; 用户缓冲区 &gt;&gt; Socket缓冲区 &gt;&gt; 网卡</code></p><h3 id="三、零拷贝技术" tabindex="-1"><a class="header-anchor" href="#三、零拷贝技术"><span>三、零拷贝技术</span></a></h3><ol><li>mmap + write</li></ol><p><code>内核缓冲区 &gt;&gt;(直接映射)&gt;&gt; 到用户空间</code></p><ol start="2"><li>sendfile</li></ol><p><code>内核缓冲区里 &gt;&gt;(skip用户缓冲区直接拷贝)&gt;&gt; socket 缓冲区 &gt;&gt; 网卡</code></p><ol start="3"><li>SG-DMA</li></ol><p><code>内核缓冲区里 &gt;&gt; (跳过用户\\Socket缓冲区直接拷贝) &gt;&gt; 网卡</code></p><h3 id="四、使用零拷贝的项目" tabindex="-1"><a class="header-anchor" href="#四、使用零拷贝的项目"><span>四、使用零拷贝的项目</span></a></h3><ol><li>Nginx</li></ol><div class="language-nginx.conf line-numbers-mode" data-highlighter="shiki" data-ext="nginx.conf" data-title="nginx.conf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http {</span></span>\n<span class="line"><span>...</span></span>\n<span class="line"><span>    # 内核缓冲区数据直接到Socket缓冲区</span></span>\n<span class="line"><span>    sendfile on</span></span>\n<span class="line"><span>...</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>kafka</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"># </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Kafka是Java项目</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"># Kafka底层传输文件使用了 `</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Java</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> NIO 库` 的 `transferTo` </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"># transferTo 底层使用了 sendfile</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"># 内核缓冲区 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 直接到</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Socket缓冲区</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  (跳过用户缓冲区)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transferForm</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FileChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fileChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> position</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> count) throws IOException {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> fileChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transferTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(position,count,socketChannel);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章"><span>相关文章</span></a></h3><p><a href="https://www.xiaolincoding.com/os/8_network_system/zero_copy.htm" target="_blank" rel="noopener noreferrer">什么是零拷贝</a></p>',36)]))}]]),l=JSON.parse('{"path":"/posts/linux/%E9%9B%B6%E6%8B%B7%E8%B4%9D.html","title":"零拷贝","lang":"zh-CN","frontmatter":{"description":"零拷贝 零拷贝（Zero-copy）是一种计算机操作技术，主要减少数据在不同存储区域之间的复制次数，提高数据传输效率. 一、关键术语 原来获取数据: CPU >> 磁盘控制器 >> 内核缓冲区 DMA直接内存访问技术: DMA控制器 >> 磁盘控制器 >> 内核缓冲区 用户缓冲区 应用程序自己分配的内存区域 内核缓冲区 操作系统内核空间中的一块内存区域...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/linux/%E9%9B%B6%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"零拷贝"}],["meta",{"property":"og:description","content":"零拷贝 零拷贝（Zero-copy）是一种计算机操作技术，主要减少数据在不同存储区域之间的复制次数，提高数据传输效率. 一、关键术语 原来获取数据: CPU >> 磁盘控制器 >> 内核缓冲区 DMA直接内存访问技术: DMA控制器 >> 磁盘控制器 >> 内核缓冲区 用户缓冲区 应用程序自己分配的内存区域 内核缓冲区 操作系统内核空间中的一块内存区域..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"零拷贝\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、关键术语","slug":"一、关键术语","link":"#一、关键术语","children":[]},{"level":3,"title":"二、数据流转","slug":"二、数据流转","link":"#二、数据流转","children":[]},{"level":3,"title":"三、零拷贝技术","slug":"三、零拷贝技术","link":"#三、零拷贝技术","children":[]},{"level":3,"title":"四、使用零拷贝的项目","slug":"四、使用零拷贝的项目","link":"#四、使用零拷贝的项目","children":[]},{"level":3,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"readingTime":{"minutes":1.77,"words":531},"filePathRelative":"posts/linux/零拷贝.md","excerpt":"\\n<blockquote>\\n<p>零拷贝（Zero-copy）是一种计算机操作技术，主要减少数据在不同存储区域之间的复制次数，提高数据传输效率.</p>\\n</blockquote>\\n<h3>一、关键术语</h3>\\n<blockquote>\\n<p>原来获取数据: <code>CPU &gt;&gt; 磁盘控制器 &gt;&gt; 内核缓冲区</code></p>\\n</blockquote>\\n<blockquote>\\n<p>DMA直接内存访问技术: <code>DMA控制器 &gt;&gt; 磁盘控制器 &gt;&gt; 内核缓冲区</code></p>\\n</blockquote>\\n<ol>\\n<li>用户缓冲区</li>\\n</ol>","autoDesc":true}')}}]);