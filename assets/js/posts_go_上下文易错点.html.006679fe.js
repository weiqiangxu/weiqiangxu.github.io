"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4238],{6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},5412:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>p});var e=a(641);const i={},l=(0,a(6262).A)(i,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="实例代码" tabindex="-1"><a class="header-anchor" href="#实例代码"><span>实例代码</span></a></h1><blockquote><p>解释一下WithTimeout的cancel是否要直接defer</p></blockquote><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package main</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import (</span></span>\n<span class="line"><span>\t&quot;context&quot;</span></span>\n<span class="line"><span>\t&quot;fmt&quot;</span></span>\n<span class="line"><span>\t&quot;time&quot;</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func ccc() context.Context {</span></span>\n<span class="line"><span>\tctx, cancel := context.WithTimeout(context.Background(), 4*time.Second)</span></span>\n<span class="line"><span>    // defer会在ccc执行完成以后立即调用</span></span>\n<span class="line"><span>    // 从而导致直接触发&lt;-ctx.Done</span></span>\n<span class="line"><span>    // 无法等到timeOut后触发</span></span>\n<span class="line"><span>\tdefer cancel()</span></span>\n<span class="line"><span>\treturn ctx</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func main() {</span></span>\n<span class="line"><span>\tctx := ccc()</span></span>\n<span class="line"><span>\tselect {</span></span>\n<span class="line"><span>\tcase &lt;-ctx.Done():</span></span>\n<span class="line"><span>\t\tfmt.Println(&quot;Context done.&quot;)</span></span>\n<span class="line"><span>\tcase &lt;-time.After(3 * time.Second):</span></span>\n<span class="line"><span>\t\tfmt.Println(&quot;Timeout after 3 seconds.&quot;)</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3)]))}]]),p=JSON.parse('{"path":"/posts/go/%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%93%E9%94%99%E7%82%B9.html","title":"上下文易错点","lang":"zh-CN","frontmatter":{"title":"上下文易错点","tags":["golang"],"categories":["golang"],"description":"实例代码 解释一下WithTimeout的cancel是否要直接defer","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%93%E9%94%99%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"上下文易错点"}],["meta",{"property":"og:description","content":"实例代码 解释一下WithTimeout的cancel是否要直接defer"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"golang"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"上下文易错点\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[],"readingTime":{"minutes":0.34,"words":101},"filePathRelative":"posts/go/上下文易错点.md","excerpt":"\\n<blockquote>\\n<p>解释一下WithTimeout的cancel是否要直接defer</p>\\n</blockquote>\\n<div class=\\"language-golang line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"golang\\" data-title=\\"golang\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>package main</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>import (</span></span>\\n<span class=\\"line\\"><span>\\t\\"context\\"</span></span>\\n<span class=\\"line\\"><span>\\t\\"fmt\\"</span></span>\\n<span class=\\"line\\"><span>\\t\\"time\\"</span></span>\\n<span class=\\"line\\"><span>)</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func ccc() context.Context {</span></span>\\n<span class=\\"line\\"><span>\\tctx, cancel := context.WithTimeout(context.Background(), 4*time.Second)</span></span>\\n<span class=\\"line\\"><span>    // defer会在ccc执行完成以后立即调用</span></span>\\n<span class=\\"line\\"><span>    // 从而导致直接触发&lt;-ctx.Done</span></span>\\n<span class=\\"line\\"><span>    // 无法等到timeOut后触发</span></span>\\n<span class=\\"line\\"><span>\\tdefer cancel()</span></span>\\n<span class=\\"line\\"><span>\\treturn ctx</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func main() {</span></span>\\n<span class=\\"line\\"><span>\\tctx := ccc()</span></span>\\n<span class=\\"line\\"><span>\\tselect {</span></span>\\n<span class=\\"line\\"><span>\\tcase &lt;-ctx.Done():</span></span>\\n<span class=\\"line\\"><span>\\t\\tfmt.Println(\\"Context done.\\")</span></span>\\n<span class=\\"line\\"><span>\\tcase &lt;-time.After(3 * time.Second):</span></span>\\n<span class=\\"line\\"><span>\\t\\tfmt.Println(\\"Timeout after 3 seconds.\\")</span></span>\\n<span class=\\"line\\"><span>\\t}</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);