"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2288],{6262:(s,i)=>{i.A=(s,i)=>{const e=s.__vccOpts||s;for(const[s,a]of i)e[s]=a;return e}},4763:(s,i,e)=>{e.r(i),e.d(i,{comp:()=>l,data:()=>t});var a=e(641);const n={},l=(0,e(6262).A)(n,[["render",function(s,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h3 id="分布式和微服务什么意思" tabindex="-1"><a class="header-anchor" href="#分布式和微服务什么意思"><span>分布式和微服务什么意思</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>单机系统就是程序部署到一台机器，所有的服务由这一台机器提供</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>分布式系统相对而言，是一组为了完成共同任务而协调工作的计算机节点组成,它们通过网络进行通讯的系统；</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>分布式系统是多个机器共同提供服务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>分布式系统拆分模式</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>水平切分：水平切分是指将同一个系统部署到多台机器上</span></span>\n<span class="line"><span>垂直切分：垂直切分是按照业务的维度进行拆分，将各个业务独立出来，单独开发和维护</span></span>\n<span class="line"><span>混合切分：混合切分是将水平切分和垂直切分结合起来的一种切分方法</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>微服务架构 - 大部分都是采用混合切分</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>所以说微服务是分布式的一个子集，微服务是将服务拆分，并且分布式部署</p></blockquote><h3 id="分布式系统面临的问题" tabindex="-1"><a class="header-anchor" href="#分布式系统面临的问题"><span>分布式系统面临的问题</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 分布式计算的八大谬论</span></span>\n<span class="line"><span>2. 通讯异常，网络分区，三态，节点故障</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分布式系统的设计原则" tabindex="-1"><a class="header-anchor" href="#分布式系统的设计原则"><span>分布式系统的设计原则</span></a></h3><ol><li>CAP原则</li><li>BASE理论</li></ol><h3 id="cap-一致-可用-容错" tabindex="-1"><a class="header-anchor" href="#cap-一致-可用-容错"><span>CAP 一致 可用 容错</span></a></h3><blockquote><p>容错通常是必须要有的</p></blockquote><ol><li>Consistency 一致性</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>分布式系统每个副本数据，用户读取数据都是最新的值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>Aviability 可用性 （及时可用）</li></ol><blockquote><p>重点在于系统对客户端请求的响应能力</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">系统能够及时响应客户端请求的能力，注意是及时。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>分区容错性 Partition tolerance （故障发生可用）</li></ol><blockquote><p>重点在于系统在面对网络分区这种故障情况时的生存能力</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">网络故障，各节点继续运行，网络恢复后能够重新整合。</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 分区容错性的实现</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据复制：任一节点故障，其他节点还有副本</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 异步通信：节点之间非实时同步，所以任一节点故障系统可以继续提供服务。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 故障检测和恢复：节点故障和恢复有心跳检测等机制自动处理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对于一个分布式系统来说-p-是一个基本要求" tabindex="-1"><a class="header-anchor" href="#对于一个分布式系统来说-p-是一个基本要求"><span>对于一个分布式系统来说，P 是一个基本要求</span></a></h3><h3 id="对于一个分布式系统来说-p-是一个基本要求-1" tabindex="-1"><a class="header-anchor" href="#对于一个分布式系统来说-p-是一个基本要求-1"><span>对于一个分布式系统来说，P 是一个基本要求</span></a></h3><h3 id="对于一个分布式系统来说-p-是一个基本要求-2" tabindex="-1"><a class="header-anchor" href="#对于一个分布式系统来说-p-是一个基本要求-2"><span>对于一个分布式系统来说，P 是一个基本要求</span></a></h3><h3 id="分布式系统的三种模式" tabindex="-1"><a class="header-anchor" href="#分布式系统的三种模式"><span>分布式系统的三种模式</span></a></h3><ol><li>AP</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1.保证服务可用（当某一个副本网络故障不影响）</span></span>\n<span class="line"><span>2.某一个信息丢失不影响系统继续运行</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Redis的集群就是这样，多个副本在同一个时刻不保证数据强一致</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>CP</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 强一致性（每个时刻每个副本数据一致）</span></span>\n<span class="line"><span>2. 消息丢失也正常提供服务</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>为什么没办法有Aviability可用性，因为为了满足强一致性，请求服务时候需要阻塞等待副本同步</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>AC</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 可用性</span></span>\n<span class="line"><span>2. 一致性</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>要任何时刻都立刻响应，且数据多个副本一致，就无法达到 Partition tolerance，因为消息丢失就无法提供服务了（数据一致性不可能）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Zookeeper 保证的是 CP 也就是强一致性，但是有时候服务会阻塞一下延迟响应</li><li>Redis集群 是AP，也就是每个时刻都是服务立即可用但是不保证每个副本数据都是最新的</li></ol><h3 id="base理论" tabindex="-1"><a class="header-anchor" href="#base理论"><span>BASE理论</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BASE理论中，一致性分为强一致性和弱一致性</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>强一致性：当用户更新数据之后，必须保证后续线程或者节点都能马上访问到最新的值</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>弱一致性：当用户更新数据之后，并不能保证后续线程或者节点都能马上访问到最新的值，它只能通过某种方法来保证最后的一致性</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',31)]))}]]),t=JSON.parse('{"path":"/posts/architecture/CAP.html","title":"CAP理论","lang":"zh-CN","frontmatter":{"title":"CAP理论","tags":["CAP"],"categories":["分布式"],"date":"2023-04-08T06:40:12.000Z","index_img":"/images/bg/computer.jpeg","description":"分布式和微服务什么意思 所以说微服务是分布式的一个子集，微服务是将服务拆分，并且分布式部署 分布式系统面临的问题 分布式系统的设计原则 CAP原则 BASE理论 CAP 一致 可用 容错 容错通常是必须要有的 Consistency 一致性 Aviability 可用性 （及时可用） 重点在于系统对客户端请求的响应能力 分区容错性 Partition ...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/architecture/CAP.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"CAP理论"}],["meta",{"property":"og:description","content":"分布式和微服务什么意思 所以说微服务是分布式的一个子集，微服务是将服务拆分，并且分布式部署 分布式系统面临的问题 分布式系统的设计原则 CAP原则 BASE理论 CAP 一致 可用 容错 容错通常是必须要有的 Consistency 一致性 Aviability 可用性 （及时可用） 重点在于系统对客户端请求的响应能力 分区容错性 Partition ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"CAP"}],["meta",{"property":"article:published_time","content":"2023-04-08T06:40:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CAP理论\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-08T06:40:12.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"分布式和微服务什么意思","slug":"分布式和微服务什么意思","link":"#分布式和微服务什么意思","children":[]},{"level":3,"title":"分布式系统面临的问题","slug":"分布式系统面临的问题","link":"#分布式系统面临的问题","children":[]},{"level":3,"title":"分布式系统的设计原则","slug":"分布式系统的设计原则","link":"#分布式系统的设计原则","children":[]},{"level":3,"title":"CAP 一致 可用 容错","slug":"cap-一致-可用-容错","link":"#cap-一致-可用-容错","children":[]},{"level":3,"title":"对于一个分布式系统来说，P 是一个基本要求","slug":"对于一个分布式系统来说-p-是一个基本要求","link":"#对于一个分布式系统来说-p-是一个基本要求","children":[]},{"level":3,"title":"对于一个分布式系统来说，P 是一个基本要求","slug":"对于一个分布式系统来说-p-是一个基本要求-1","link":"#对于一个分布式系统来说-p-是一个基本要求-1","children":[]},{"level":3,"title":"对于一个分布式系统来说，P 是一个基本要求","slug":"对于一个分布式系统来说-p-是一个基本要求-2","link":"#对于一个分布式系统来说-p-是一个基本要求-2","children":[]},{"level":3,"title":"分布式系统的三种模式","slug":"分布式系统的三种模式","link":"#分布式系统的三种模式","children":[]},{"level":3,"title":"BASE理论","slug":"base理论","link":"#base理论","children":[]}],"readingTime":{"minutes":3.33,"words":998},"filePathRelative":"posts/architecture/CAP.md","localizedDate":"2023年4月8日","excerpt":"<h3>分布式和微服务什么意思</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>单机系统就是程序部署到一台机器，所有的服务由这一台机器提供</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>分布式系统相对而言，是一组为了完成共同任务而协调工作的计算机节点组成,它们通过网络进行通讯的系统；</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>分布式系统是多个机器共同提供服务</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);