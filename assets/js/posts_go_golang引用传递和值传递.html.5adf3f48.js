"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3586],{6262:(e,a)=>{a.A=(e,a)=>{const n=e.__vccOpts||e;for(const[e,t]of a)n[e]=t;return n}},5144:(e,a,n)=>{n.r(a),n.d(a,{comp:()=>l,data:()=>s});var t=n(641);const i={},l=(0,n(6262).A)(i,[["render",function(e,a){return(0,t.uX)(),(0,t.CE)("div",null,a[0]||(a[0]=[(0,t.Fv)('<h3 id="一、为什么说golang的所有数据类型都是值传递" tabindex="-1"><a class="header-anchor" href="#一、为什么说golang的所有数据类型都是值传递"><span>一、为什么说golang的所有数据类型都是值传递</span></a></h3><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Go里面没有引用传递，Go语言是值传递</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="二、什么是引用类型和值类型" tabindex="-1"><a class="header-anchor" href="#二、什么是引用类型和值类型"><span>二、什么是引用类型和值类型</span></a></h3><ul><li>值类型 int\\float\\bool\\string\\array\\sturct等</li><li>引用类型 slice\\map\\channel\\interface\\func</li></ul><blockquote><p>当某一个数据类型作为返回值的时候，如果返回值可以为nil的表示为引用类型</p></blockquote><h3 id="相关疑问" tabindex="-1"><a class="header-anchor" href="#相关疑问"><span>相关疑问</span></a></h3><h4 id="_1-值传递为什么传递slice会改变原有数据" tabindex="-1"><a class="header-anchor" href="#_1-值传递为什么传递slice会改变原有数据"><span>1.值传递为什么传递slice会改变原有数据</span></a></h4><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>值类型来说在函数之间传递时候是深拷贝</span></span>\n<span class="line"><span>引用类型来说在函数之间传递是浅拷贝</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>slice是引用类型，传递的值是底层数组对应的内存地址，所以会改变原有值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-值传递还是引用传递如何区分" tabindex="-1"><a class="header-anchor" href="#_2-值传递还是引用传递如何区分"><span>2.值传递还是引用传递如何区分</span></a></h4><p>在值传递中，函数会将源参数的值复制到一个新的内存位置以供函数内部使用，因此源参数和内部参数指向不同的内存位置。在引用传递中，函数会接收源参数的内存地址，因此内部参数指向与源参数相同的内存位置，因此对其任何更改都会反映在源参数上。</p><blockquote><p>主要区分点是：函数内部参数是不是源参数的拷贝</p></blockquote><p>golang都是值传递，但有些时候函数内部可以改变到函数外部源参数，这是因为有些数据是引用类型，引用类型变量值就是原始值的指针，函数浅拷贝以后内部变量值是原始值的指针，所以更改会改变到外部的参数，但本质来说，函数在参数传递之后仍然是指拷贝了一份，将函数源参数值拷贝到函数内部赋值。</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h3><ul><li><a href="https://www.kancloud.cn/pshizhsysu/golang/2139494" target="_blank" rel="noopener noreferrer">kancloud.cn/pshizhsysu/值类型和引用类型是什么</a></li><li><a href="https://zhuanlan.zhihu.com/p/509431611" target="_blank" rel="noopener noreferrer">又拍云知乎-Golang是值传递还是引用传递</a></li><li><a href="https://zhuanlan.zhihu.com/p/542218435" target="_blank" rel="noopener noreferrer">码农在新加坡-Golang是值传递还是引用传递</a></li></ul>',14)]))}]]),s=JSON.parse('{"path":"/posts/go/golang%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%92%8C%E5%80%BC%E4%BC%A0%E9%80%92.html","title":"golang引用传递和值传递","lang":"zh-CN","frontmatter":{"title":"golang引用传递和值传递","index_img":"/images/bg/golang.webp","banner_img":"/images/bg/5.jpg","tags":["golang"],"categories":["golang"],"date":"2020-08-20T17:43:12.000Z","excerpt":"理解什么是值传递什么是引用传递吗，golang的结构体是值传递吗，切片是引用传递吗","hide":true,"description":"一、为什么说golang的所有数据类型都是值传递 二、什么是引用类型和值类型 值类型 int\\\\float\\\\bool\\\\string\\\\array\\\\sturct等 引用类型 slice\\\\map\\\\channel\\\\interface\\\\func 当某一个数据类型作为返回值的时候，如果返回值可以为nil的表示为引用类型 相关疑问 1.值传递为什么传递slice会改变...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/golang%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%92%8C%E5%80%BC%E4%BC%A0%E9%80%92.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"golang引用传递和值传递"}],["meta",{"property":"og:description","content":"一、为什么说golang的所有数据类型都是值传递 二、什么是引用类型和值类型 值类型 int\\\\float\\\\bool\\\\string\\\\array\\\\sturct等 引用类型 slice\\\\map\\\\channel\\\\interface\\\\func 当某一个数据类型作为返回值的时候，如果返回值可以为nil的表示为引用类型 相关疑问 1.值传递为什么传递slice会改变..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:published_time","content":"2020-08-20T17:43:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang引用传递和值传递\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-20T17:43:12.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、为什么说golang的所有数据类型都是值传递","slug":"一、为什么说golang的所有数据类型都是值传递","link":"#一、为什么说golang的所有数据类型都是值传递","children":[]},{"level":3,"title":"二、什么是引用类型和值类型","slug":"二、什么是引用类型和值类型","link":"#二、什么是引用类型和值类型","children":[]},{"level":3,"title":"相关疑问","slug":"相关疑问","link":"#相关疑问","children":[]},{"level":3,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"readingTime":{"minutes":1.9,"words":571},"filePathRelative":"posts/go/golang引用传递和值传递.md","localizedDate":"2020年8月21日","autoDesc":true}')}}]);