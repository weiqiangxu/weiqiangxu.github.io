"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8043],{6262:(e,s)=>{s.A=(e,s)=>{const n=e.__vccOpts||e;for(const[e,a]of s)n[e]=a;return n}},2902:(e,s,n)=>{n.r(s),n.d(s,{comp:()=>l,data:()=>t});var a=n(641);const i={},l=(0,n(6262).A)(i,[["render",function(e,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="tcp连接与抓包" tabindex="-1"><a class="header-anchor" href="#tcp连接与抓包"><span>tcp连接与抓包</span></a></h1><ol><li>使用golang做tcp网络编程创建client &amp;&amp; server</li><li>使用tcpdump监听客户端和服务端的连接情况</li></ol><h3 id="tcpdump" tabindex="-1"><a class="header-anchor" href="#tcpdump"><span>tcpdump</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># client</span></span>\n<span class="line"><span>sudo tcpdump -i lo0 host localhost and dst port 9292 -n</span></span>\n<span class="line"><span># server</span></span>\n<span class="line"><span>sudo tcpdump -i lo0 host localhost and src port 9292 -n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># src 9292</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>22:38:22.028257 IP 127.0.0.1.9292 &gt; 127.0.0.1.50139: Flags [S.], seq 2936404470, ack 2399477565, win 65535, options [mss 16344,nop,wscale 6,nop,nop,TS val 2141525572 ecr 2939320578,sackOK,eol], length 0</span></span>\n<span class="line"><span>22:38:22.028287 IP 127.0.0.1.9292 &gt; 127.0.0.1.50139: Flags [.], ack 1, win 6379, options [nop,nop,TS val 2141525572 ecr 2939320578], length 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># dst 9292</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>22:38:22.028149 IP 127.0.0.1.50139 &gt; 127.0.0.1.9292: Flags [S], seq 2399477564, win 65535, options [mss 16344,nop,wscale 6,nop,nop,TS val 2939320578 ecr 0,sackOK,eol], length 0</span></span>\n<span class="line"><span>22:38:22.028278 IP 127.0.0.1.50139 &gt; 127.0.0.1.9292: Flags [.], ack 2936404471, win 6379, options [nop,nop,TS val 2939320578 ecr 2141525572], length 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 简化一下</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>client   Flags [S],seq 2399477564, win 65535                     [SYN报文] [发完之后clent状态是SYN-SENT]</span></span>\n<span class="line"><span>server   Flags [S.],seq 2936404470, ack 2399477565, win 65535    [报文发送后server状态是SYN-RCVD]</span></span>\n<span class="line"><span>client   Flags [.],ack 2936404471, win 6379                      [报文发送后client状态是ESTABLISHED]  [注意这一次的报文可以携带客户端到服务端的数据了]</span></span>\n<span class="line"><span>                                                                 [服务端收到客户端报文后状态是ESTABLISHED]</span></span>\n<span class="line"><span>               </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 注意seq值和ack值总是相差1</span></span>\n<span class="line"><span># 注意握手成功后双方的状态都是ESTABLISHED</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># dst 9292</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>22:44:13.099483 IP 127.0.0.1.50943 &gt; 127.0.0.1.9292: Flags [F.], seq 0, ack 1, win 6379, options [nop,nop,TS val 1048610910 ecr 2373676954], length 0</span></span>\n<span class="line"><span>22:44:13.099714 IP 127.0.0.1.50943 &gt; 127.0.0.1.9292: Flags [.], ack 2, win 6379, options [nop,nop,TS val 1048610910 ecr 2373686619], length 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># src 9292</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>22:44:13.099535 IP 127.0.0.1.9292 &gt; 127.0.0.1.50943: Flags [.], ack 2, win 6379, options [nop,nop,TS val 2373686619 ecr 1048610910], length 0</span></span>\n<span class="line"><span>22:44:13.099681 IP 127.0.0.1.9292 &gt; 127.0.0.1.50943: Flags [F.], seq 1, ack 2, win 6379, options [nop,nop,TS val 2373686619 ecr 1048610910], length 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 四次挥手</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>client   Flags [F.], seq 0, ack 1, win 6379</span></span>\n<span class="line"><span>server   Flags [.], ack 2, win 6379</span></span>\n<span class="line"><span>server   Flags [F.], seq 1, ack 2, win 6379</span></span>\n<span class="line"><span>client   Flags [.], ack 2, win 6379</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="来学学tcp调优" tabindex="-1"><a class="header-anchor" href="#来学学tcp调优"><span>来学学TCP调优</span></a></h3><p><a href="https://mp.weixin.qq.com/s/fjnChU3MKNc_x-Wk7evLhg" target="_blank" rel="noopener noreferrer">换人！他连TCP这几个参数都不懂</a></p><h3 id="调优大纲" tabindex="-1"><a class="header-anchor" href="#调优大纲"><span>调优大纲</span></a></h3><ol><li>握手调优</li><li>挥手调优</li><li>传输调优</li></ol><h3 id="握手调优" tabindex="-1"><a class="header-anchor" href="#握手调优"><span>握手调优</span></a></h3><ol><li>client超时重传机制</li><li>server response &amp;&amp; Linux内核半连接队列溢出 &amp;&amp; 服务端重发SYN+ACK 报文 &amp;&amp; 服务端ESTABLISHED后变accept队列（全连接队列） &amp;&amp; 全连接队列溢出</li><li>client response</li></ol><h3 id="报文" tabindex="-1"><a class="header-anchor" href="#报文"><span>报文</span></a></h3><blockquote><p>SYN 的全称就叫 Synchronize Sequence Numbers(同步序列号)(TCP头部格式之中有保留的6位)</p></blockquote><ol><li>SYN</li><li>RST</li><li>FIN</li><li>ACK</li><li>URG</li><li>PSH</li></ol><h3 id="状态流转" tabindex="-1"><a class="header-anchor" href="#状态流转"><span>状态流转</span></a></h3><ol><li>SYN_SENT</li><li>SYN_RCV</li><li>ESTABLISHED</li></ol><h3 id="nginx调整半连接队列大小backlog" tabindex="-1"><a class="header-anchor" href="#nginx调整半连接队列大小backlog"><span>nginx调整半连接队列大小backlog</span></a></h3><h3 id="syncookies" tabindex="-1"><a class="header-anchor" href="#syncookies"><span>syncookies</span></a></h3><blockquote><p>开启 syncookies 功能就可以在不使用 SYN 半连接队列的情况下成功建立连接。</p></blockquote><h3 id="syn攻击" tabindex="-1"><a class="header-anchor" href="#syn攻击"><span>SYN攻击</span></a></h3><h3 id="服务器收到-ack-后连接建立成功-accept队列-全连接队列-溢出-tcp连接被丢弃" tabindex="-1"><a class="header-anchor" href="#服务器收到-ack-后连接建立成功-accept队列-全连接队列-溢出-tcp连接被丢弃"><span>服务器收到 ACK 后连接建立成功，accept队列（全连接队列）溢出，TCP连接被丢弃</span></a></h3><h3 id="服务端已经收到了ack-但是因为accept队列-全连接队列-溢出导致tcp连接被丢弃-告知客户端的话-客户端异常会收到-connection-reset-by-peer" tabindex="-1"><a class="header-anchor" href="#服务端已经收到了ack-但是因为accept队列-全连接队列-溢出导致tcp连接被丢弃-告知客户端的话-客户端异常会收到-connection-reset-by-peer"><span>服务端已经收到了ACK，但是因为accept队列（全连接队列）溢出导致TCP连接被丢弃，告知客户端的话，客户端异常会收到 connection reset by peer</span></a></h3><blockquote><p>服务端全连接队列溢出 connection reset by peer 正常来说服务端全连接溢出，server直接丢弃client.ack就好了，client过一会儿会自动重新发送ack 或者加大accpet队列长度</p></blockquote><h3 id="如何查看server的accpet队列长度" tabindex="-1"><a class="header-anchor" href="#如何查看server的accpet队列长度"><span>如何查看server的accpet队列长度</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ss -ltn</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看由于-accept-连接队列已满-而被丢弃的连接" tabindex="-1"><a class="header-anchor" href="#查看由于-accept-连接队列已满-而被丢弃的连接"><span>查看由于 accept 连接队列已满，而被丢弃的连接</span></a></h3><h3 id="http-请求必须在一个-rtt-从客户端到服务器一个往返的时间-后才能发送-是什么意思" tabindex="-1"><a class="header-anchor" href="#http-请求必须在一个-rtt-从客户端到服务器一个往返的时间-后才能发送-是什么意思"><span>HTTP 请求必须在一个 RTT（从客户端到服务器一个往返的时间）后才能发送 是什么意思</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>意味着 client SYN 之后 server response SYN+ACK 之后</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>client此时就可以发送数据了</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>注意此时服务端是半连接队列状态client就可以发送数据了</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>RTT是一个往返</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="四次挥手的性能提升" tabindex="-1"><a class="header-anchor" href="#四次挥手的性能提升"><span>四次挥手的性能提升</span></a></h3><h3 id="仅仅涉及两种报文" tabindex="-1"><a class="header-anchor" href="#仅仅涉及两种报文"><span>仅仅涉及两种报文</span></a></h3><ol><li>FIN</li><li>ACK</li></ol><h3 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h3><ol><li>ESTABLISHED</li><li>FIN_WAIT1</li><li>CLOSE_WAIT</li><li>FIN_WAIT2</li><li>LAST_ACK</li><li>TIME_WAIT</li></ol><h3 id="主动关闭连接的-才有-time-wait-状态" tabindex="-1"><a class="header-anchor" href="#主动关闭连接的-才有-time-wait-状态"><span>主动关闭连接的，才有 TIME_WAIT 状态</span></a></h3><h3 id="优化思路一-主动方的优化" tabindex="-1"><a class="header-anchor" href="#优化思路一-主动方的优化"><span>优化思路一：主动方的优化</span></a></h3><blockquote><p>关闭的方式： 1.RST 报文关闭 2.FIN 报文关闭</p></blockquote><h3 id="进程异常退出-内核发送rst报文" tabindex="-1"><a class="header-anchor" href="#进程异常退出-内核发送rst报文"><span>进程异常退出，内核发送RST报文</span></a></h3><h3 id="滑动窗口是如何影响传输速度的" tabindex="-1"><a class="header-anchor" href="#滑动窗口是如何影响传输速度的"><span>滑动窗口是如何影响传输速度的</span></a></h3><ol><li>包的往返时间越长，网络的吞吐量就会越低；所以单程携带更多，就是批量发送报文批量处理报 文字</li></ol><p><a href="https://mp.weixin.qq.com/s/jomA0WT6zul1zrGzuBqOkA" target="_blank" rel="noopener noreferrer">收到RST，就一定会断开TCP连接吗？</a></p><blockquote><p>本端收到远端发来的RST后，内核已经认为此链接已经关闭</p></blockquote><ol><li>应用层尝试去执行 读数据操作，比如recv，应用层就会收到 Connection reset by peer 的报错，意思是远端已经关闭连接</li><li>应用层尝试去执行写数据操作，比如send，那么应用层就会收到 Broken pipe 的报错，意思是发送通道已经坏了</li></ol><h3 id="http会主动断开连接吗" tabindex="-1"><a class="header-anchor" href="#http会主动断开连接吗"><span>http会主动断开连接吗</span></a></h3><h3 id="如果线上网站出现了broken-pipe怎么查bug呢" tabindex="-1"><a class="header-anchor" href="#如果线上网站出现了broken-pipe怎么查bug呢"><span>如果线上网站出现了broken pipe怎么查BUG呢</span></a></h3>',52)]))}]]),t=JSON.parse('{"path":"/posts/network/tcp%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%8A%93%E5%8C%85.html","title":"TCP连接与抓包","lang":"zh-CN","frontmatter":{"title":"TCP连接与抓包","tags":["network"],"categories":["network"],"description":"tcp连接与抓包 使用golang做tcp网络编程创建client && server 使用tcpdump监听客户端和服务端的连接情况 tcpdump 三次握手 四次挥手 来学学TCP调优 换人！他连TCP这几个参数都不懂 调优大纲 握手调优 挥手调优 传输调优 握手调优 client超时重传机制 server response && Linux内核半...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/network/tcp%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%8A%93%E5%8C%85.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"TCP连接与抓包"}],["meta",{"property":"og:description","content":"tcp连接与抓包 使用golang做tcp网络编程创建client && server 使用tcpdump监听客户端和服务端的连接情况 tcpdump 三次握手 四次挥手 来学学TCP调优 换人！他连TCP这几个参数都不懂 调优大纲 握手调优 挥手调优 传输调优 握手调优 client超时重传机制 server response && Linux内核半..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"network"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TCP连接与抓包\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"tcpdump","slug":"tcpdump","link":"#tcpdump","children":[]},{"level":3,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]},{"level":3,"title":"四次挥手","slug":"四次挥手","link":"#四次挥手","children":[]},{"level":3,"title":"来学学TCP调优","slug":"来学学tcp调优","link":"#来学学tcp调优","children":[]},{"level":3,"title":"调优大纲","slug":"调优大纲","link":"#调优大纲","children":[]},{"level":3,"title":"握手调优","slug":"握手调优","link":"#握手调优","children":[]},{"level":3,"title":"报文","slug":"报文","link":"#报文","children":[]},{"level":3,"title":"状态流转","slug":"状态流转","link":"#状态流转","children":[]},{"level":3,"title":"nginx调整半连接队列大小backlog","slug":"nginx调整半连接队列大小backlog","link":"#nginx调整半连接队列大小backlog","children":[]},{"level":3,"title":"syncookies","slug":"syncookies","link":"#syncookies","children":[]},{"level":3,"title":"SYN攻击","slug":"syn攻击","link":"#syn攻击","children":[]},{"level":3,"title":"服务器收到 ACK 后连接建立成功，accept队列（全连接队列）溢出，TCP连接被丢弃","slug":"服务器收到-ack-后连接建立成功-accept队列-全连接队列-溢出-tcp连接被丢弃","link":"#服务器收到-ack-后连接建立成功-accept队列-全连接队列-溢出-tcp连接被丢弃","children":[]},{"level":3,"title":"服务端已经收到了ACK，但是因为accept队列（全连接队列）溢出导致TCP连接被丢弃，告知客户端的话，客户端异常会收到 connection reset by peer","slug":"服务端已经收到了ack-但是因为accept队列-全连接队列-溢出导致tcp连接被丢弃-告知客户端的话-客户端异常会收到-connection-reset-by-peer","link":"#服务端已经收到了ack-但是因为accept队列-全连接队列-溢出导致tcp连接被丢弃-告知客户端的话-客户端异常会收到-connection-reset-by-peer","children":[]},{"level":3,"title":"如何查看server的accpet队列长度","slug":"如何查看server的accpet队列长度","link":"#如何查看server的accpet队列长度","children":[]},{"level":3,"title":"查看由于 accept 连接队列已满，而被丢弃的连接","slug":"查看由于-accept-连接队列已满-而被丢弃的连接","link":"#查看由于-accept-连接队列已满-而被丢弃的连接","children":[]},{"level":3,"title":"HTTP 请求必须在一个 RTT（从客户端到服务器一个往返的时间）后才能发送 是什么意思","slug":"http-请求必须在一个-rtt-从客户端到服务器一个往返的时间-后才能发送-是什么意思","link":"#http-请求必须在一个-rtt-从客户端到服务器一个往返的时间-后才能发送-是什么意思","children":[]},{"level":3,"title":"四次挥手的性能提升","slug":"四次挥手的性能提升","link":"#四次挥手的性能提升","children":[]},{"level":3,"title":"仅仅涉及两种报文","slug":"仅仅涉及两种报文","link":"#仅仅涉及两种报文","children":[]},{"level":3,"title":"状态","slug":"状态","link":"#状态","children":[]},{"level":3,"title":"主动关闭连接的，才有 TIME_WAIT 状态","slug":"主动关闭连接的-才有-time-wait-状态","link":"#主动关闭连接的-才有-time-wait-状态","children":[]},{"level":3,"title":"优化思路一：主动方的优化","slug":"优化思路一-主动方的优化","link":"#优化思路一-主动方的优化","children":[]},{"level":3,"title":"进程异常退出，内核发送RST报文","slug":"进程异常退出-内核发送rst报文","link":"#进程异常退出-内核发送rst报文","children":[]},{"level":3,"title":"滑动窗口是如何影响传输速度的","slug":"滑动窗口是如何影响传输速度的","link":"#滑动窗口是如何影响传输速度的","children":[]},{"level":3,"title":"http会主动断开连接吗","slug":"http会主动断开连接吗","link":"#http会主动断开连接吗","children":[]},{"level":3,"title":"如果线上网站出现了broken pipe怎么查BUG呢","slug":"如果线上网站出现了broken-pipe怎么查bug呢","link":"#如果线上网站出现了broken-pipe怎么查bug呢","children":[]}],"readingTime":{"minutes":3.96,"words":1187},"filePathRelative":"posts/network/tcp连接与抓包.md","excerpt":"\\n<ol>\\n<li>使用golang做tcp网络编程创建client &amp;&amp; server</li>\\n<li>使用tcpdump监听客户端和服务端的连接情况</li>\\n</ol>\\n<h3>tcpdump</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span># client</span></span>\\n<span class=\\"line\\"><span>sudo tcpdump -i lo0 host localhost and dst port 9292 -n</span></span>\\n<span class=\\"line\\"><span># server</span></span>\\n<span class=\\"line\\"><span>sudo tcpdump -i lo0 host localhost and src port 9292 -n</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);