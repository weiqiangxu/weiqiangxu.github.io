"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9093],{6262:(s,e)=>{e.A=(s,e)=>{const i=s.__vccOpts||s;for(const[s,a]of e)i[s]=a;return i}},4211:(s,e,i)=>{i.r(e),i.d(e,{comp:()=>l,data:()=>t});var a=i(641);const n={},l=(0,i(6262).A)(n,[["render",function(s,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h3 id="一、消耗多少内存" tabindex="-1"><a class="header-anchor" href="#一、消耗多少内存"><span>一、消耗多少内存</span></a></h3><h4 id="_1-怎么看当前实例消耗内存大小" tabindex="-1"><a class="header-anchor" href="#_1-怎么看当前实例消耗内存大小"><span>1. 怎么看当前实例消耗内存大小</span></a></h4><p><a href="https://weiqiangxu.github.io/2023/04/12/prometheus/%E6%9F%A5%E7%9C%8Bprometheus%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98/" target="_blank" rel="noopener noreferrer">查看prometheus占用内存大小</a></p><h4 id="_2-内存消耗的来源是哪些" tabindex="-1"><a class="header-anchor" href="#_2-内存消耗的来源是哪些"><span>2. 内存消耗的来源是哪些</span></a></h4><ul><li>查询负载</li><li>指标数据（落盘机制）</li></ul><h4 id="_3-影响内存消耗的配置有哪些" tabindex="-1"><a class="header-anchor" href="#_3-影响内存消耗的配置有哪些"><span>3. 影响内存消耗的配置有哪些</span></a></h4><ul><li><p><code>scrape_interval</code>和<code>evaluation_interval</code>：这两个参数分别控制着Prometheus的采集频率和计算频率，值越小，内存消耗越高</p></li><li><p><code>retention</code>：这个参数控制着数据的保留时间，值越大，内存消耗越高(查询范围大的时候)。 默认保留数据15天也就是在磁盘超过15天的数据会被清理。 --storage.tsdb.retention.time=15d</p></li><li><p><code>chunk_size</code>：这个参数控制着每个时间序列数据块的大小，值越大，内存消耗越高。 --storage.tsdb.max-block-duration（MaxBlockDuration）TSDB 存储时每个块的最大时间范围。默认值为 2 小时 --storage.tsdb.max-block-chunk-segment-size(MaxBlockChunkSegmentSize)默认值为32MB 控制每个块（block）中的chunk在持久化时是否分割成多个片段（segment），以及每个片段的大小</p></li><li><p><code>query.max-samples</code>：这个参数控制着每个查询返回的最大样本数，值越大，内存消耗越高。 指定了查询语句返回的最大样本数。它是一个安全机制，用于避免由于查询错误或者滥用，导致过多的样本数被返回 参数--query.max-samples默认值为5000w</p></li></ul><h4 id="_3-怎样做可以降低内存消耗" tabindex="-1"><a class="header-anchor" href="#_3-怎样做可以降低内存消耗"><span>3. 怎样做可以降低内存消耗</span></a></h4><ul><li>落盘机制（缩小数据块加速落盘）</li><li>缩小指标数量</li><li>限制查询时间范围</li><li>减少标签数量</li></ul><h4 id="_4-场景模拟" tabindex="-1"><a class="header-anchor" href="#_4-场景模拟"><span>4. 场景模拟</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>假设有1000个指标，每个指标有10个标签，每个标签有10种值类型，消耗的内存大小</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Number of Time Series(时间序列数量):100,000</span></span>\n<span class="line"><span>Average Labels Per Time Series(每个时间序列上平均的标签数):10</span></span>\n<span class="line"><span>Number of Unique Label Pairs(一个时间序列的标签组合数量):100</span></span>\n<span class="line"><span>Average Bytes per Label Pair(平均每个标签对所占用的字节数):20</span></span>\n<span class="line"><span>Scrape Interval(拉取间隔):15s</span></span>\n<span class="line"><span>Bytes per Sample(每个样本值所占用的字节数):4</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>理论上综合消耗内存：827MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、磁盘占用多少" tabindex="-1"><a class="header-anchor" href="#二、磁盘占用多少"><span>二、磁盘占用多少</span></a></h3><h4 id="_1-影响磁盘损耗的因素有" tabindex="-1"><a class="header-anchor" href="#_1-影响磁盘损耗的因素有"><span>1. 影响磁盘损耗的因素有：</span></a></h4><ul><li>样本数据的数量</li><li>每个数据点的标签数量和标签值的长度</li><li>数据点的采样频率</li><li>存储时间范围</li></ul><h4 id="_2-场景" tabindex="-1"><a class="header-anchor" href="#_2-场景"><span>2. 场景</span></a></h4><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>如果每5秒钟采集 2000个样本，每个样本在磁盘占用大约1~2字节，假设2字节</span></span>\n<span class="line"><span>那么30天大概需要 0.96GB</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2000 * (86400 / 5) * 30 / (1024*1024*1024) = 0.96GB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、cpu消耗情况" tabindex="-1"><a class="header-anchor" href="#三、cpu消耗情况"><span>三、CPU消耗情况</span></a></h3><h4 id="_1-怎么查看cpu消耗" tabindex="-1"><a class="header-anchor" href="#_1-怎么查看cpu消耗"><span>1. 怎么查看cpu消耗</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># metrics端点查看</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> curl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:9300/metrics</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指标名称</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">process_cpu_seconds_total</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># top命令查看</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prometheus</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$ top</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> ${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-cpu消耗大小" tabindex="-1"><a class="header-anchor" href="#_2-cpu消耗大小"><span>2. cpu消耗大小</span></a></h4><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 场景描述</span></span>\n<span class="line"><span>prometheus启动时长7天左右，process_cpu_seconds_total大概是 1260.77s</span></span>\n<span class="line"><span>平均每小时占用cpu 7.5秒</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-影响cpu消耗的因素" tabindex="-1"><a class="header-anchor" href="#_3-影响cpu消耗的因素"><span>3. 影响cpu消耗的因素</span></a></h4><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>作为一个开源的监控系统，Prometheus 的 CPU 消耗并不算特别大。</span></span>\n<span class="line"><span>它的 CPU 消耗主要来源于收集数据、数据进行存储和分析以便后续的查询和报警</span></span>\n<span class="line"><span> Prometheus 使用了一些高效的算法和技术，它的 CPU 消耗并不会特别高</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-如何降低cpu消耗" tabindex="-1"><a class="header-anchor" href="#_4-如何降低cpu消耗"><span>4. 如何降低cpu消耗</span></a></h4><ul><li>降低抓取频率</li><li>缩小指标种类</li><li>优化内存分配</li><li>优化查询（如时间范围）</li></ul><h3 id="四、查询优化" tabindex="-1"><a class="header-anchor" href="#四、查询优化"><span>四、查询优化</span></a></h3><h4 id="_1-查询带来的内存消耗多大" tabindex="-1"><a class="header-anchor" href="#_1-查询带来的内存消耗多大"><span>1. 查询带来的内存消耗多大</span></a></h4><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 范围查询1个月内一个指标的所有样本</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>假设指标每秒钟有1个样本，一个月大概有30 * 24 * 60 * 60 = 2,592,000个样本</span></span>\n<span class="line"><span>假设该指标的值是64位双精度浮点数，则每个样本需要8个字节。</span></span>\n<span class="line"><span>因此，查询一个月内的所有样本将需要大约20 MB的内存。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>但真实的场景下，查询1个月的所有样本，不会把所有样本读取</span></span>\n<span class="line"><span>会设置步长，并且设置标签可以筛选掉很多数据;</span></span>\n<span class="line"><span>所以1个查询最多也就10MB不到，并发20个图表的情况下是200MB</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>查询消耗取决于TSDB查询性能</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-如何优化查询降低内存消耗" tabindex="-1"><a class="header-anchor" href="#_2-如何优化查询降低内存消耗"><span>2. 如何优化查询降低内存消耗</span></a></h4><ul><li>缩小时间范围</li><li>查询带着具体标签值查询</li><li>多个Prometheus实例分摊查询压力</li><li>全局配置超时global.query_timeout:30s</li><li>单个查询5min以内数据并配置10s超时 query_name{label=value}[5m:10s]</li></ul><h4 id="_3-如何强制限制查询时间范围" tabindex="-1"><a class="header-anchor" href="#_3-如何强制限制查询时间范围"><span>3. 如何强制限制查询时间范围</span></a></h4><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>storage.retention.time</span></span>\n<span class="line"><span>历史数据存储最大时长就等于了最大的查询的时长范围</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关疑问" tabindex="-1"><a class="header-anchor" href="#相关疑问"><span>相关疑问</span></a></h3><ul><li><p>理论上prometheus的内存和指标等计算规则是什么</p></li><li><p>evaluation 和 scrape 是什么意思</p></li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>evaluation_interval被设置为1分钟。Prometheus会在每分钟计算一次告警规则和记录规则。</span></span>\n<span class="line"><span>scrape_interval被设置为15秒，表示Prometheus每15秒向job_name为prometheus的job收集监控数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>chunk_size是什么意思</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>一个概念，tsdb的数据块大小，以时间为单位的。</span></span>\n<span class="line"><span>在prometheus的main.go之中有配置项（storate.tsdb为前缀的配置）</span></span>\n<span class="line"><span>默认2小时；</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1. 当查询Prometheus时，如果需要的数据超出了一个块的范围，那么Prometheus会将多个块合并成一个大块</span></span>\n<span class="line"><span>然后在该大块上执行查询操作。chunk_size参数的值越小，需要合并的块的数量就越多，查询效率就越低；</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>2. 设置的块很大查询的时候如果需要合并数据块，又会因为合并的时间很久而降低了查询效率；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>storage.tsdb.max-block-duration的具体意义</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>该参数确实可以影响Prometheus的落盘机制的时间，因为它决定了TSDB块文件的最大持续时间。</span></span>\n<span class="line"><span>当块文件的持续时间达到该参数设置的值时，Prometheus会停止在该文件中写入新的数据，并创建一个新的块文件。</span></span>\n<span class="line"><span>从而实现了落盘机制。默认情况下，该参数设置为2小时。</span></span>\n<span class="line"><span>因此，可以通过调整该参数的值来控制Prometheus的落盘机制的时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间序列</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>每个指标（Metric）都有一个名称（Name）和多个标签（Label）</span></span>\n<span class="line"><span>指标将与时间戳形成一个样本（Sample），它包含指标值、时间戳和标签值。</span></span>\n<span class="line"><span>这些样本被存储在称为时间序列（Time Series）的数据结构中。</span></span>\n<span class="line"><span>时间序列将由指标名称和标签集合唯一确定</span></span>\n<span class="line"><span>每一个时间序列由指标名称和一组标签共同标识</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>prometheus理论上每个样本在磁盘之中占据多少内存</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>prometheus的存储模型是基于TSDB，影响样本在磁盘占据内存大小的因素有：</span></span>\n<span class="line"><span>压缩格式、标签数量、附加属性预测、抽样和分析等；</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>通常情况下，一个时间序列的每个样本占用的磁盘空间大约在1-2字节左右</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>process_cpu_seconds_total指标</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>process_cpu_seconds_total是Prometheus指标名称，表示当前进程（一个应用程序）的CPU使用时间总量。</span></span>\n<span class="line"><span>它是一个累加器指标，可以用来监控进程的CPU利用率和运行时间。</span></span>\n<span class="line"><span>该指标记录了进程启动以来的总CPU时间，单位为秒。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>文件拷贝data目录时候网络选择问题</li></ul><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>待定...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="相关资料" tabindex="-1"><a class="header-anchor" href="#相关资料"><span>相关资料</span></a></h3><p><a href="https://www.robustperception.io/how-much-ram-does-prometheus-2-x-need-for-cardinality-and-ingestion/" target="_blank" rel="noopener noreferrer">官方计算prometheus理论上的内存消耗</a><a href="https://www.kancloud.cn/pshizhsysu/prometheus/1803792" target="_blank" rel="noopener noreferrer">Series在prometheus是什么概念</a><a href="https://yasongxu.gitbook.io/container-monitor/yi-.-kai-yuan-fang-an/di-2-zhang-prometheus/prometheus-use" target="_blank" rel="noopener noreferrer">yasongxu.gitbook高可用完问题-大内存问题以及容量规划</a><a href="http://www.xuyasong.com/?p=1601" target="_blank" rel="noopener noreferrer">容器监控实践—Prometheus存储机制</a></p>',50)]))}]]),t=JSON.parse('{"path":"/posts/prometheus/prometheus%E7%9A%84%E8%B5%84%E6%BA%90%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90.html","title":"prometheus的资源占用分析","lang":"zh-CN","frontmatter":{"title":"prometheus的资源占用分析","index_img":"/images/prometheus_icon.jpeg","tags":["prometheus","api","监控","内存分析"],"categories":["prometheus"],"date":"2023-04-13T16:15:12.000Z","excerpt":"理解prometheus的内存消耗波动曲线、磁盘占用大小计算规则等","sticky":1,"description":"一、消耗多少内存 1. 怎么看当前实例消耗内存大小 查看prometheus占用内存大小 2. 内存消耗的来源是哪些 查询负载 指标数据（落盘机制） 3. 影响内存消耗的配置有哪些 scrape_interval和evaluation_interval：这两个参数分别控制着Prometheus的采集频率和计算频率，值越小，内存消耗越高 retentio...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/prometheus/prometheus%E7%9A%84%E8%B5%84%E6%BA%90%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"prometheus的资源占用分析"}],["meta",{"property":"og:description","content":"一、消耗多少内存 1. 怎么看当前实例消耗内存大小 查看prometheus占用内存大小 2. 内存消耗的来源是哪些 查询负载 指标数据（落盘机制） 3. 影响内存消耗的配置有哪些 scrape_interval和evaluation_interval：这两个参数分别控制着Prometheus的采集频率和计算频率，值越小，内存消耗越高 retentio..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"prometheus"}],["meta",{"property":"article:tag","content":"api"}],["meta",{"property":"article:tag","content":"监控"}],["meta",{"property":"article:tag","content":"内存分析"}],["meta",{"property":"article:published_time","content":"2023-04-13T16:15:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"prometheus的资源占用分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-13T16:15:12.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、消耗多少内存","slug":"一、消耗多少内存","link":"#一、消耗多少内存","children":[]},{"level":3,"title":"二、磁盘占用多少","slug":"二、磁盘占用多少","link":"#二、磁盘占用多少","children":[]},{"level":3,"title":"三、CPU消耗情况","slug":"三、cpu消耗情况","link":"#三、cpu消耗情况","children":[]},{"level":3,"title":"四、查询优化","slug":"四、查询优化","link":"#四、查询优化","children":[]},{"level":3,"title":"相关疑问","slug":"相关疑问","link":"#相关疑问","children":[]},{"level":3,"title":"相关资料","slug":"相关资料","link":"#相关资料","children":[]}],"readingTime":{"minutes":6.66,"words":1997},"filePathRelative":"posts/prometheus/prometheus的资源占用分析.md","localizedDate":"2023年4月14日","autoDesc":true}')}}]);