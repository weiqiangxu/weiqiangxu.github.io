"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},1738:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>e});var n=a(641);const l={},t=(0,a(6262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>map</span></a></h1><h3 id="一、主要api" tabindex="-1"><a class="header-anchor" href="#一、主要api"><span>一、主要API</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;key1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;key1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、底层的数据结构" tabindex="-1"><a class="header-anchor" href="#二、底层的数据结构"><span>二、底层的数据结构</span></a></h3><h5 id="_1-hmap结构体" tabindex="-1"><a class="header-anchor" href="#_1-hmap结构体"><span>1.hmap结构体</span></a></h5><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// runtime\\map.go</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> hmap</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tcount</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     int</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // # Map的元素数量</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tB</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         uint8</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 桶数量是 2^B，其中 元素数量 （count） / 桶数量 （2^B） = 负载因子</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tbuckets</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Pointer</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 一共有 2^B 个桶数组（内存分配连续的bmap）</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\toldbuckets</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Pointer</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 发生桶扩容的时候，旧桶就是这个地址</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tnevacuate</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  uintptr</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 渐进式扩容时候下一个要迁移的旧桶编号</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// bucket指向的是bmap数组</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这个就是所谓的 `bucket array（桶数组）`</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bmap1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bmap2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bmap3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-桶bmap" tabindex="-1"><a class="header-anchor" href="#_2-桶bmap"><span>2.桶bmap</span></a></h5><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// A bucket for a Go map.</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> bmap</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// tophash 哈希值的高bit位</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 最多存储 8个键值对</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 数据存储的形式是: tophash1\\tophash2...k1\\k2...\\v1\\v2... overflow *bmap</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果当前的桶满了(超过8个)会创建一个bmap用作溢出桶关联</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\ttophash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">abi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MapBucketCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint8</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哈希冲突：GO的哈希冲突指的不是哈希值一样，而是哈希值的低B位一样放在同一个桶 bmap 之中。</p><h5 id="_3-key哈希值" tabindex="-1"><a class="header-anchor" href="#_3-key哈希值"><span>3.Key哈希值</span></a></h5><p>对Map的Key获取哈希值，使用哈希的低位（B位）可以确定元素放在哪个桶 bamp之中，（因为桶的数量是 2^B），如果B=1那么有2个桶，那么最后一位bit位足够均衡分配具体哪个桶存放。</p><blockquote><p>哈希值的低B位数值相同的 Key 会被放在同一个桶 bmap 之中。</p></blockquote><p>在同一个 bmap 桶的数据，哈希值高位的会作为计算是否值匹配。</p><h5 id="_4-扩容" tabindex="-1"><a class="header-anchor" href="#_4-扩容"><span>4.扩容</span></a></h5><ol><li>翻倍扩容</li></ol><p>当元素数量越来越多，桶 bmap 的数量不够的时候，每个桶的元素都容易超过 8个，就会有很多溢出桶，导致查找效率变低。就需要增加桶 bmap 的数量，也就是扩容。</p><p>阙值：<code>元素数量 （count） / 桶数量 （2^B） = 6.5</code></p><p>当元素数量增长到阙值 <code> count/(2^B) &gt; 6.5</code> 的时候，桶数量<code>翻倍扩容</code>，其实是重新创建一个桶数组存储元素，也就是 hmap.Bucket 指向的数组会更改。</p><p>Go使用的是渐进式扩容:</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> hmap</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tcount</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     int</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // # Map的元素数量</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tB</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         uint8</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // count/(2^B) &gt; 6.5</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tbuckets</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Pointer</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 指向新的 bmap数组 (Size翻倍后的)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\toldbuckets</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Pointer</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // oldBucket指向 旧的bmap数组</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tnevacuate</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  uintptr</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 渐进式扩容时候下一个要迁移的旧桶编号</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>等量扩容</li></ol><blockquote><p>Key删除了很多以后，负载因子没有超过阙值，但是溢出桶数量却很大。</p></blockquote><p>当溢出桶 <code>overflow bmap</code> 的数量超过常规桶 <code>bmap</code>的时候，需要<code>等量扩容</code>,创建和旧桶数量一样多的新桶，主要的作用是：让元素在桶数组之中排列的更加紧凑，将溢出桶的数量重新挪到常规桶之中。同时也提高了访问效率（不用从常规桶再到溢出桶查找数据）。</p><ol start="3"><li>扩容时键值对迁移时机</li></ol><p>查找操作：当对map进行查找操作时，如果访问的桶正在进行扩容，那么会在查找目标键值对的同时，将该桶中的一个键值对迁移到新桶中。 插入操作：当向map中插入一个新的键值对时，如果访问的桶正在进行扩容，那么会在插入新键值对的同时，将该桶中的一个键值对迁移到新桶中。 遍历操作：在对map进行遍历（如使用for range循环）时，每次访问一个桶时，如果该桶正在进行扩容，就会将该桶中的一个键值对迁移到新桶中。</p><p>注意：如果一个正在扩容的map，进行range的话，也不会直接发生迁移所有，在range遍历过程中，只会在访问到特定桶时，如果该桶正在扩容，就迁移该桶中的一个键值对，并不会一次性迁移所有的元素。</p><h3 id="三、设计" tabindex="-1"><a class="header-anchor" href="#三、设计"><span>三、设计</span></a></h3><ol><li>优点：动态大小、高效的查找性能。</li><li>缺点：无序、并发安全。</li></ol>',29)]))}]]),e=JSON.parse('{"path":"/posts/go/map%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"map","lang":"zh-CN","frontmatter":{"description":"map 一、主要API 二、底层的数据结构 1.hmap结构体 2.桶bmap 哈希冲突：GO的哈希冲突指的不是哈希值一样，而是哈希值的低B位一样放在同一个桶 bmap 之中。 3.Key哈希值 对Map的Key获取哈希值，使用哈希的低位（B位）可以确定元素放在哪个桶 bamp之中，（因为桶的数量是 2^B），如果B=1那么有2个桶，那么最后一位bit...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/go/map%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"map"}],["meta",{"property":"og:description","content":"map 一、主要API 二、底层的数据结构 1.hmap结构体 2.桶bmap 哈希冲突：GO的哈希冲突指的不是哈希值一样，而是哈希值的低B位一样放在同一个桶 bmap 之中。 3.Key哈希值 对Map的Key获取哈希值，使用哈希的低位（B位）可以确定元素放在哪个桶 bamp之中，（因为桶的数量是 2^B），如果B=1那么有2个桶，那么最后一位bit..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"map\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、主要API","slug":"一、主要api","link":"#一、主要api","children":[]},{"level":3,"title":"二、底层的数据结构","slug":"二、底层的数据结构","link":"#二、底层的数据结构","children":[]},{"level":3,"title":"三、设计","slug":"三、设计","link":"#三、设计","children":[]}],"readingTime":{"minutes":3.44,"words":1033},"filePathRelative":"posts/go/map实现原理.md","excerpt":"\\n<h3>一、主要API</h3>\\n<div class=\\"language-go line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"go\\" data-title=\\"go\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">m</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> :=</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> make</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">map</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">string</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">]</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">m</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"key1\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">] </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">delete</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">m</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"key1\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);