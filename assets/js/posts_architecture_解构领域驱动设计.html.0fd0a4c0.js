"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6930],{6262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}},4900:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>l,data:()=>p});var e=a(641);const i={},l=(0,a(6262).A)(i,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,n[0]||(n[0]=[(0,e.Fv)('<h3 id="专业术语" tabindex="-1"><a class="header-anchor" href="#专业术语"><span>专业术语</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Domain-Driven Design 领域驱动设计</span></span>\n<span class="line"><span>DataAccessobjects DAO 数据存取对象</span></span>\n<span class="line"><span>PersistenceObject PO 持久化层对象</span></span>\n<span class="line"><span>DataTransferObject DTO 数据传输对象</span></span>\n<span class="line"><span>ViewObject VO 视图对象</span></span>\n<span class="line"><span>DomainObject DO 领域对象</span></span>\n<span class="line"><span>view 展现层     </span></span>\n<span class="line"><span>service 服务层  </span></span>\n<span class="line"><span>po 数据持久化层</span></span>\n<span class="line"><span>防腐 领域之间互相访问获取到的其他域的模型需要转换映射到自己域的模型（域之间可能会有相互的依赖，需要注意域之间的防腐，并且依赖注入的方式注入而不是直接New其他域的对象出来使用）</span></span>\n<span class="line"><span>界限 域拆分依据业务水平拆分，平行而非上下</span></span>\n<span class="line"><span>领域驱动三层架构 API层\\Domain层\\Repository层</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="领域驱动三层架构" tabindex="-1"><a class="header-anchor" href="#领域驱动三层架构"><span>领域驱动三层架构</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>API层\\Domain层\\Repository层</span></span>\n<span class="line"><span>API层负责对外的rpc\\http接口</span></span>\n<span class="line"><span>Domain层领域逻辑层，负责组装数据源代理层 po 返回的数据模型，转换为领域模型Domain Object</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Repository层是数据源代理层，比如有一层抽象 interface GetUser 那么这个User内部可能有多</span></span>\n<span class="line"><span>个实现有 Elastic\\MySQL\\MongoDB，也可以是以HTTP或者RPC为数据源</span></span>\n<span class="line"><span>而数据源代理层再底层就是持久化层或者RPC依赖等</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>有什么用？</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>按照数据流向是一个垂直分层的结构</span></span>\n<span class="line"><span>PO层可以随时更换比如MySQL更换为MongoDB</span></span>\n<span class="line"><span>Domain域模型是固定的，逻辑是抽象可更改实现</span></span>\n<span class="line"><span>API层负责对外模型与前端或者其他微服务</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1. 单元测试，解耦有利于对每一层测试覆盖</span></span>\n<span class="line"><span>2. 可扩展性，解耦有利于各个业务之间剥离比如将两个同属一个微服务的域拆成两个微服务或者独立他们依赖的持久化层</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="领域驱动下的项目层级" tabindex="-1"><a class="header-anchor" href="#领域驱动下的项目层级"><span>领域驱动下的项目层级</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>├── application</span></span>\n<span class="line"><span>│   ├── admin_service</span></span>\n<span class="line"><span>│   │   ├── dto</span></span>\n<span class="line"><span>│   │        └── user.go</span></span>\n<span class="line"><span>│   │   └── grpc</span></span>\n<span class="line"><span>│   │        └── user_rpc.go</span></span>\n<span class="line"><span>│   ├── event</span></span>\n<span class="line"><span>│        └── user_event.go</span></span>\n<span class="line"><span>│   ├── message</span></span>\n<span class="line"><span>│        └── user_message.go</span></span>\n<span class="line"><span>│   └── front_service</span></span>\n<span class="line"><span>│       ├── dtos</span></span>\n<span class="line"><span>│       └── http</span></span>\n<span class="line"><span>│   └────── init.go </span></span>\n<span class="line"><span>├── config</span></span>\n<span class="line"><span>│   └── config.go </span></span>\n<span class="line"><span>├── domain</span></span>\n<span class="line"><span>│   ├── common</span></span>\n<span class="line"><span>│   │   ├── entity</span></span>\n<span class="line"><span>│   │         └──----------- do.go </span></span>\n<span class="line"><span>│   │   └── repository</span></span>\n<span class="line"><span>│   │         └──----------- repository.go</span></span>\n<span class="line"><span>│   │         └──----------- po.go</span></span>\n<span class="line"><span>│   │         └──----------- mysql_po.go</span></span>\n<span class="line"><span>│   │         └──----------- elastic_po.go</span></span>\n<span class="line"><span>│   │   service.go</span></span>\n<span class="line"><span>│   ├── user</span></span>\n<span class="line"><span>│   │   ├── entity</span></span>\n<span class="line"><span>│   │   └──----------- do.go </span></span>\n<span class="line"><span>│   │   └── repository</span></span>\n<span class="line"><span>│   │   └──----------- repository.go</span></span>\n<span class="line"><span>│   │   └──----------- po.go</span></span>\n<span class="line"><span>│   │   └──----------- mysql_po.go</span></span>\n<span class="line"><span>│   │   └──----------- elastic_po.go</span></span>\n<span class="line"><span>│   │   service.go</span></span>\n<span class="line"><span>├── global</span></span>\n<span class="line"><span>│   ├── cache</span></span>\n<span class="line"><span>│   ├── enum</span></span>\n<span class="line"><span>│   └── router</span></span>\n<span class="line"><span>├── cmd</span></span>\n<span class="line"><span>│   └── main.go</span></span>\n<span class="line"><span>└── helper</span></span>\n<span class="line"><span>    └── times.go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>如上所示</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1. domain里有通用域common、业务域user等</span></span>\n<span class="line"><span>2. application提供对外的API层（http或者rpc形式）同时 application 依赖 domain.user\\domain.book等</span></span>\n<span class="line"><span>3. event 是领域事件，这里没有写入domain而是直接挂一级目录，承载各个定时程序</span></span>\n<span class="line"><span>4. message 消息处理，这里负责对一些外部消息接收处理比如kafka的messsage.consumer</span></span>\n<span class="line"><span>5. config 配置依赖处理</span></span>\n<span class="line"><span>6. cmd 编译入口也是程序执行入口</span></span>\n<span class="line"><span>7. global 与helper不一样的是这里的都是耦合业务的一些通用的枚举值、缓存key管理、路由等</span></span>\n<span class="line"><span>8. helper 工具类</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他的私有git库依赖" tabindex="-1"><a class="header-anchor" href="#其他的私有git库依赖"><span>其他的私有Git库依赖</span></a></h3><ol><li>util 工具库(完全与业务无耦合)</li><li>config 通用配置结构体定义(配置结构体\\nacos配置加载\\填充团队的默认配置比如kafka的消费心跳、poll数量、mongodb的集群配置样例等)</li><li>proto RPC接口(具体实现的server和调用client在其他微服务)</li><li>logger 日志类库(实现与zap\\logrus\\log一致的抽象、接入企业微信告警、邮箱告警、Elastic持久化日志(异步主动push形式采集或者打印标准输出宿主机的Filebeat采集))</li><li>common_errors 通用错误定义(错误码\\错误提示\\国际化等)</li><li>gin-middleware 通用的中间件(prometheus.request.metrics\\jwt\\encrypt请求解密\\敏感字符过滤器等)</li><li>common 微服务中通用基础库(与业务有耦合定义kafka\\redis\\mysql\\elastic的客户端client.Builder)</li></ol><h3 id="参考博客" tabindex="-1"><a class="header-anchor" href="#参考博客"><span>参考博客</span></a></h3><p><a href="https://www.runoob.com/note/27029" target="_blank" rel="noopener noreferrer">Java DAO 模式</a><a href="https://zhuanlan.zhihu.com/p/91525839" target="_blank" rel="noopener noreferrer">DDD实践 知乎专栏</a><a href="https://tech.meituan.com/2017/12/22/ddd-in-practice.html" target="_blank" rel="noopener noreferrer">美团DDD实践</a></p>',11)]))}]]),p=JSON.parse('{"path":"/posts/architecture/%E8%A7%A3%E6%9E%84%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1.html","title":"领域驱动模型设计简单应用","lang":"zh-CN","frontmatter":{"title":"领域驱动模型设计简单应用","tags":["领域驱动模型设计"],"categories":["领域驱动设计"],"date":"2023-04-08T06:40:12.000Z","index_img":"/images/bg/computer.jpeg","description":"专业术语 领域驱动三层架构 领域驱动下的项目层级 其他的私有Git库依赖 util 工具库(完全与业务无耦合) config 通用配置结构体定义(配置结构体\\\\nacos配置加载\\\\填充团队的默认配置比如kafka的消费心跳、poll数量、mongodb的集群配置样例等) proto RPC接口(具体实现的server和调用client在其他微服务) lo...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/architecture/%E8%A7%A3%E6%9E%84%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"笔记本"}],["meta",{"property":"og:title","content":"领域驱动模型设计简单应用"}],["meta",{"property":"og:description","content":"专业术语 领域驱动三层架构 领域驱动下的项目层级 其他的私有Git库依赖 util 工具库(完全与业务无耦合) config 通用配置结构体定义(配置结构体\\\\nacos配置加载\\\\填充团队的默认配置比如kafka的消费心跳、poll数量、mongodb的集群配置样例等) proto RPC接口(具体实现的server和调用client在其他微服务) lo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"领域驱动模型设计"}],["meta",{"property":"article:published_time","content":"2023-04-08T06:40:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"领域驱动模型设计简单应用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-08T06:40:12.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"专业术语","slug":"专业术语","link":"#专业术语","children":[]},{"level":3,"title":"领域驱动三层架构","slug":"领域驱动三层架构","link":"#领域驱动三层架构","children":[]},{"level":3,"title":"领域驱动下的项目层级","slug":"领域驱动下的项目层级","link":"#领域驱动下的项目层级","children":[]},{"level":3,"title":"其他的私有Git库依赖","slug":"其他的私有git库依赖","link":"#其他的私有git库依赖","children":[]},{"level":3,"title":"参考博客","slug":"参考博客","link":"#参考博客","children":[]}],"readingTime":{"minutes":3.17,"words":951},"filePathRelative":"posts/architecture/解构领域驱动设计.md","localizedDate":"2023年4月8日","excerpt":"<h3>专业术语</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>Domain-Driven Design 领域驱动设计</span></span>\\n<span class=\\"line\\"><span>DataAccessobjects DAO 数据存取对象</span></span>\\n<span class=\\"line\\"><span>PersistenceObject PO 持久化层对象</span></span>\\n<span class=\\"line\\"><span>DataTransferObject DTO 数据传输对象</span></span>\\n<span class=\\"line\\"><span>ViewObject VO 视图对象</span></span>\\n<span class=\\"line\\"><span>DomainObject DO 领域对象</span></span>\\n<span class=\\"line\\"><span>view 展现层     </span></span>\\n<span class=\\"line\\"><span>service 服务层  </span></span>\\n<span class=\\"line\\"><span>po 数据持久化层</span></span>\\n<span class=\\"line\\"><span>防腐 领域之间互相访问获取到的其他域的模型需要转换映射到自己域的模型（域之间可能会有相互的依赖，需要注意域之间的防腐，并且依赖注入的方式注入而不是直接New其他域的对象出来使用）</span></span>\\n<span class=\\"line\\"><span>界限 域拆分依据业务水平拆分，平行而非上下</span></span>\\n<span class=\\"line\\"><span>领域驱动三层架构 API层\\\\Domain层\\\\Repository层</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);