"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[981],{6262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}},1407:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>l,data:()=>p});var e=a(641);const i={},l=(0,a(6262).A)(i,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,n[0]||(n[0]=[(0,e.Fv)('<h1 id="mongodb基于k8s实现高可用" tabindex="-1"><a class="header-anchor" href="#mongodb基于k8s实现高可用"><span>mongodb基于k8s实现高可用</span></a></h1><h1 id="mongo集群模式" tabindex="-1"><a class="header-anchor" href="#mongo集群模式"><span>mongo集群模式</span></a></h1><p>MongoDB 有三种集群部署模式，分别为主从复制（Master-Slaver）、副本集（Replica Set）和分片（Sharding）模式。</p><p>Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。</p><p>Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。</p><p>Sharding模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。</p><h1 id="三种集群模式评价" tabindex="-1"><a class="header-anchor" href="#三种集群模式评价"><span>三种集群模式评价</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sharding</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 模式追求的是高性能，而且是三种集群中最复杂的。在实际生产环境中，通常将</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Replica</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Sharding</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 两种技术结合使用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="主从" tabindex="-1"><a class="header-anchor" href="#主从"><span>主从</span></a></h1><p>一主多从</p><p>比单机好，起码在故障恢复、容灾、备份、读扩展会好很多</p><p>主节点人工配置，集群出现问题，需要人工将从节点指定为主节点</p><p>从节点和主节点之前通过从节点定期轮询主节点的方式同步数据</p><p>从节点只用于读</p><h1 id="副本" tabindex="-1"><a class="header-anchor" href="#副本"><span>副本</span></a></h1><p>一主多从</p><p>主节点故障时候，从节点会自动选举出主节点</p><p>主节点会设置其他节点为从节点并设置从节点的可读性分担读取数据压力</p><p>副本集可以解决主节点发生故障导致数据丢失或不可用的问题，但遇到需要存储海量数据的情况时，副本集机制就束手无策了，副本集中的一台机器可能不足以存储数据，或者说集群不足以提供可接受的读写吞吐量</p><h1 id="分片" tabindex="-1"><a class="header-anchor" href="#分片"><span>分片</span></a></h1><p>分片服务器（Shard Server）、配置服务器（Config Server）和路由服务器（Route Server）</p><p>每个 Shard Server 都是一个 mongod 数据库实例，用于存储实际的数据块</p><p>实际生产中，一个 Shard Server 可由几台机器组成一个副本集来承担，防止因主节点单点故障导致整个系统崩溃</p><h1 id="上述集群模式诠释了什么是高可用、高可扩展性" tabindex="-1"><a class="header-anchor" href="#上述集群模式诠释了什么是高可用、高可扩展性"><span>上述集群模式诠释了什么是高可用、高可扩展性</span></a></h1><h3 id="高可用原理" tabindex="-1"><a class="header-anchor" href="#高可用原理"><span>高可用原理</span></a></h3><p>MongoDB分布式集群架构（3种模式）</p><p>http://c.biancheng.net/view/6567.html</p><p>全面剖析 MongoDB 高可用架构</p><p>https://mp.weixin.qq.com/s/jLsviuQ0wCcsmkskXSFdEQ</p><p>MongoDB 副本集之入门篇</p><p>https://jelly.jd.com/article/5f990ebbbfbee00150eb620a</p><p>Mongodb主从复制/ 副本集/分片集群介绍</p><p>https://www.cnblogs.com/kevingrace/p/5685486.html</p><p>官方推荐的搭建方案</p><p>https://registry.hub.docker.com/r/bitnami/mongodb</p><h3 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h3><p>kubernetes生产实践之mongodb</p><p>https://zhuanlan.zhihu.com/p/356658594</p><p>http://t.zoukankan.com/klvchen-p-13685380.html</p><h3 id="测试验证" tabindex="-1"><a class="header-anchor" href="#测试验证"><span>测试验证</span></a></h3><h3 id="一、mongodb-replicaset" tabindex="-1"><a class="header-anchor" href="#一、mongodb-replicaset"><span>一、MongoDB ReplicaSet</span></a></h3><ol><li>创建命名空间</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl create namespace dev</span></span>\n<span class="line"><span># 查看节点名称</span></span>\n<span class="line"><span>kubectl get nodes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>mongod-replicaset.yaml</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>apiVersion: apps/v1 </span></span>\n<span class="line"><span>kind: Deployment</span></span>\n<span class="line"><span>metadata:</span></span>\n<span class="line"><span>  namespace: dev</span></span>\n<span class="line"><span>  name: mongodb</span></span>\n<span class="line"><span>  labels:</span></span>\n<span class="line"><span>    app: mongodb</span></span>\n<span class="line"><span>spec:</span></span>\n<span class="line"><span>  replicas: 1</span></span>\n<span class="line"><span>  selector:</span></span>\n<span class="line"><span>    matchLabels:</span></span>\n<span class="line"><span>      app: mongodb</span></span>\n<span class="line"><span>  template:</span></span>\n<span class="line"><span>    metadata:</span></span>\n<span class="line"><span>      labels:</span></span>\n<span class="line"><span>        app: mongodb</span></span>\n<span class="line"><span>    spec:</span></span>\n<span class="line"><span>      nodeName: k8s-node1    # 固定在 k8s-node1 节点</span></span>\n<span class="line"><span>      containers:</span></span>\n<span class="line"><span>      - name: mongodb</span></span>\n<span class="line"><span>        image: mongo:4.2.9</span></span>\n<span class="line"><span>        resources:</span></span>\n<span class="line"><span>          limits:            # 限定资源</span></span>\n<span class="line"><span>            cpu: 1000m</span></span>\n<span class="line"><span>            memory: 1Gi</span></span>\n<span class="line"><span>          requests:</span></span>\n<span class="line"><span>            cpu: 100m</span></span>\n<span class="line"><span>            memory: 1Gi</span></span>\n<span class="line"><span>        env:</span></span>\n<span class="line"><span>          - name: MONGO_INITDB_ROOT_USERNAME  # 设置用户名</span></span>\n<span class="line"><span>            value: root</span></span>\n<span class="line"><span>          - name: MONGO_INITDB_ROOT_PASSWORD  # 设置密码</span></span>\n<span class="line"><span>            value: &#39;123456&#39;</span></span>\n<span class="line"><span>        volumeMounts:</span></span>\n<span class="line"><span>          - mountPath: /data/db                    </span></span>\n<span class="line"><span>            name: mongodb-volume</span></span>\n<span class="line"><span>      volumes:</span></span>\n<span class="line"><span>        - name: mongodb-volume</span></span>\n<span class="line"><span>          hostPath:</span></span>\n<span class="line"><span>            path: /data/rs-mongodb-volume          # 映射的宿主机目录</span></span>\n<span class="line"><span>            type: DirectoryOrCreate</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span>---</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>apiVersion: v1</span></span>\n<span class="line"><span>kind: Service</span></span>\n<span class="line"><span>metadata:</span></span>\n<span class="line"><span>  namespace: dev</span></span>\n<span class="line"><span>  name: mongodb</span></span>\n<span class="line"><span>spec:</span></span>\n<span class="line"><span>  type: ClusterIP</span></span>\n<span class="line"><span>  selector:</span></span>\n<span class="line"><span>    app: mongodb</span></span>\n<span class="line"><span>  ports:</span></span>\n<span class="line"><span>  - port: 27017</span></span>\n<span class="line"><span>    targetPort: 27017</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>执行安装</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl apply -f mongod-replicaset.yaml</span></span>\n<span class="line"><span>kubectl get pod -n dev -o wide</span></span>\n<span class="line"><span># 查看详细-如果起不来需要用于排查原因</span></span>\n<span class="line"><span>kubectl describe pod mongodb -n dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>查看用户名密码</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl -n dev exec -it POD_NAME /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="6"><li>登陆集群</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mongo admin</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>db.auth(&#39;root&#39;,&#39;123456&#39;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>use test</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>db.createUser(</span></span>\n<span class="line"><span>   {</span></span>\n<span class="line"><span>     user: &quot;test&quot;,</span></span>\n<span class="line"><span>     pwd: &quot;test123&quot;,</span></span>\n<span class="line"><span>     roles: [ { role: &quot;readWrite&quot;, db: &quot;test&quot; } ]</span></span>\n<span class="line"><span>   }</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>show dbs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、mongodb-sharding" tabindex="-1"><a class="header-anchor" href="#二、mongodb-sharding"><span>二、MongoDB Sharding</span></a></h3><ol><li>编写mongodb-sharding.yaml</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>apiVersion: kubedb.com/v1alpha2</span></span>\n<span class="line"><span>kind: MongoDB</span></span>\n<span class="line"><span>metadata:</span></span>\n<span class="line"><span>  name: mongo-sharding</span></span>\n<span class="line"><span>  namespace: op</span></span>\n<span class="line"><span>spec:</span></span>\n<span class="line"><span>  version: 4.2.3</span></span>\n<span class="line"><span>  shardTopology:</span></span>\n<span class="line"><span>    configServer:</span></span>\n<span class="line"><span>      replicas: 3</span></span>\n<span class="line"><span>      storage:</span></span>\n<span class="line"><span>        resources:</span></span>\n<span class="line"><span>          requests:</span></span>\n<span class="line"><span>            storage: 1Gi</span></span>\n<span class="line"><span>        storageClassName: rbd</span></span>\n<span class="line"><span>    mongos:</span></span>\n<span class="line"><span>      replicas: 2</span></span>\n<span class="line"><span>    shard:</span></span>\n<span class="line"><span>      replicas: 3</span></span>\n<span class="line"><span>      shards: 2</span></span>\n<span class="line"><span>      storage:</span></span>\n<span class="line"><span>        resources:</span></span>\n<span class="line"><span>          requests:</span></span>\n<span class="line"><span>            storage: 1Gi</span></span>\n<span class="line"><span>        storageClassName: rbd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>执行部署，并查看部署状态</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl exec -it podName  -c  containerName -n namespace -- shell comand</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>kubectl exec -it mongodb -n op -- shell comand</span></span>\n<span class="line"><span>kubectl apply -f mongodb-sharding.yaml</span></span>\n<span class="line"><span>kubectl get po -n op</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>验证集群状态及读写</li></ol><h1 id="获取账号密码" tabindex="-1"><a class="header-anchor" href="#获取账号密码"><span>获取账号密码</span></a></h1><p>kubectl get secrets -n demo mongo-sh-auth -o jsonpath=&#39;{.data.\\username}&#39; | base64 -d root kubectl get secrets -n demo mongo-sh-auth -o jsonpath=&#39;{.data.\\password}&#39; | base64 -d 123456</p><p>mongo admin -u root -p</p><p>查看分片集群状态 sh.status()</p><p>创建分片 sh.enableSharding(&quot;test&quot;);</p><p>创建集合 sh.shardCollection(&quot;test.testcoll&quot;, {&quot;myfield&quot;: 1});</p><p>写入数据 db.testcoll.insert({&quot;myfield&quot;: &quot;scofield&quot;, &quot;agefield&quot;: &quot;18&quot;}); db.testcoll.insert({&quot;myfield&quot;: &quot;amos&quot;, &quot;otherfield&quot;: &quot;d&quot;, &quot;kube&quot; : &quot;db&quot; });</p><p>获取数据 db.testcoll.find();</p>',65)]))}]]),p=JSON.parse('{"path":"/posts/mongodb/Mongo%E9%9B%86%E7%BE%A4.html","title":"mongodb集群","lang":"zh-CN","frontmatter":{"title":"mongodb集群","hide":true,"description":"mongodb基于k8s实现高可用 mongo集群模式 MongoDB 有三种集群部署模式，分别为主从复制（Master-Slaver）、副本集（Replica Set）和分片（Sharding）模式。 Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。 Replica Set 模式取代了 Master-Slaver 模式，是一种互...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://weiqiangxu.github.io/posts/mongodb/Mongo%E9%9B%86%E7%BE%A4.html"}],["meta",{"property":"og:site_name","content":"QuickStart程序员"}],["meta",{"property":"og:title","content":"mongodb集群"}],["meta",{"property":"og:description","content":"mongodb基于k8s实现高可用 mongo集群模式 MongoDB 有三种集群部署模式，分别为主从复制（Master-Slaver）、副本集（Replica Set）和分片（Sharding）模式。 Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。 Replica Set 模式取代了 Master-Slaver 模式，是一种互..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mongodb集群\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuweiqiang\\",\\"url\\":\\"https://weiqiangxu.github.io\\"}]}"]]},"headers":[{"level":3,"title":"高可用原理","slug":"高可用原理","link":"#高可用原理","children":[]},{"level":3,"title":"实践","slug":"实践","link":"#实践","children":[]},{"level":3,"title":"测试验证","slug":"测试验证","link":"#测试验证","children":[]},{"level":3,"title":"一、MongoDB ReplicaSet","slug":"一、mongodb-replicaset","link":"#一、mongodb-replicaset","children":[]},{"level":3,"title":"二、MongoDB Sharding","slug":"二、mongodb-sharding","link":"#二、mongodb-sharding","children":[]}],"readingTime":{"minutes":3.62,"words":1086},"filePathRelative":"posts/mongodb/Mongo集群.md","excerpt":"\\n<h1>mongo集群模式</h1>\\n<p>MongoDB 有三种集群部署模式，分别为主从复制（Master-Slaver）、副本集（Replica Set）和分片（Sharding）模式。</p>\\n<p>Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。</p>\\n<p>Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。</p>\\n<p>Sharding模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。</p>","autoDesc":true}')}}]);